#
# run a ycp file
#
proc ycp-run { src } {

  set path [split $src "/"]
  set filename [lindex $path [expr [llength $path]-1]]

  # extract basename and check extension

  set fname [split $filename "."]

  if {[llength $fname] < 2} {
    fail "Bad filename syntax '$src'"
    return -1
  }
  if {[lindex $fname [expr [llength $fname]-1]] != "ycp"} {
    fail "Not .ycp extension '$src'"
    return -1
  }

  # setup filenames

  # $src is the name of the original testfile with absolute path
  # tests/$filename is the name of the original testfile with relative path,
  #                 relative to the testsuite directory
  set test_input  "tests/$filename"

  set base_name [lindex $fname 0]

  set stdout_name "tests/$base_name.out"
  set stderr_name "tests/$base_name.err"
  set log_name    "tests/$base_name.log"
  set tmpout_name "tmp.out.$base_name"
  set tmperr_name "tmp.err.$base_name"
  set tmplog_name "tmp.log.$base_name"

  puts "Running $base_name..."

  # run the test

  set result ""
  set oops [catch { set result [exec "tests/runtest.sh" "$test_input" "$tmpout_name" "$tmperr_name" ] } catched]

  if {$oops != 0} {
    fail "test case failed for $base_name: $catched"
    return -1
  }

  # check return code from runycp

  if {$result != ""} {
    warning "Compilation of $base_name results in '$result'"
    return -1
  }

  # check stderr

  if {[diff $stderr_name "tmp.err.$base_name"] != 1} {
    fail "Wrong stderr for $base_name"
    return -1
  }

  # check stdout

  if {[diff $stdout_name "tmp.out.$base_name"] != 1} {
    fail "Wrong stdout for $base_name"
    return -1
  }

  # ok, all is fine

  pass $base_name

  return 0
}

#
# ppd-db creation test
#
proc ppd-db-run { srcdir } {

  # run the test

  set result ""
  set oops [catch { set result [exec "ag_cups.ppd/runtest.sh" "$srcdir/ppdfiles" "$srcdir/tmp.out.ppddb" "$srcdir/tmp.err.ppddb" ] } catched]

  if {$oops != 0} {
    fail "test case failed for runppd: $catched"
    return -1
  }

  # check return code from runycp

  if {$result != ""} {
    warning "Compilation of runppd results in '$result'"
    return -1
  }

  # check stderr
  # we do not check stderr because strange directories as CVS may appear there :-(
#  if {[diff "$srcdir/ag_cups.ppd/ppddb.err" "$srcdir/tmp.err.ppddb" ] != 1} {
#    fail "Wrong stderr for runppd"
#    return -1
#  }

  # check stdout
  if {[diff "$srcdir/ag_cups.ppd/ppddb.out" "$srcdir/tmp.out.ppddb" ] != 1} {
    fail "Wrong stdout for runppd"
    return -1
  }

  # ok, all is fine

  pass runppd

  return 0
}

proc cups-setup-temp { srcdir } {
    set oops [catch { set result [exec "./run_cups"] } catched]
    return $oops
}

proc cups-shutdown-temp { } {
    set oops [catch { set result [exec "./stop_cups"] } catched]
}

proc cups-run { src } {

  set path [split $src "/"]
  set filename [lindex $path [expr [llength $path]-1]]

  # extract basename and check extension

  set fname [split $filename "."]

  if {[llength $fname] < 2} {
    fail "Bad filename syntax '$src'"
    return -1
  }
  if {[lindex $fname [expr [llength $fname]-1]] != "ycp"} {
    fail "Not .ycp extension '$src'"
    return -1
  }

  # setup filenames

  # $src is the name of the original testfile with absolute path
  # tests/$filename is the name of the original testfile with relative path,
  #                 relative to the testsuite directory
  set test_input  "cups/$filename"

  set base_name [lindex $fname 0]

  set stdout_name "cups/$base_name.out"
  set stderr_name "cups/$base_name.err"
  set log_name    "cups/$base_name.log"
  set tmpout_name "tmp.out.$base_name"
  set tmperr_name "tmp.err.$base_name"
  set tmplog_name "tmp.log.$base_name"

  puts "Running $base_name..."

  # run the test

  set result ""
  set oops [catch { set result [exec "cups/runtest.sh" "$test_input" "$tmpout_name" "$tmperr_name" ] } catched]

  if {$oops != 0} {
    fail "test case failed for $base_name: $catched"
    return -1
  }

  # check return code from runycp

  if {$result != ""} {
    warning "Compilation of $base_name results in '$result'"
    return -1
  }

  # check stderr

  if {[diff $stderr_name "tmp.err.$base_name"] != 1} {
    fail "Wrong stderr for $base_name"
    return -1
  }

  # check stdout

  if {[diff $stdout_name "tmp.out.$base_name"] != 1} {
    fail "Wrong stdout for $base_name"
    return -1
  }

  # ok, all is fine

  pass $base_name

  return 0
}
