{

textdomain "printer";
import "Label";
import "Printer";

import "Wizard";
include "printer/helps.ycp";

term getContentFromBackend(string backend){
 list items=[];
 backend=sformat("%1:/", backend);
 foreach(term row, (list<term>)Printer::ConnectionItems( "" ), {
  if(backend==substring(row[2]:"", 0, size(backend))){
   items=add(items, row);
  }
 });

 term content = `VBox(
        `Table
        ( `id(`connection_selection),
          // By default there is no UserInput()
          // if only something was selected in the Table
          // (without clicking additionally a button)
          // but the notify and immediate options
          // forces UserInput() in this case:
          `opt(`notify, `immediate, `keepSorting),
          // Headers of a Table with a list of printer connections:
          `header
          ( // Header of a Table column with a list of printer connections.
            // Printer model name:
            _("Model"),
            // Header of a Table column with a list of printer connections.
            // Connection of the printer (e.g. via USB or via parallel port):
            _("Connection"),
            // Header of a Table column with a list of printer connections.
            // Additional description of the printer or its particular connection:
            _("Description")
          ),
	  items
         ),
	 `HBox(
				//TRANSLATORS: Button to test remote printer machine
		`PushButton(`id(`test), _("&Test Connection")),
				//TRANSLATORS: Button to add not detected printer queue
		`PushButton(`id(`other), _("Other"))
		)
	);
 return content;
}

term getNetworkContent(list<string>text){
 if (size(text)!=3){
  y2error("To create content for Network dialog it needs 3 strings : %1", text);
  return nil;
 }
 term content=`VBox(
        `HBox(
		//TRANSLATORS: Text entry to fill IP or hostname of remote server
	      `InputField(`id(`hostname), _("IP Address or Host Name")),
		//TRANSLATORS: Label for menu to search for remote servers
	      `MenuButton(_("Look Up"),
	       [
		`item(`id(`scan), text[0]:""),
			//TRANSLATORS: Buttonto search for remote servers
		`item(`id(`scan_all), _("Look Up for All Hosts"))
	       ]
	       )
	),
    `InputField(`id(`port), text[1]:"", text[2]:""),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
  );
 return content;
}

void changeSettingsDialog(symbol selected){
 term content=nil;
 switch(selected){
 // directly connected
  case(`parallel):
	content = getContentFromBackend("parallel");
	break;
  case(`usb):
	content = getContentFromBackend("usb");
	break;
  case(`serial):
	content = getContentFromBackend("serial");
	break;
  case(`infra):
	content = getContentFromBackend("infra");
	break;
  case(`bluetooth):
	content = getContentFromBackend("bluetooth");
	break;
  case(`scsi):
	content = getContentFromBackend("scsi");
	break;
  case(`hplip):
	content = getContentFromBackend("hp");
	break;
 // network printer
  case(`tcp):
			//TRANSLATORS: List of input field labels, first for network scan button
	content = getNetworkContent([_("Scan for Direct Socket Servers"), _("TCP Port Number"), "9100"]);
	break;
  case(`lpd):
	//TRANSLATORS: List of input field labels, first for network scan button, second for name of printer queue
	content = getNetworkContent([_("Scan for LPD Servers"), _("Queue Name (see the printer's manual)"), "LPT1"]);
	break;
  case(`ipp):
	content=`VBox(
			//TRANSLATORS: Input field label
		`InputField(`id(`uri), _("URI (see the printer's manual)"), "ipp://ip-address:port-number/resource")
	);
	break;
 // print via
  case(`smb):
       content=`VBox(
		//TRANSLATORS: Text entry for remote server name
        `InputField(`id(`hostname), _("Server (NetBIOS Host Name)")),
		//TRANSLATORS: Text entry for printer name
        `InputField(`id(`printer), _("Printer (Share Name)")),
		//TRANSLATORS: Text entry for samba domain
        `InputField(`id(`domain), _("Workgroup (Domain Name)")),
	//TRANSLATORS: Frame label for authentication
        `Frame(_("Authenticate As"), `VBox(
	//TRANSLATORS: Text entry for username (authentication)
        `InputField(`id(`user), _("User")),
	//TRANSLATORS: Text entry for password (authentication)
        `Password(`id(`pass), _("&Password"))
        )),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
       );
	break;
  case(`lpr):
        //TRANSLATORS: List of input field labels, first for network scan button, second for name of printer queue
        content = getNetworkContent([_("Scan for LPD Servers"), _("Queue Name"), ""]);
        break;
  case(`cups):
	content=`VBox(
        `HBox(
		//TRANSLATORS: Text entry for IP or hostname of remote server
	      `InputField(`id(`hostname), _("IP Address or Host Name")),
		//TRANSLATORS: Label for menu to search for remote servers
	      `MenuButton(_("Look Up"),
	       [
		`item(`id(`scan_ipp), _("Scan for IPP Servers")),
		`item(`id(`scan_broadcast), _("Scan for IPP Broadcasts")),
		`item(`id(`scan_all), _("Look Up for All Hosts"))
	       ]
	       )
	     ),
        `InputField(`id(`queue), _("Queue Name")),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
	);
	break;
  case(`ipx):
       content=`VBox(
	//TRANSLATORS: Text entry for IP or hostname of remote server
        `InputField(`id(`hostname), _("IP Address or Host Name")),
	//TRANSLATORS: Text entry for name of remote printer queue
        `InputField(`id(`queue), _("Queue Name")),
	//TRANSLATORS: Frame label for authentication
        `Frame(_("Authenticate As"), `VBox(
	//TRANSLATORS: Text entry for username (authentication)
         `InputField(`id(`user), _("User")),
	//TRANSLATORS: Text entry for password (authentication)
         `Password(`id(`pass), _("&Password"))
        )),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
       );
	break;
 // special
  case(`uri):
	content=`VBox(
	//TRANSLATORS: Text entry for URI (Uniform Resource Identifier)
	`InputField(`id(`uri), _("URI (Uniform Resource Identifier)"))
	);
	break;
  case(`pipe):
	content=`VBox(
	//TRANSLATORS: Text entry for program name that will be called via pipe
	`InputField(`id(`program), _("Program Name"))
	);
	break;
  case(`beh):
	content=`VBox(
				//TRANSLATORS: Text entry for device URI (Uniform Resource Identifier)
       `InputField(`id(`queue), _("Device URI (for which 'beh' should be applied)"), Printer::queues[Printer::selected_queues_index,"uri"]:""),
				//TRANSLATORS: Check box
       `CheckBox(`id(`beh_do_not_disable), _("Never Disable the Queue"), true),
					//TRANSLATORS: Text entry
         `InputField(`id(`beh_attempts), _("Number of Retries ('0' means infinite retries)"), "0"),
					//TRANSLATORS: Text entry
         `InputField(`id(`beh_delay), _("Delay in Seconds Between Two Retries"), "30")
	);
	break;
  case(`directly):
  case(`network):
  case(`server):
  case(`special):
	content=`VBox();
	break;
  default:
	y2error("Unknown selected item %1", selected);
 }
 UI::ReplaceWidget(`rp, content);
}


any ConnectionWizardDialog(){
term contents =
`VBox(
 `HBox(
  `VBox(
			//TRANSLATORS: Label for tree widget description
   `Tree(`id(`tree_selection), `opt(`notify), _("&Connection Type"),
    [
			//TRANSLATORS: Tree widget item
     `item(`id(`directly), _("Directly Connected Device"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`parallel), _("Parallel Port")),
		//TRANSLATORS: Tree widget item
      `item(`id(`usb), _("USB Port")),
		//TRANSLATORS: Tree widget item
      `item(`id(`serial), _("Serial Port")),
//      `item(`id(`infra), _("Infrared Port (IrDA)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`bluetooth), _("Bluetooth")),
		//TRANSLATORS: Tree widget item
      `item(`id(`scsi), _("SCSI")),
		//TRANSLATORS: Tree widget item
      `item(`id(`hplip), _("HP Devices (HPLIP)"))
     ]),
		//TRANSLATORS: Tree widget item
     `item(`id(`network), _("Access Network Printer or Printserver Box via"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`tcp), _("TCP Port (AppSocket/JetDirect)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`lpd), _("Line Printer Daemon (LPD) Protocol")),
		//TRANSLATORS: Tree widget item
      `item(`id(`ipp), _("Internet Printing Protocol (IPP)"))
     ]),
		//TRANSLATORS: Tree widget item
     `item(`id(`server), _("Print Via Print Server Machine"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`smb), _("Microsoft Windows/SAMBA (SMB/CIFS)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`lpr), _("Traditional UNIX Server (LPR)")),
//      `item(`id(`iprint), _("iPrint (Novell OES)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`cups), _("CUPS Server")),
		//TRANSLATORS: Tree widget item
      `item(`id(`ipx), _("Novell Netware Print Server (IPX)"))
     ]),
		//TRANSLATORS: Tree widget item
     `item(`id(`special), _("Special"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`uri), _("Specify Arbitrary Device URI")),
		//TRANSLATORS: Tree widget item
      `item(`id(`pipe), _("Send Print Data to Other Program (pipe)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`beh), _("Daisy-chain Backend Error Handler (beh)"))
     ])
    ]
   )
  ),
  `VBox(
	//TRANSLATORS: Connection details widget
   `Frame(_("Connection Settings"),
     `ReplacePoint(`id(`rp), `VBox())
    )
  )
 )
);
			//TRANSLATORS: Connection wizard header
  Wizard::SetContentsButtons( _("Connection Wizard"),
                              contents,
                              HELPS["connection_wizard_dialog"]:"",
                              Label::BackButton(),
                              // Set a different label for the "next" button
                              // (i.e. the lower right button which results `next as UI::UserInput):
                              Label::OKButton()
                            );


//UI::OpenDialog(content);
any ret = nil;
while(ret!=`abort && ret!=`back && ret!=`next){
 ret = UI::UserInput();
 if (ret == `tree_selection) changeSettingsDialog( (symbol)UI::QueryWidget(`tree_selection, `Value) );
 if (ret == `next){
  y2milestone("Writing settings");
 }
}
 return ret;
//UI::CloseDialog();
}
}
