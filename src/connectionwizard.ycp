{

textdomain "printer";
import "Label";
import "Printer";

import "Wizard";
include "printer/helps.ycp";

string connectionURI="";

term getContentFromBackend(string backend){
 list items=[];
 backend=sformat("%1:/", backend);
 foreach(term row, (list<term>)Printer::ConnectionItems( "" ), {
  if(backend==substring(row[2]:"", 0, size(backend))){
   items=add(items, row);
  }
 });

 term content = `VBox(
        `Table
        ( `id(`connection_selection),
          // By default there is no UserInput()
          // if only something was selected in the Table
          // (without clicking additionally a button)
          // but the notify and immediate options
          // forces UserInput() in this case:
          `opt(`notify, `immediate, `keepSorting),
          // Headers of a Table with a list of printer connections:
          `header
          ( // Header of a Table column with a list of printer connections.
            // Printer model name:
            _("Model"),
            // Header of a Table column with a list of printer connections.
            // Connection of the printer (e.g. via USB or via parallel port):
            _("Connection"),
            // Header of a Table column with a list of printer connections.
            // Additional description of the printer or its particular connection:
            _("Description")
          ),
	  items
         ),
	 `HBox(
				//TRANSLATORS: Button to test remote printer machine
		`PushButton(`id(`test), _("&Test Connection")),
				//TRANSLATORS: Button to add not detected printer queue
		`PushButton(`id(`other), _("Other"))
		)
	);
 return content;
}

term getNetworkContent(list<string>text){
 if (size(text)!=3){
  y2error("To create content for Network dialog it needs 3 strings : %1", text);
  return nil;
 }
 term content=`VBox(
        `HBox(
		//TRANSLATORS: Text entry to fill IP or hostname of remote server
	      `ComboBox(`id(`hostname), `opt(`editable), _("IP Address or Host Name")),
		//TRANSLATORS: Label for menu to search for remote servers
	      `MenuButton(_("Look Up"),
	       [
		`item(`id(`scan), text[0]:""),
			//TRANSLATORS: Buttonto search for remote servers
		`item(`id(`scan_all), _("Look Up for All Hosts"))
	       ]
	       )
	),
    `InputField(`id(`port), text[1]:"", text[2]:""),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
  );
 return content;
}

void changeSettingsDialog(symbol selected){
 term content=nil;
 switch(selected){
 // directly connected
  case(`parallel):
	content = getContentFromBackend("parallel");
	break;
  case(`usb):
	content = getContentFromBackend("usb");
	break;
  case(`serial):
	content = getContentFromBackend("serial");
	break;
  case(`infra):
	content = getContentFromBackend("infra");
	break;
  case(`bluetooth):
	content = getContentFromBackend("bluetooth");
	break;
  case(`scsi):
	content = getContentFromBackend("scsi");
	break;
  case(`hplip):
	content = getContentFromBackend("hp");
	break;
 // network printer
  case(`tcp):
			//TRANSLATORS: List of input field labels, first for network scan button
	content = getNetworkContent([_("Scan for Direct Socket Servers"), _("TCP Port Number"), "9100"]);
	break;
  case(`lpd):
	//TRANSLATORS: List of input field labels, first for network scan button, second for name of printer queue
	content = getNetworkContent([_("Scan for LPD Servers"), _("Queue Name (see the printer's manual)"), "LPT1"]);
	break;
  case(`ipp):
	content=`VBox(
			//TRANSLATORS: Input field label
		`InputField(`id(`uri), _("URI (see the printer's manual)"), "ipp://ip-address:port-number/resource")
	);
	break;
 // print via
  case(`smb):
       content=`VBox(
		`HBox(
		//TRANSLATORS: Text entry for remote server name
		`ComboBox(`id(`hostname), `opt(`editable), _("Server (NetBIOS Host Name)")),
		//TRANSLATORS: Label for menu to search for remote servers
		      `MenuButton(_("Look Up"),
			[
			`item(`id(`scan), _("Scan for samba printers")),
			//TRANSLATORS: Buttonto search for remote servers
			`item(`id(`scan_all), _("Look Up for All Hosts"))
			])
		),
		//TRANSLATORS: Text entry for printer name
        `InputField(`id(`printer), _("Printer (Share Name)")),
//	`HBox(
		//TRANSLATORS: Text entry for samba domain
	`ComboBox(`id(`domain), `opt(`editable), _("Workgroup (Domain Name)")),
//		PushButton(`id(`scan_domain), _("Scan for Windows Share Domains"))
//	)
	//TRANSLATORS: Frame label for authentication
        `Frame(_("Authenticate As"), `VBox(
	//TRANSLATORS: Text entry for username (authentication)
        `InputField(`id(`user), _("User")),
	//TRANSLATORS: Text entry for password (authentication)
        `Password(`id(`pass), _("&Password"))
        )),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
       );
	break;
  case(`lpr):
        //TRANSLATORS: List of input field labels, first for network scan button, second for name of printer queue
        content = getNetworkContent([_("Scan for LPD Servers"), _("Queue Name"), ""]);
        break;
  case(`cups):
	content=`VBox(
        `HBox(
		//TRANSLATORS: Text entry for IP or hostname of remote server
	      `ComboBox(`id(`hostname), `opt(`editable), _("IP Address or Host Name")),
		//TRANSLATORS: Label for menu to search for remote servers
	      `MenuButton(_("Look Up"),
	       [
		`item(`id(`scan), _("Scan for IPP Servers")),
		`item(`id(`scan_broadcast), _("Scan for IPP Broadcasts")),
		`item(`id(`scan_all), _("Look Up for All Hosts"))
	       ]
	       )
	     ),
        `InputField(`id(`queue), _("Queue Name")),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
	);
	break;
  case(`ipx):
       content=`VBox(
	//TRANSLATORS: Text entry for IP or hostname of remote server
        `InputField(`id(`hostname), _("IP Address or Host Name")),
	//TRANSLATORS: Text entry for name of remote printer queue
        `InputField(`id(`queue), _("Queue Name")),
	//TRANSLATORS: Frame label for authentication
        `Frame(_("Authenticate As"), `VBox(
	//TRANSLATORS: Text entry for username (authentication)
         `InputField(`id(`user), _("User")),
	//TRANSLATORS: Text entry for password (authentication)
         `Password(`id(`pass), _("&Password"))
        )),
	//TRANSLATORS: Button to test remote printer machine
        `PushButton(`id(`test), _("&Test Connection"))
       );
	break;
 // special
  case(`uri):
	content=`VBox(
	//TRANSLATORS: Text entry for URI (Uniform Resource Identifier)
	`InputField(`id(`uri), _("URI (Uniform Resource Identifier)"))
	);
	break;
  case(`pipe):
	content=`VBox(
	//TRANSLATORS: Text entry for program name that will be called via pipe
	`InputField(`id(`program), _("Program Name"))
	);
	break;
  case(`beh):
	content=`VBox(
				//TRANSLATORS: Text entry for device URI (Uniform Resource Identifier)
       `InputField(`id(`queue), _("Device URI (for which 'beh' should be applied)"), Printer::queues[Printer::selected_queues_index,"uri"]:""),
				//TRANSLATORS: Check box
       `CheckBox(`id(`beh_do_not_disable), _("Never Disable the Queue"), true),
					//TRANSLATORS: Text entry
         `InputField(`id(`beh_attempts), _("Number of Retries ('0' means infinite retries)"), "0"),
					//TRANSLATORS: Text entry
         `InputField(`id(`beh_delay), _("Delay in Seconds Between Two Retries"), "30")
	);
	break;
  case(`directly):
  case(`network):
  case(`server):
  case(`special):
	content=`VBox();
	break;
  default:
	y2error("Unknown selected item %1", selected);
 }
 UI::ReplaceWidget(`rp, content);
}

any ConnectionWizardDialog(){
term contents =
`VBox(
 `HBox(
  `VBox(
			//TRANSLATORS: Label for tree widget description
   `Tree(`id(`tree_selection), `opt(`notify), _("&Connection Type"),
    [
			//TRANSLATORS: Tree widget item
     `item(`id(`directly), _("Directly Connected Device"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`parallel), _("Parallel Port")),
		//TRANSLATORS: Tree widget item
      `item(`id(`usb), _("USB Port")),
		//TRANSLATORS: Tree widget item
      `item(`id(`serial), _("Serial Port")),
//      `item(`id(`infra), _("Infrared Port (IrDA)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`bluetooth), _("Bluetooth")),
		//TRANSLATORS: Tree widget item
      `item(`id(`scsi), _("SCSI")),
		//TRANSLATORS: Tree widget item
      `item(`id(`hplip), _("HP Devices (HPLIP)"))
     ]),
		//TRANSLATORS: Tree widget item
     `item(`id(`network), _("Access Network Printer or Printserver Box via"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`tcp), _("TCP Port (AppSocket/JetDirect)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`lpd), _("Line Printer Daemon (LPD) Protocol")),
		//TRANSLATORS: Tree widget item
      `item(`id(`ipp), _("Internet Printing Protocol (IPP)"))
     ]),
		//TRANSLATORS: Tree widget item
     `item(`id(`server), _("Print Via Print Server Machine"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`smb), _("Microsoft Windows/SAMBA (SMB/CIFS)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`lpr), _("Traditional UNIX Server (LPR)")),
//      `item(`id(`iprint), _("iPrint (Novell OES)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`cups), _("CUPS Server")),
		//TRANSLATORS: Tree widget item
      `item(`id(`ipx), _("Novell Netware Print Server (IPX)"))
     ]),
		//TRANSLATORS: Tree widget item
     `item(`id(`special), _("Special"), true,
     [
		//TRANSLATORS: Tree widget item
      `item(`id(`uri), _("Specify Arbitrary Device URI")),
		//TRANSLATORS: Tree widget item
      `item(`id(`pipe), _("Send Print Data to Other Program (pipe)")),
		//TRANSLATORS: Tree widget item
      `item(`id(`beh), _("Daisy-chain Backend Error Handler (beh)"))
     ])
    ]
   )
  ),
  `VBox(
	//TRANSLATORS: Connection details widget
   `Frame(_("Connection Settings"),
     `ReplacePoint(`id(`rp), `VBox())
    )
  )
 )
);
			//TRANSLATORS: Connection wizard header
  Wizard::SetContentsButtons( _("Connection Wizard"),
                              contents,
                              HELPS["connection_wizard_dialog"]:"",
                              Label::BackButton(),
                              // Set a different label for the "next" button
                              // (i.e. the lower right button which results `next as UI::UserInput):
                              Label::OKButton()
                            );

boolean validateSettingsDialog(symbol type){
 boolean valid=false;
 connectionURI="";
 switch(type){
  case(`uri):
  case(`ipp):
	connectionURI=(string) UI::QueryWidget(`uri, `Value);
	if (size(connectionURI)>0) valid=true;
		else Popup::Error(_("Couldn't be empty!"));
	break;
  case(`smb):
	map<string, any> smb=$[
		"hostname"	: UI::QueryWidget(`hostname, `Value),
		"printer"	: UI::QueryWidget(`printer, `Value),
		"domain"	: UI::QueryWidget(`domain, `Value),
		"user"		: UI::QueryWidget(`user, `Value),
		"pass"		: UI::QueryWidget(`pass, `Value)
			];
		connectionURI="smb://";
		if (size(smb["hostname"]:"")==0 || size(smb["printer"]:"")==0){
		 Popup::Error(_("Servername and printer couldn't be empty!"));
		} else {
		 if (size(smb["user"]:"")>0 && size(smb["pass"]:"")>0){
		  connectionURI=sformat("%1%2:%3@", connectionURI, smb["user"]:"", smb["pass"]:"");
		 }
		 if(size(smb["domain"]:"")>0) connectionURI=sformat("%1%2/%3/%4", connectionURI, smb["domain"]:"", smb["hostname"]:"", smb["printer"]:"");
			else connectionURI=sformat("%1%2/%3", connectionURI, smb["hostname"]:"", smb["printer"]:"");
		 valid=true;
		}
	break;
  case(`tcp):
	map<string, any> tcp=$[
		"hostname" : UI::QueryWidget(`hostname, `Value),
		"port" : UI::QueryWidget(`port, `Value)
		];
		if (size(tcp["hostname"]:"")>0 && size(tcp["port"]:"")>0){
		 connectionURI=sformat("socket://%1:%2", tcp["hostname"]:"", tcp["port"]:"");
		 valid=true;
		}else{
		 Popup::Error(_("Servername and port couldn't be empty!"));
		}
	break;
  case(`lpr):
  case(`lpd):
	map<string, any> lpd=$[
		"hostname" : UI::QueryWidget(`hostname, `Value),
		"queue" : UI::QueryWidget(`port, `Value)
		];
		if (size(lpd["hostname"]:"")>0 && size(lpd["queue"]:"")>0){
		 connectionURI=sformat("lpd://%1/%2", lpd["hostname"]:"", lpd["queue"]:"");
		 valid=true;
		}else{
		 Popup::Error(_("Servername and queue name couldn't be empty!"));
		}
	break;
  case(`cups):
	map<string, any> cups=$[
		"hostname" : UI::QueryWidget(`hostname, `Value),
		"queue" : UI::QueryWidget(`queue, `Value)
		];
		if (size(cups["hostname"]:"")>0 && size(cups["queue"]:"")>0){
		 connectionURI=sformat("ipp://%1/printers/%2", cups["hostname"]:"", cups["queue"]:"");
		 valid=true;
		}else{
		 Popup::Error(_("Servername and queue name couldn't be empty!"));
		}
	break;
  case(`ipx):
	map<string, any> ipx=$[
		"hostname"	: UI::QueryWidget(`hostname, `Value),
		"printer"	: UI::QueryWidget(`queue, `Value),
		"user"		: UI::QueryWidget(`user, `Value),
		"pass"		: UI::QueryWidget(`pass, `Value)
			];
		y2internal("novell ipx map %1", ipx);
		connectionURI="novell://";
		if (size(ipx["hostname"]:"")==0 || size(ipx["printer"]:"")==0){
		 Popup::Error(_("Servername and printer couldn't be empty!"));
		} else {
		 if (size(ipx["user"]:"")>0 && size(ipx["pass"]:"")>0){
		  connectionURI=sformat("%1%2:%3@", connectionURI, ipx["user"]:"", ipx["pass"]:"");
		 }
		 connectionURI=sformat("%1%2/%3", connectionURI, ipx["hostname"]:"", ipx["printer"]:"");
		 valid=true;
		}
	break;
  case(`beh):
	map<string, any> beh=$[
		"uri"		: UI::QueryWidget(`queue, `Value),
		"dont_disable"	: UI::QueryWidget(`beh_do_not_disable, `Value),
		"attempts"	: UI::QueryWidget(`beh_attempts, `Value),
		"delay"		: UI::QueryWidget(`beh_delay, `Value)
			];
		y2internal("novell ipx map %1", beh);
		if (size(beh["uri"]:"")==0 || size(beh["attempts"]:"")==0 || size(beh["delay"]:"")==0){
		 Popup::Error("Servername and printer couldn't be empty!");
		} else {
		  connectionURI=sformat("beh://%1/%2/%3/%4", (beh["dont_disable"]:false ? "1" : "0"), beh["attempts"]:"0", beh["delay"]:"", beh["uri"]:"0");
		 valid=true;
		}
	break;
  case(`pipe):
	string pipe = (string) UI::QueryWidget(`program, `Value);
	if (size(pipe)>0){
	 connectionURI=sformat("program:/%1", pipe);
	 valid=true;
	}
		else Popup::Error(_("Couldn't be empty!"));
	break;
  default:
	y2warning("Unknown type %1", type);
	break;
 }
 if (!valid) connectionURI="";
 return valid;
}

void scanForServers(symbol selected, boolean all){
list<string> hosts = [];
if (all) hosts = (list<string>)SCR::Read (.net.hostnames);
 else
  switch (selected){
   case (`tcp):
	hosts=(list<string>)SCR::Read (.net.hostnames, 9100);
	break;
   case (`smb):
	hosts=(list<string>)SCR::Read (.net.hostnames.samba);
	break;
   case (`lpr):
   case (`lpd):
	hosts=(list<string>)SCR::Read (.net.hostnames, 515);
	break;
   case (`cups):
   case (`ipp):
            hosts = (list<string>)SCR::Read (.net.hostnames, 631);
/*
            hosts = (list<string>)filter (string h, hosts, ``{
                list queues = (list<string>)SCR::Read (.cups.remote, h);
                return size (queues) > 0;
            });
*/
	break;
   default:
	y2warning("Unknown value: %1", selected);
  }
 UI::ChangeWidget(`hostname, `Items, hosts);
 y2milestone("scanForServers selected:%1", selected);
 y2milestone("hosts %1", hosts);

}

boolean testQueue(symbol selected){
 boolean test=true;
 string host=(string)UI::QueryWidget(`hostname, `Value);
 integer ping_res = (integer) SCR::Execute(.target.bash, sformat("ping -c 1 -w 5 %1", host));
 y2milestone("ping %1 : %2", host, ping_res);
 if(ping_res!=0) {
		 Popup::Error(sformat(_("Host %1 unreachable!"), host));
		 test=false;
		 return false;
		}

 string port=(string)UI::QueryWidget(`port, `Value);
 integer port_test=-1;
 integer port_test_res=-1;
 switch(selected){
  case (`tcp):
	port_test = (integer) SCR::Execute(.target.bash, sformat("netcat -w 5 -z %1 %2 2>&1", host, port));
	y2internal("Test port result : %1", port_test);
	if (port_test!=0){
	 Popup::Error(sformat("%1 %2", _("No connection possible to port"), port));
	 test=false;
	 return false;
	}
	port_test_res = (integer) SCR::Execute(.target.bash, sformat("echo -en \"\\r\" | netcat -w 5 %1 %2 2>&1", host, port));
	y2internal("Test connection accept result : %1", port_test_res);
	if(port_test_res!=0){
	 Popup::Error(sformat("%1 %2 %3 %4 %5", _("Port"),  port,  _("on host"),  host, _("doesn't accepts data")));
	 test=false;
	} else Popup::Message(_("Test OK"));
	break;
  case(`lpd):
  case(`lpr):
	string queue=port;
	port="515";
        port_test = (integer) SCR::Execute(.target.bash, sformat("netcat -w 5 -z %1 %2 2>&1", host, port));
        y2internal("Test port result : %1", port_test);
        if (port_test!=0){
         Popup::Error(sformat("%1 %2", _("No connection possible to port"), port));
         test=false;
         return false;
        }
	map<string, any> available_port=(map<string, any>)SCR::Execute(.target.bash_output, "for I in 721 722 723 724 725 726 727 728 729 730 731; do fuser -n tcp $I &>/dev/null || { echo -n $I ; break ; } done");
	y2milestone("available port %1", available_port);
	map<string, any> test_lpd = (map<string, any>)SCR::Execute(.target.bash_output, sformat("
TMP_IN=$(mktemp -u /tmp/lpd_test.in.XXXXXX)
TMP_OUT=$(mktemp -u /tmp/lpd_test.out.XXXXXX)
mkfifo $TMP_IN
mkfifo $TMP_OUT
netcat -w 1 -p %1 %2 %3 <$TMP_IN >$TMP_OUT 2>/dev/null &
NETCAT_PID=$!
{ sleep 5s ; kill $NETCAT_PID &>/dev/null ; } &

RESULT=''
{ echo -en \"\\002%4\\n\" ; \
  RESULT=$(head --bytes=1 <$TMP_OUT | tr '\\000' '0') ; \
  [ \"$RESULT\" = \"0\" ] && echo -en \"\\001\\n\" ; } >$TMP_IN

rm $TMP_IN
rm $TMP_OUT
exit $RESULT
",available_port["stdout"]:"", host, port, queue
));
	if (test_lpd["exit"]:-1==0) Popup::Message(_("Test OK"));
		else{
		 Popup::Error(test_lpd["stderr"]:"");
		 test=false;
		}
	break;
 }
 return test;
}

boolean storeQueue(symbol selected){
 boolean stored=false;
 y2internal("Storing type %1 : %2", selected, connectionURI);
 Printer::connections=add(Printer::connections, $[
			"uri"	: connectionURI,
			"class"	: "ConnectionWizardDialog"
			]);
 return stored;
}

//UI::OpenDialog(content);
any ret = nil;
while(ret!=`abort && ret!=`back && ret!=`next){
 ret = UI::UserInput();
 symbol selected = (symbol)UI::QueryWidget(`tree_selection, `Value);
 switch( (symbol)ret ){
  case(`tree_selection):
			 changeSettingsDialog( selected );
			 break;
  case(`next):
	  if (validateSettingsDialog( selected )) {
	    y2milestone("Writing settings");
	    storeQueue( selected );
	   } else {
		  y2error("Couldn't validate %1", selected);
		  ret=nil;
	         }
		break;
  case(`cancel):
		return `abort;
		break;
  case(`scan_all):
		scanForServers(selected, true);
		break;
  case(`scan):
		scanForServers(selected, false);
		break;
  case(`test):
		if (validateSettingsDialog(selected)) testQueue(selected);
		break;
  y2internal("ret %1", ret);
 }
}
 return ret;
//UI::CloseDialog();
}
}
