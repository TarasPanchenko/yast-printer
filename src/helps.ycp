/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:        include/printer/helps.ycp
 * Package:     Configuration of printer
 * Summary:     Help texts of all the dialogs
 * Authors:     Johannes Meixner <jsmeix@suse.de>
 *
 * $Id: helps.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "printer";

/**
 * All helps are here
 */
map HELPS =
$[

"read" :
// Read dialog help 1/1:
_("<p>
<b><big>Initializing printer Configuration</big></b><br>
Please wait...<br>
</p>"),

"write" :
// Write dialog help 1/1:
_("<p>
<b><big>Finishing printer Configuration</big></b><br>
Please wait...<br>
</p>"),

"overview" :
// Overview dialog help 1/7:
_("<p>
<b><big>Print Queue Overview</big></b><br>
A printer device is not used directly but via a print queue.<br>
When various application programs submit print jobs simultaneously,
these jobs are put in a queue and are sent one after the other to the printer
device.<br>
It is possible to have several different print queues for the same printer
device.
For example a second queue with a monochrome-only driver for a color device
or a PostScript queue and a queue with a PCL driver for a PostScript+PCL printer.
</p>") +
// Overview dialog help 2/7:
_("<p>
<b><big>Using Remote Queues:</big></b><br>
Remote queues exist on other hosts in the network
and therefore they cannot be changed on this host.<br>
The remote queues which are listed here are known on this host
and usually they can be used directly by application programs
so that there is no need to set up a local queue for a printer
which is already available via a remote queue.<br>
</p>") +
// Overview dialog help 3/7:
_("<p>
<b><big>Configure a printer:</big></b><br>
Press <b>Add</b> to set up a new queue for a printer device.
</p>") +
// Overview dialog help 4/7:
_("<p>
<b><big>Change the settings for a queue:</big></b><br>
Select a local queue and press <b>Edit</b>.
</p>") +
// Overview dialog help 5/7:
_("<p>
<b><big>Remove a queue:</big></b><br>
Select a local queue and press <b>Delete</b>.
</p>") +
// Overview dialog help 6/7:
_("<p>
<b><big>Print a test page:</big></b><br>
Select the queue and press <b>Print Test Page</b>.
</p>") +
// Overview dialog help 7/7:
_("<p>
<b><big>Refresh the list of queues:</big></b><br>
In particular after changes regarding printing via network
the available remote queues may have changed.
Usually it takes some time (up to several minutes)
until such changes become known to the local host
so that it is useful to press <b>Refresh List</b>
after some time to get an up-to-date list
of available remote queues.
</p>"),

"AutoYaSToverview" :
// AutoYaST Overview dialog help 1/1:
_("<p>
<b><big>AutoYaST Print Queue Overview</big></b><br>
AutoYaST supports only settings for printing with CUPS via network.<br>
There is no AutoYaST support to set up local print queues.
</p>"),

"basic_add_dialog" :
// BasicAddDialog help 1/7:
_("<p>
<b><big>Set Up a New Queue for a Printer Device</big></b><br>
A printer device is not used directly but via a print queue.<br>
When various application programs submit print jobs simultaneously,
the jobs queue up and are sent one after the other to the printer device.<br>
It is possible to have several different print queues for the same printer device.
Usually several print queues are needed when several different printer drivers
should be used for the same printer device.
For example a second queue with a monochrome-only driver
to enforce black-only printout on a color device
or a PostScript queue and a queue with a PCL driver for a PostScript+PCL printer
because printing via the PCL driver is usually faster (but with less quality).
</p>") +
// BasicAddDialog help 2/7:
_("<p>
To set up a new queue:<br>
Select the connection of the matching printer device,<br>
find and assign a suitable printer driver, and<br>
set a unique queue name.
</p>") +
// BasicAddDialog help 3/7:
_("<p>
The <b>connection</b> determines which way data is sent to the printer device.<br>
If a wrong connection is selected, no data can be sent to the device
so that there cannot be any printout.<br>
If a printer device is accessible via more than one connection type,
it is shown for each connection type.<br>
In particular HP devices are often accessible both via the 'usb:/...'
and the 'hp:/...' connection.
The latter is provided by the HP driver package 'hplip'.
For plain printing both kind of connections should work but for anything else
(e.g. device status via 'hp-toolbox', or scanning with a HP all-in-one device)
the 'hp:/...' connection must be used.
</p>") +
// BasicAddDialog help 4/7:
_("<p>
The <b>driver</b> determines that the right data is produced for the
specific printer model.<br>
If a wrong driver is assigned, wrong data is sent to the printer
which results bad looking printout, chaotic printout, or no printout at all.<br>
Initially the input field for the driver search string is preset
with the autodetected model name of the currently selected connection
and those drivers where the driver description matches to the model name
are shown by default.<br>
If driver descriptions match to the autodetected model name
and if all matching driver descriptions seem to belong to the same model,
the driver descriptions are sorted so that the most reasonable driver
should be listed topmost and this one is automatically preselected.
If no driver is automatically preselected, you must manually
find and select an appropriate driver.<br>
On the other hand if a driver was automatically preselected,
it does not necessarily mean that this driver is
a reasonable driver for your particular needs.
Strictly speaking an automatically preselected driver
may not work at all for your particular printer model.
The reason is that the automated driver selection
can only work based upon comparison of strings
(the autodetected model name and the driver descriptions)
so that the result can be only a best-guess proposal
how to set up your particular printer model.<br>
Therefore check if the currently preselected values make sense
and feel free to play around and modify the settings
to what you know what works best for your printer.<br>
If no driver description matches to the autodetected model name,
it does not necessarily mean that there is no driver available for the model.
Often only the model name in the driver descriptions
is different from the autodetected model name.
Therefore you can enter whatever you like as driver search string
and search through all available driver descriptions.<br>
Usually the default driver option settings should be reasonable
so that the driver works for your particular printer model.
Some driver option settings must match to your particular printer.
In particular the default paper size setting of the driver
must match to the paper which is actually loaded in your printer.
You can either explicitely select A4 or Letter as default paper size
or select nothing to use the built-in default paper size of the driver
which is also the fallback if the driver neither supports A4 nor Letter
(for example a driver for a small-format photo printer).
If you like to adjust other driver options except A4 or Letter,
you must first set up the queue and then in a second step
you can adjust all driver options in the 'Edit/Modify' dialog.
</p>") +
// BasicAddDialog help 5/7:
_("<p>
Application programs do not show the actual printer device
but its associated <b>queue name</b>.<br>
Only letters (a-z and A-Z), numbers (0-9), and the underscore '_'
are allowed for the queue name and it must start with a letter.
</p>") +
// BasicAddDialog help 6/7:
_("<p>
One of the print queues may be set to be <b>used by default</b>.<br>
Application programs should use such a system default print queue
if no other print queue was specified by the user.
But there is no such thing as the 'one and only' default queue.
Beside a system default queue any user can maintain his own
default queue setting and furthermore any application program
may implement its own particular way of default queue setting
(e.g. the application may remember the previously used queue).<br>
For details see the openSUSE support database
article 'Print Settings with CUPS' at<br>
http://en.opensuse.org/SDB:Print_Settings_with_CUPS
</p>") +
// BasicAddDialog help 7/7:
_("<p>
An alternative way to set up HP devices is to <b>run hp-setup</b>.<br>
HP's own tool 'hp-setup' provides setup support in particular
for HP printers and HP all-in-one devices which require
a proprietary driver plugin to be downloaded from HP and
installed in the right way on a particular end-user's system.
Furthermore 'hp-setup' can provide better setup support
for HP network printers and HP all-in-one network devices
because HP's own tool can implement special handling
for special HP network devices.<br>
For details see the openSUSE support database
article 'How to set-up a HP printer' at<br>
http://en.opensuse.org/SDB:How_to_set-up_a_HP_printer
</p>"),

"basic_modify_dialog" :
// BasicModifyDialog help 1/4:
_("<p>
<b><big>Modify a Print Queue</big></b><br>
To modify a queue, select only what you really want to be changed.<br>
</p>") +
// BasicModifyDialog help 2/4:
_("<p>
The <b>connection</b> determines which way data is sent to the printer device.<br>
If a wrong connection is selected, no data can be sent to the device
so that there cannot be any printout.<br>
If a printer device is accessible via more than one connection type,
it is shown for each connection type.<br>
In particular HP devices are often accessible both via the 'usb:/...'
and the 'hp:/...' connection.
The latter is provided by the HP driver package 'hplip'.
For plain printing both kind of connections should work but for anything else
(e.g. device status via 'hp-toolbox', or scanning with a HP all-in-one device)
the 'hp:/...' connection must be used.<br>
When you exchange the currently used connection by another one,
the input field for the driver search string is preset
with the autodetected model name of the new selected connection
and those drivers where the driver description matches to the model name
are shown by default.<br>
If driver descriptions match to the autodetected model name
and if all matching driver descriptions seem to belong to the same model,
the driver descriptions are sorted so that the most reasonable driver
should be listed topmost (but still below the currently used driver).
On the other hand, it does not necessarily mean that this driver is
a reasonable driver for your particular needs.
Strictly speaking the topmost listed driver
may not work at all for your particular printer model.
The reason is that the automated driver selection
can only work based upon comparison of strings
(the autodetected model name and the driver descriptions)
so that the result can be only a best-guess proposal
how to set up your particular printer model.<br>
Therefore check if the currently preselected values make sense
and feel free to play around and modify the settings
to what you know what works best for your printer.<br>
If no driver description matches to the autodetected model name,
it does not necessarily mean that there is no driver available for the model.
Often only the model name in the driver descriptions
is different from the autodetected model name.
Therefore you can enter whatever you like as driver search string
and search through all available driver descriptions.
</p>") +
// BasicModifyDialog help 3/4:
_("<p>
The <b>driver</b> determines that the right data is produced for the
specific printer model.<br>
If a wrong driver is assigned, wrong data is sent to the printer
which results bad looking printout, chaotic printout, or no printout at all.<br>
You can either select another driver and modify its driver option settings later
or keep the currently used driver and modify its driver option settings now.<br>
Some driver option settings must match to your particular printer.
For example the default paper size setting of the driver
must match to the paper which is actually loaded in your printer.<br>
For other driver option settings you can choose what you like.
For example any choice of the available printing resolutions
should work for the particular driver.
Nevertheless it may happen that your particular printer fails to print
with high resolution. For example when you have a laser printer
which has insufficient built-in memory to process high resolution pages.<br>
When you exchange the currently used driver by another one,
you must first apply this change to the print queue
so that the new driver is used for the queue
(i.e. you must finish this dialog as a first step)
and then in a second step you can adjust all driver options
by using this dialog again.<br>
Initially the input field for the driver search string is preset
with the description of the currently used driver when the connection was not changed.
This results usually only one single driver which matches
so that you would have to enter a less specific driver search string
to get also other drivers or you use the 'Find More' button.
If no driver matches, it does not mean that there is no driver available.
Therefore you can enter whatever you like as driver search string
and search through all available driver descriptions.
</p>") +
// BasicModifyDialog help 4/4:
_("<p>
In contrast to connection and driver where you must select the right one,
you are free to enter arbitrary strings for <b>description</b> and <b>location</b>.
Application programs often show description and location in the print dialog.
To make sure that those strings look correct in any language
which a particular user of a particular application program may use,
it is safe when you use only plain ASCII text without
special characters e.g. only ASCII letters (a-z and A-Z),
ASCII numbers (0-9), and the ASCII space character (20 hex).
Usually the description describes the model and optionally the driver
(e.g. 'ACME FunPrinter 1000 using generic PCL driver')
and the location describes where the printer is located
(e.g. 'Room 123' or 'Front Desk').
</p>"),

"driver_options_dialog" :
// DriverOptionsDialog help 1/3:
_("<p>
<b><big>Set Driver Options</big></b><br>
Usually it is best to leave the driver defaults because
the defaults should be reasonable for usual printing.<br>
Additionally the print dialogs in usual application programs
show the driver options too so that each user can specify
driver options for each individual printout.<br>
The only setting which should be checked in any case is the paper size
which must be set to what is actually used by default in the printer.
</p>") +
// DriverOptionsDialog help 2/3:
_("<p>
Non-default settings may not work in any case or have unexpected consequences.<br>
For example a high resolution setting may not work for a laser printer
when its default built-in memory is insufficient to process high resolution pages.<br>
Or a high quality setting may print intolerable slow on an inkjet printer.
</p>") +
// DriverOptionsDialog help 3/3:
_("<p>
On the other hand in certain cases printer-specific driver settings
must be adjusted to get the full functionality of a printer.<br>
In particular when the printer has optional units installed like
duplex unit or optional paper feeders, the matching driver settings
should be checked and adjusted.<br>
For example a duplex unit option must be set to 'installed' or 'true'
otherwise the driver may ignore duplex printing option settings.
</p>"),

"add_driver_dialog" :
// AddDriverDialog help 1/2:
_("<p>
<b><big>Add or Remove Printer Driver Packages</big></b><br>
When a printer driver package is not marked, it is not installed
and then you can select it so that it will be installed.<br>
When a printer driver package is marked, it is installed
and then you can un-select it so that it will be removed.
In the latter case it is up to you to make sure
that there is no printer configuration which needs the driver.<br>
</p>") +
// AddDriverDialog help 2/2:
_("<p>
<b><big>Add a Printer Description File</big></b><br>
To set up a printer configuration a printer description file
(PPD file) is required.<br>
When a PPD file is not located in the /usr/share/cups/model/ directory,
it is not available to set up a printer configuration with it.
Therefore you can specify the full path of a PPD file
which is located elsewhere on your system to get it installed
in the /usr/share/cups/model/ directory.<br>
Note that a printer description file is not a driver.<br>
For non-PostScript printers the PPD file alone is
not sufficient to set up a working printer configuration.
In particular it does not work for non-PostScript printers
to download a PPD file from the Internet and then set up
the printer with such a PPD file.
The plain printer setup would work but actual printing
would not work because the driver is missing.
For non-PostScript printers you need a printer driver
and a PPD file which matches exactly to the particular driver.
Matching PPD files are automatically installed at the right place
when you install the above mentioned printer driver packages.<br>
Only for PostScript printers, a PPD file alone is usually
sufficient to set up a working PostScript printer configuration.
In particular it is sufficient when the PPD file does not
contain a 'cupsFilter' entry because such an entry would
reference a printer driver.<br>
</p>"),

"connection_wizard_dialog" :
// ConnectionWizardDialog help 1/7:
_("<p>
<b><big>Specify the Connection</big></b><br>
The <b>connection</b> determines which way data is sent to the printer device.<br>
If a wrong connection is used, no data can be sent to the device
so that there cannot be any printout.
</p>") +
// ConnectionWizardDialog help 2/7:
_("<p>
<b><big>Printer Device URI</big></b><br>
A connection is specified as so called <b>device URI</b>.<br>
Its first word (the so called URI scheme) specifies the kind of data-transfer,
for example 'parallel', 'usb', 'socket', 'lpd', or 'ipp'.<br>
After the scheme there are more or less additional components
which specify the details for this kind of data-transfer.<br>
Space characters are not allowed in an URI.
Therefore a space character in a value of an URI component
is encoded as '%20' (20 is the hexadecimal value of the space character).<br>
The components of an URI are separated by special reserved characters like
colon ':', slash '/', question mark '?', ampersand '&amp;', or equals sign '='.<br>
Finally there could be optional parameters (separated by a question mark '?')
of the form 'option1=value1&amp;option2=value2&amp;option3=value3' so that
a full device URI could be for example:<br>
ipp://server.domain:631/printers/queuename?waitjob=false&amp;waitprinter=false<br>
Some examples:<br>
A USB printer model 'Fun Printer 1000+' made by 'ACME'
with serial number 'A1B2C3' may have a device URI like:<br>
usb://ACME/Fun%20Printer%201000%2B?serial=A1B2C3<br>
A network printer with IP 192.168.100.1 which is accessible
via port 9100 may have a device URI like:<br>
socket://192.168.100.1:9100<br>
A network printer with IP 192.168.100.2 which is accessible
via LPD protocol with a remote LPD queue name 'LPT1'
may have a device URI like:<br>
lpd://192.168.100.2/LPT1
</p>") +
// ConnectionWizardDialog help 3/7:
_("<p>
<b><big>Percent Encoding</big></b><br>
The issue is complicated.
It is recommended to avoid reserved characters and spaces
for component values in URIs if the values are under your control
(e.g. you cannot avoid it when you must specify such characters
in values for an URI to access a remote print queue
but the remote print queue is not under your control).
Whenever possible use only so called 'unreserved characters'.
Unreserved characters are uppercase and lowercase letters,
decimal digits, hyphen, period, underscore, and tilde.
Even hyphen, period, tilde, and case sensitivity
could cause special issues in special cases
(e.g. only letters, digits, and underscore are known to work
for a CUPS print queue name and case is not significant there).
Therefore it is best to use only lowercase letters, digits,
and underscore for all values in all URIs if possible.<br>
Reserved characters and space characters in the value of a component
must be percent-encoded (also known as URL encoding).<br>
When an input field in the dialog is intended to enter
only a single value for a single component of the URI
(e.g. separated input fields for username and password),
you must enter spaces and reserved characters literally
(i.e. non-percent-encoded).
For such input fields all spaces and reserved characters
will be automatically percent-encoded.
For example if a password is actually 'Foo%20Bar' (non-percent-encoded),
it must be entered literally in the password input field in the dialog.
The automated percent-encoding results 'Foo%2520Bar' which is how
the vaule of the password component is actually stored in the URI.<br>
In contrast when an input field in the dialog is intended to enter
more that a single value for a single component of the URI
(e.g. a single input field for all optional parameters
like 'option1=value1&amp;option2=value2&amp;option3=value3'
or a single input field to enter the whole URI),
you must enter spaces and reserved characters percent-encoded
because an automated percent-encoding is no longer possible.
Assume in an optional parameter 'option=value'
the value would be 'this&amp;that' so that the whole
optional parameter would be 'option=this&amp;that' (literally).
But a literal '&amp;' character denotes
the separation of different optional parameters
so that 'option=this&amp;that' in an URI means
a first optional parameter 'option=this' and
a second optional parameter which is only 'that'.
Therefore a single optional parameter 'option=this&amp;that'
must be entered percent-encoded as 'option=this%26that'<br>
Input fields which require percent-encoded input
are denoted by a '[percent-encoded]' hint.<br>
Listing of characters and their percent encoding:<br>
space ' ' is percent encoded as %20<br>
exclamation mark ! is percent encoded as %21<br>
number sign # is percent encoded as %23<br>
Dollar sign $ is percent encoded as %24<br>
percentage % is percent encoded as %25<br>
ampersand &amp; is percent encoded as %26<br>
apostrophe / single quotation mark ' is percent encoded as %27<br>
left parenthesis ( is percent encoded as %28<br>
right parenthesis ) is percent encoded as %29<br>
asterisk * is percent encoded as %2A<br>
plus sign + is percent encoded as %2B<br>
comma , is percent encoded as %2C<br>
slash / is percent encoded as %2F<br>
colon : is percent encoded as %3A<br>
semicolon ; is percent encoded as %3B<br>
equals sign = is percent encoded as %3D<br>
question mark ? is percent encoded as %3F<br>
at sign @ is percent encoded as %40<br>
left bracket [ is percent encoded as %5B<br>
right bracket ] is percent encoded as %5D<br>
For details see 'Uniform Resource Identifier (URI): Generic Syntax' at<br>
http://tools.ietf.org/html/rfc3986
</p>") +
// ConnectionWizardDialog help 4/7:
_("<p>
<b><big>Device URIs for Directly Connected Devices</big></b><br>
Devices which are connected via the parallel port or via USB
are autodetected and the appropriate device URI is autogenerated.
For example:<br>
parallel:/dev/lp0<br>
usb://ACME/Fun%20Printer?serial=A1B2C3<br>
hp:/usb/HP_LaserJet?serial=1234<br>
Usually only the autogenerated device URIs work.
When the device is not autodetected, there is usually no communication
with the device possible and no data can be sent to the device.<br>
To access a HP printer or all-in-one device via the backend 'hp',
the RPM package hplip must be installed.
The package provides HP's printing and scanning software HPLIP.<br>
In contrast devices which are connected via serial port or bluetooth
are not autodetected so that the device URI must be manually specified.
The serial device URI parameters must comply with
what the serial port in the printer requires,
see the manual of your serial printer.
Example device URIs:<br>
serial:/dev/ttyS9?baud=9600+bits=8+parity=none+flow=soft+stop=1<br>
bluetooth://1A2B3C4D5E6F<br>
To access a device via bluetooth, the RPM package bluez-cups must be installed.
The package provides the CUPS backend 'bluetooth' which actually sends the data
to a bluetooth printer.
</p>") +
// ConnectionWizardDialog help 5/7:
_("<p>
<b><big>Device URIs to Access a Network Printer or a Printserver Box</big></b><br>
A printserver box is a small device with a network connection
and a USB or parallel port connection to connect the actual printer.
A network printer has such kind of device built-in.
Access happens via three different network protocols.
See the manual of your network printer or printserver box
what your particular device supports:<br>
<b>TCP Port (AppSocket/JetDirect)</b><br>
The IP address and a port number is needed to access it.
Often the port number 9100 is the right one.
It is the simplest, fastest, and generally the most reliable protocol.
The matching device URI is:<br>
socket://ip-address:port-number<br>
<b>Line Printer Daemon (LPD) Protocol</b><br>
A LPD runs on the device and provides one or more LPD queues.
The IP address and a LPD queue name is needed to access it.
Almost all network printers and printserver boxes support it.
Often an arbitrary queue name or 'LPT1' works somehow.
But using a correct LPD queue which does not somehow change
the data or add additional formfeeds or banner pages
could be essential for reliable printing.
The matching device URI is:<br>
lpd://ip-address/queue<br>
<b>Internet Printing Protocol (IPP)</b><br>
IPP is the native protocol for CUPS which runs on a real computer
but when IPP is implemented in a small printserver box,
it is often not implemented properly. Only use IPP when the vendor
actually documents official support for it.
The matching device URI is:<br>
ipp://ip-address:port-number/resource<br>
What 'port-number' and 'resource' exactly is depends totally
on the particular network printer or printserver box model.<br>
For <b>more information</b> have a look at<br>
http://www.cups.org/documentation.php/network.html
</p>") +
// ConnectionWizardDialog help 6/7:
_("<p>
<b><big>Device URIs to Print Via a Print Server Machine</big></b><br>
In contrast to a printserver box a print server machine
means a real computer which offers a print service.<br>
Access happens via various different network protocols.
Ask your network administrator what which print server machine
provides in your particular network:<br>
<b>Windows (R) or Samba (SMB/CIFS)</b><br>
To access a SMB printer share, the RPM package samba-client must be installed.
The package provides the CUPS backend 'smb' which is a link to
the <tt>/usr/bin/smbspool</tt> program which actually sends the data
to a SMB printer share.<br>
A server name and a printer share name and optionally a workgroup name
is needed to access it.
Furthermore a user name and a password may be required to get access.
Have in mind that spaces and special characters in those values
must be percent-encoded (see above).<br>
By default CUPS runs backends (here smbspool) as user 'lp'.
When printing in an Active Directory (R) environment (AD)
the user 'lp' is not allowed to print in this environment
so that the traditional way to print via smbspool as user 'lp'
would not work.<br>
For printing in an AD environment additionally
the RPM package samba-krb-printing must be installed.
In this case the CUPS backend 'smb' link
is changed to <tt>/usr/bin/get_printing_ticket</tt>
which is a wrapper to run smbspool as the original user
who submitted a particular print job.
When the Kerberos protocol is used for authentication
in an AD environment, a user gets a ticket granting ticket (TGT)
via the display manager during login at the Gnome or KDE desktop.
When smbspool is run as the original user who submitted
a particular print job, it can access the TGT of this user
and use it to pass the printing data to the SMB printer share
even in an AD environment with Kerberos authentication.
In this case neither a fixed user name nor a fixed password
has to be specified for authentication.
A precondition is that get_printing_ticket runs on the same host
where the user who submitted a particular print job is logged in.
This means that it must be set up on the workstation
for the particular user who will submit such print jobs
and the user's workstation must send its printing data
directly to the SMB printer share in the AD environment.
In particular it does not work on a separated CUPS server machine
where users who submit print jobs are not logged in.<br>
For the traditional way a matching full device URI is:<br>
smb://username:password@workgroup/server/printer<br>
For example 'John Doe' with password '@home!' may use something like
the following device URI to access a 'Fun Printer 1000+' share:<br>
smb://John%20Doe:%40home%21@MYGROUP/homeserver/Fun%20Printer%201000%2B<br>
For <b>more information</b> have a look at <tt>man smbspool</tt> and<br>
http://en.opensuse.org/SDB:Printing_via_SMB_(Samba)_Share_or_Windows_Share<br>
<b>Traditional UNIX Server (LPR)</b><br>
A Line Printer Daemon (LPD) runs on a traditional UNIX server
and provides one or more LPD queues.
The IP address and a LPD queue name is needed to access it.
The matching device URI is:<br>
lpd://ip-address/queue<br>
<b>CUPS Server</b><br>
Usually you should not set up a local print queue to access
a remote queue on a CUPS server. Instead do the setup
in the <b>Print Via Network</b> dialog.
Only if you really know that you must set up a local print queue
to access a remote queue on a CUPS server proceed here.<br>
IPP is the native protocol for CUPS which runs on a server.
The official IANA port for IPP is 631.
The matching device URI is:<br>
ipp://ip-address:631/printers/queue<br>
<b>Novell Netware Print Server (IPX)</b><br>
To access print queues on a Novell Netware print server,
the RPM package ncpfs must be installed.
The package provides the CUPS backend 'novell' which runs
the <tt>nprint</tt> program which actually sends the data
to a Novell Netware print queue.
A server name and a printer queue name is needed to access it.
Furthermore a user name and a password may be required to get access.
The matching device URI is:<br>
novell://username:password@server/queue<br>
For <b>more information</b> have a look at <tt>man nprint</tt> and
the other documentation in the RPM package ncpfs.
</p>") +
// ConnectionWizardDialog help 7/7:
_("<p>
<b><big>Special Device URIs</big></b><br>
<b>Specify an Arbitrary Device URI</b>
if you know the exact right device URI for your particular case
or to modify an existing device URI in a special way.<br>
<b>Send Print Data to Other Program (pipe)</b><br>
To do this, the RPM package cups-backends must be installed.
The package provides the CUPS backend 'pipe' which runs
the program that you specified here.
The matching device URI is:<br>
pipe:/path/to/targetcommand<br>
<b>Daisy-chain Backend Error Handler (beh)</b><br>
To do this, the RPM package foomatic-filters must be installed.
The package provides the CUPS backend 'beh'.<br>
The backend 'beh' is a wrapper for the usual backend,
which is then called by beh.
This way beh can, depending on its configuration,
repeat the call of the backend or simply hide the error status
of the backend from being seen by the CUPS daemon.
The matching device URI is:<br>
beh:/nodisable/attempts/delay/originalDeviceURI<br>
If nodisable is '1' beh always exits successfully
so that the queue gets never disabled but on the other hand
print jobs are lost if there is an error.<br>
Attempts is the number of attempts to recall the backend
in case of an error. '0' means infinite retries.<br>
Delay is the number of seconds between two attempts
to call the backend.<br>
The last parameter is the original URI, which the queue had before.<br>
Example:<br>
beh:/1/3/5/socket://ip-address:port-number<br>
The beh backend tries to access a network printer 3 times with 5 second delay
between the attempts. If access still fails, the queue is not disabled
and the print job is lost.<br>
For <b>more information</b> have a look at <tt>/usr/lib[64]/cups/backend/beh</tt> and<br>
http://www.linuxfoundation.org/en/OpenPrinting/Database/BackendErrorHandler
</p>"),

"printing_via_network_dialog" :
// PrintingViaNetworkDialog help 1/4:
_("<p>
<b><big>Printing Via Network</big></b><br>
Usually CUPS (Common Unix Printing System) is used to print via network.<br>
By default CUPS uses its so called 'Browsing' mode
to make printers available via network.<br>
In this case remote CUPS servers must publish their printers via network
and accordingly on your host the CUPS daemon process (cupsd) must run
which is listening for incomming information about published printers.<br>
CUPS Browsing information is recieved via UDP port 631.<br>
Regarding firewall:<br>
Check if a firewall is active for a network zone
in which printers are published via network.
By default the SuSEfirewall allows any incomming information
via a network interface which belongs to the 'internal zone'
because this zone is trusted by default.<br>
It does not make sense to do printing in a trusted internal network
with a network interface which belongs to the untrusted 'external zone'
(the latter is the default setting for network interfaces to be safe).
In particular do not disable firewall protection for CUPS
(i.e. for IPP which uses TCP port 631 and UDP port 631)
for the untrusted 'external zone'.<br>
To use remote printers in a trusted internal network
and be protected by the firewall against unwanted access
from any external network (in particular from the Internet),
assign the network interface which belongs to the internal network
to the internal zone of the firewall.
Use the YaST Firewall setup module to do this fundamental setup
to gain security plus usefulness in your network
and using remote printers in a trusted internal network
will work without any further firewall setup.<br>
For details see the openSUSE support database
article 'CUPS and SANE Firewall settings' at<br>
http://en.opensuse.org/SDB:CUPS_and_SANE_Firewall_settings
</p>") +
// PrintingViaNetworkDialog help 2/4:
_("<p>
If you can access remote CUPS servers for printing
but those servers do not publish their printer information via network
or when you cannot accept incomming information about published printers
(e.g. because you must have firewall protection for the network zone
in which printers are published), you can request printer information
from CUPS servers (provided the CUPS servers allow your access).<br>
For each CUPS server which is requested, a cups-polld process
is launched by the CUPS daemon process (cupsd) on your host.
By default each cups-polld polls a remote CUPS server
every 30 seconds for printer information.
</p>") +
// PrintingViaNetworkDialog help 3/4:
_("<p>
If you print only via network and if you use only one single CUPS server,
there is no need to use CUPS Browsing and have a CUPS daemon running on your host.
Instead it is simpler to specify the CUPS server and access it directly.<br>
A possible drawback is that application programs may be delayed
for some time (until a timeout happens) when they try
to access the CUPS server but it is actually not available
(e.g. while traveling with a laptop). Usually it is a host name
resolution (DNS) timeout which causes the delay so that it may help
to have a hardcoded entry for the CUPS server in the /etc/hosts file.
</p>") +
// PrintingViaNetworkDialog help 4/4:
_("<p>
You have to set up an appropriate print queue on your host
if there is no CUPS server in your network,
or when you must access a network printer directly,
or when you use another kind of print server
e.g. when printing via a Windows (R) or Samba server
or when printing via a traditional Unix server.
</p>"),

"sharing_dialog" :
// SharingDialog help 1/3:
_("<p>
<b><big>Sharing Print Queues and Publish Them Via Network</big></b><br>
Usually CUPS (Common Unix Printing System) should be set up to use
its so called 'Browsing' mode to make printers available via network.<br>
In this case CUPS servers publish their local print queues via network
and accordingly on CUPS client systems the CUPS daemon process (cupsd) must run
which is listening for incomming information about published printers.<br>
CUPS Browsing information is recieved via UDP port 631.
</p>") +
// SharingDialog help 2/3:
_("<p>
First of all CUPS client systems must be allowed to access the CUPS server.
Then specify whether or not printers should be published to the clients.
It is not required to publish printers in any case.
If you have only one single CUPS server, there is no need to use CUPS Browsing.
Instead it is simpler to specify the CUPS server on the client systems
(via 'Printing Via Network') so that the clients access the server directly.
</p>") +
// SharingDialog help 3/3:
_("<p>
Regarding firewall:<br>
A firewall is used to protect running server processes
(in this case the CUPS server process 'cupsd')
on your host against unwanted access via network.<br>
Printing via network happens in a trusted internal network
(nobody lets arbitrary users from whatever external network
print on his printer) and usually the users need
physical printer access to get their paper output.<br>
By default the SuSEfirewall lets any network traffic pass
via a network interface which belongs to the 'internal zone'
because this zone is trusted by default.<br>
It does not make sense to do printing in a trusted internal network
with a network interface which belongs to the untrusted 'external zone'
(the latter is the default setting for network interfaces to be safe).
Do not disable firewall protection for CUPS
(i.e. for IPP which uses TCP port 631 and UDP port 631)
for the untrusted 'external zone'.<br>
To make printers accessible in a trusted internal network
and be protected by the firewall against unwanted access
from any external network (in particular from the Internet),
assign the network interface which belongs to the internal network
to the internal zone of the firewall.
Use the YaST Firewall setup module to do this fundamental setup
to gain security plus usefulness in your network and
sharing printers in a trusted internal network
will work without any further firewall setup.<br>
For details see the openSUSE support database
article 'CUPS and SANE Firewall settings' at<br>
http://en.opensuse.org/SDB:CUPS_and_SANE_Firewall_settings
</p>"),

"policies" :
// Policies help 1/2:
_("<p>
<b><big>CUPS Operation Policy</big></b><br>
Operation policies are the rules used for each operation in CUPS.
Such operations are for example 'print something', 'cancel a printout',
'configure a printer', 'modify or remove a printer configuration',
and 'enable or disable printing'.
</p>") +
// Policies help 2/2:
_("<p>
<b><big>CUPS Error Policy</big></b><br>
The error policy defines the default policy that is used when
CUPS fails to send a print job to the printer device.<br>
Depending on the particular way how the printer is connected
(for example 'parallel', 'usb', 'socket', 'lpd', or 'ipp'),
and depending on the actual kind of failure,
the CUPS backend which actually sends the data to the printer
can overwrite the default error policy
and enforce another error policy (see <tt>man backend</tt>).
For example it can stop any further printing attempt
even when the default error policy is to retry the job.
This could happen when any attempt to establish
the communication with the printer is useless
so that it does no make sense to retry the job.
<br>
The following error policies exist:<br>
Stop the printer and keep the job for future printing.<br>
Re-send the job from the beginning after waiting some time (30 seconds by default).<br>
Abort and delete the job and proceed with the next job.
</p>"),

"autoconfig" :
// Autoconfig help 1/3:
_("<p>
<b><big>CUPS Autoconfiguration for USB Printers</big></b><br>
Autoconfiguration is provided by two RPM packages:<br>
The new 'udev-configure-printer' since openSUSE 11.2 and
the meanwhile deprecated 'cups-autoconfig' because the latter
uses HAL which is deprecated.<br>
When the autoconfiguration dialog is launched, it checks
if udev-configure-printer or cups-autoconfig is installed.
If none of them is installed, it tries to install one of them
where udev-configure-printer is preferred
but if it fails to install udev-configure-printer,
it tries to install cups-autoconfig.<br>
If none of them is finally installed, the dialog is useless
and all its elements become disabled.
</p>") +
// Autoconfig help 2/3:
_("<p>
When udev-configure-printer is used,
automatic USB printer setup happens via the entries
in its udev config file /etc/udev/rules.d/70-printers.rules
which triggers to run 'udev-configure-printer add'
when a USB printer is plugged in
and 'udev-configure-printer remove' when it is unplugged.
There are no settings when udev-configure-printer is used
except one changes the 70-printers.rules file manually.
</p>") +
// Autoconfig help 3/3:
_("<p>
When cups-autoconfig is used,
automatic USB printer setup happens via the entries
in its HAL config file 10-cups-autoconfig.fdi
which triggers to run 'hal-cups-autoconfig --add'
when a USB printer is plugged in.
It determines if the printer is already configured.
If it is already configured, printing will be enabled.
If the printer is not configured, cups-autoconfig attempts
to select an appropriate driver for it and, if successful,
cups-autoconfig configures it.
When a USB printer is unplugged, 'hal-cups-autoconfig --disable'
is run which can disable printing depending on the
settings for cups-autoconfig which are stored in its
/etc/cups-autoconfig.conf file.
</p>")

];

/* EOF */
}
