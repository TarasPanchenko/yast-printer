/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	clients/printer_auto.ycp
 * Package:	Configuration of printer
 * Summary:	Client for autoinstallation
 * Authors:	Michal Zugec <mzugec@suse.cz>
 *              Johannes Meixner <jsmeix@suse.de>
 *
 * $Id: printer_auto.ycp 27914 2006-02-13 14:32:08Z locilka $
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param function to execute
 * @param map/list of printer settings
 * @return map edited settings, Summary or boolean on success depending on called function
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallFunction ("printer_auto", [ "Summary", mm ]);
 */

{

textdomain "printer";

y2milestone("----------------------------------------");
y2milestone("Printer auto started");

import "Printer";
import "Printerlib";
include "printer/wizards.ycp";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map) WFM::Args(1);
}
//y2debug("func=%1", func);
//y2debug("param=%1", param);
y2milestone("Printer auto func='%1'", func);
y2milestone("Printer auto param='%1'", param);

/* Create a summary string */
if (func == "Summary")
{ ret = _("AutoYaST printer client settings.");
}
/* Reset configuration to empty system config files */
else if (func == "Reset")
{ // The empty map results empty /etc/cups/client.conf and /etc/cups/cupsd.conf files:
  Printer::Import($[]);
  ret = $[];
}
/* Called appropriately by the AutoYaST framework */
else if (func == "SetModified")
{ Printer::printer_auto_modified = true;
  ret = true;
}
/* Provide to AutoYaST what it did set before (or the default "false") */
else if (func == "GetModified")
{ ret = Printer::printer_auto_modified;
}
/* Change configuration (run the wizards AutoSequence dialogs) */
else if (func == "Change")
{ // Even if cups_client is not installed, the MainSequence dialogs
  // which are called via PrinterAutoSequence in wizards.ycp
  // (starting as usual with the Overview dialog)
  // should at least show an endless sequence of errors to the user.
  ret = PrinterAutoSequence();
}
/* Import printer configuration and Write it to the system config files */
else if (func == "Import")
{ ret = Printer::Import(param);
}
/* Read printer configuration from the system config files and return it as a map */
else if (func == "Export")
{ ret = Printer::Export();
}
/*
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure it has all needed software installed.
 * @return map with 2 lists of strings $["install":[],"remove":[]]
 */
else if (func == "Packages")
{ list< string > to_be_installed_packages = [];
  if( Printerlib::TestAndInstallPackage( "cups-client", "installed" ) )
  { to_be_installed_packages = add( to_be_installed_packages, "cups-client" );
  }
  if( Printerlib::TestAndInstallPackage( "cups", "installed" ) )
  { to_be_installed_packages = add( to_be_installed_packages, "cups" );
  }
  ret = $[ "install":to_be_installed_packages, "remove":[] ];
}
/* Dummy to provide a Read function for the AutoYaST framework */
else if (func == "Read")
{ // Do not call Printer::Read() here to
  // avoid that the hardware proposal asks the user
  // to install the packages cups-client and cups, see
  // https://bugzilla.novell.com/show_bug.cgi?id=445719#c13
  //import "Progress";
  //boolean progress_orig = Progress::set (false);
  //ret = Printer::Read();
  //Progress::set (progress_orig);
  y2milestone("Not calling Printer::Read() to avoid that printer_auto asks to install cups-client and cups.");
  ret = true;
}
/* Dummy to provide a Write function for the AutoYaST framework */
else if (func == "Write")
{ // There is no need to call Printer::Write() here because
  // it does actually nothing except to exit verbosely, see
  // http://en.opensuse.org/YaST/Development/Printer_Enhancement#Basic_Implementation_Principles:
  // for background information.
  //import "Progress";
  //boolean progress_orig = Progress::set (false);
  //Printer::write_only = true;
  //ret = Printer::Write();
  //Progress::set (progress_orig);
  y2milestone("No need to call Printer::Write() in printer_auto because it does nothing.");
  ret = true;
}
/* Unknown function */
else {
    y2error("Unknown function: %1", func);
    ret = false;
}

//y2debug("ret=%1", ret);
y2milestone("Printer auto ret='%1'", ret);
y2milestone("Printer auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
