/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:        include/printer/dialogs.ycp
 * Package:     Configuration of printer
 * Summary:     Autoconfig settings dialog definition
 * Authors:     Johannes Meixner <jsmeix@suse.de>
 *
 * $Id: autoconfig.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "printer";

import "Printerlib";
import "Popup";

include "printer/helps.ycp";

boolean autoconfig_settings_dialog_is_useless = false;
// By default the ConfigureNewPrinters value in /etc/cups-autoconfig.conf is set to "yes":
boolean initial_cups_autoconfig_ConfigureNewPrinters = true;
// By default the DisablePrintersOnRemoval value in /etc/cups-autoconfig.conf is set to "no":
boolean initial_cups_autoconfig_DisablePrintersOnRemoval = false;
// By default the DefaultCUPSPolicy value in /etc/cups-autoconfig.conf is set to the empty string:
string initial_cups_autoconfig_DefaultCUPSPolicy = "";

term widgetAutoconfig = `VBox
                        ( `Left
                          ( `Label
                            ( `id("cups_autoconfig_label"),
                              // Header for a dialog section where the user can
                              // specify in which way USB printers are configured automatically:
                              _("Specify in which way USB printers are configured automatically")
                            )
                          ),
                          // Have space between the header and the choices:
                          `VSpacing( 1 ),
                          `HBox
                          ( `HSpacing( 3 ),
                            `VBox
                            ( `Left
                              ( `CheckBox
                                ( // Use a CheckBox to remove the cups-autoconfig RPM package
                                  // instead of a RadioButton because this is the only RadioButton
                                  // because there is no RadioButton to install cups-autoconfig
                                  // because initAutoconfig checks if cups-autoconfig is installed
                                  // and if not it tries to install it.
                                  `id("cups_autoconfig_remove"),
                                  `opt(`notify),
                                  // CheckBox to have no automatic configuration of USB printers at all
                                  // by removing the cups-autoconfig RPM package.
                                  // Do not change or translate "cups-autoconfig", it is a RPM package name.
                                  _("No Automatic Configuration at all: &Remove the cups-autoconfig package.")
                                )
                              ),
                              // Have space between the choice "No Automatic Configuration at all"
                              // and the settings when automatic configuration is used:
                              `VSpacing( 1 ),
                              `Left
                              ( `CheckBox
                                ( `id("cups_autoconfig_configure_new_attached"),
                                  `opt(`notify),
                                  // CheckBox to enable that a print queue is automatically created
                                  // when a USB printer is connected for the first time to the USB:
                                  _("Enable &Automatic Configuration of New Attachend USB Printers")
                                )
                              ),
                              `Left
                              ( `CheckBox
                                ( `id("cups_autoconfig_disable_on_removal"),
                                  // CheckBox to disable the print queue
                                  // when a USB printer is disconnected from the USB:
                                  _("&Disable Printout when Disconnecting an USB Printer")
                                )
                              ),
                              `Left
                              ( `ComboBox
                                ( `id("cups_autoconfig_operation_policy"),
                                  // Header for a ComboBox to specify the CUPS operation policy
                                  // for print queues which are automatically created
                                  // when a USB printer is connected for the first time to the USB:
                                  _("Operation &Policy for Automatically Configured USB Printers"),
                                  [""]
                                )
                              ),
                              // Have space between the settings for automatic configuration
                              // and the choice to "Trigger Automatic Configuration":
                              `VSpacing( 1 ),
                              `Left
                              ( `CheckBox
                                ( `id("cups_autoconfig_trigger"),
                                  `opt(`notify),
                                  // CheckBox to trigger that print queues are automatically created right now:
                                  _("&Trigger Automatic Configuration")
                                )
                              )
                            )
                          )
                        );

void initAutoconfig( string key )
{ y2milestone( "entering initAutoconfig with key '%1'", key );
  boolean autoconfig_settings_dialog_is_useless = false;
  // The whole Autoconfig Settings dialog is useless if it is a "client-only" config.
  // Determine whether or not it is currently a real client-only config
  // (i.e. a ServerName != "localhost/127.0.0.1" in /etc/cups/client.conf)
  // and ignore when it fails (i.e. use the fallback value silently):
  Printerlib::DetermineClientOnly();
  if( Printerlib::client_only )
  { if( ! Popup::YesNoHeadline( sformat( // PopupYesNoHeadline headline
                                         // where %1 will be replaced by the server name:
                                         _("Disable remote CUPS server '%1'"),
                                         Printerlib::client_conf_server_name
                                       ),
                                // PopupYesNoHeadline body:
                                _("A remote CUPS server setting conflicts with automatic configuration of printers for the local system.")
                              )
      )
    { autoconfig_settings_dialog_is_useless = true;
      y2milestone( "autoconfig_settings_dialog_is_useless because user decided not to disable client-only CUPS server '%1'",
                   Printerlib::client_conf_server_name
                 );
    }
    else
    { // Remove the 'ServerName' entry in /etc/cups/client.conf:
      if( ! Printerlib::ExecuteBashCommand( Printerlib::yast_bin_dir + "cups_client_only none" ) )
      { Popup::ErrorDetails( // Popup::ErrorDetails message:
                             _("Failed to remove the 'ServerName' entry in /etc/cups/client.conf"),
                             Printerlib::result["stderr"]:"" + "\n" + Printerlib::result["stdout"]:""
                           );
        autoconfig_settings_dialog_is_useless = true;
        y2milestone( "putoconfig_settings_dialog_is_useless because it failed to disable client-only CUPS server '%1'",
                     Printerlib::client_conf_server_name
                   );
      }
    }
  }
  // When it is no "client-only" config,
  // determine whether or not a local cupsd is accessible:
  if( ! autoconfig_settings_dialog_is_useless )
  { if( ! Printerlib::GetAndSetCupsdStatus( "" ) )
    { // Printerlib::GetAndSetCupsdStatus already shows a confirmation popup:
      if( ! Printerlib::GetAndSetCupsdStatus( "start" ) )
      { autoconfig_settings_dialog_is_useless = true;
        y2milestone( "autoconfig_settings_dialog_is_useless because 'rccups start' failed." );
      }
    }
  }
  // When it is no "client-only" config and when a local cupsd is accessible,
  // the whole dialog is still useless without having cups-autoconfig installed.
  // Therefore check if cups-autoconfig is installed and if not try to install it.
  // It is perfectly o.k. when the user rejects cups-autoconfig to be installed
  // (perhaps he selected it to be removed before in this dialog
  // and re-launched this dialog by accident or to check the current setting).
  // Therefore there is no additional message shown here when the dialog is useless
  // because there was a Popup request that cups-autoconfig must be installed.
  if( ! autoconfig_settings_dialog_is_useless )
  { if( ! Printerlib::TestAndInstallPackage( "cups-autoconfig", "installed" ) )
    { if( ! Printerlib::TestAndInstallPackage( "cups-autoconfig", "install" ) )
      { autoconfig_settings_dialog_is_useless = true;
      }
    }
  }
  UI::ChangeWidget( `id("cups_autoconfig_remove"), `Value, autoconfig_settings_dialog_is_useless );
  // Read cups-autoconfig settings.
  // Ignore errors when the bash commands fail because the default values are used as
  // fallback values in particular when the cups-autoconfig RPM is not installed.
  // By default the ConfigureNewPrinters value in /etc/cups-autoconfig.conf is set to "yes":
  initial_cups_autoconfig_ConfigureNewPrinters = true;
  Printerlib::ExecuteBashCommand( "grep -i '^[[:space:]]*ConfigureNewPrinters' /etc/cups-autoconfig.conf | cut -s -d '=' -f2 | tr -d -c '[:alnum:]'" );
  if( "no" == tolower( Printerlib::result["stdout"]:"yes" ) )
  { initial_cups_autoconfig_ConfigureNewPrinters = false;
  }
  // By default the DisablePrintersOnRemoval value in /etc/cups-autoconfig.conf is set to "no":
  initial_cups_autoconfig_DisablePrintersOnRemoval = false;
  Printerlib::ExecuteBashCommand( "grep -i '^[[:space:]]*DisablePrintersOnRemoval' /etc/cups-autoconfig.conf | cut -s -d '=' -f2 | tr -d -c '[:alnum:]'" );
  if( "yes" == tolower( Printerlib::result["stdout"]:"no" ) )
  { initial_cups_autoconfig_DisablePrintersOnRemoval = true;
  }
  // By default the DefaultCUPSPolicy value in /etc/cups-autoconfig.conf is set to the empty string:
  Printerlib::ExecuteBashCommand( "grep -i '^[[:space:]]*DefaultCUPSPolicy' /etc/cups-autoconfig.conf | cut -s -d '=' -f2 | tr -d -c '[:alnum:]'" );
  initial_cups_autoconfig_DefaultCUPSPolicy = tolower( Printerlib::result["stdout"]:"" );
  // By default the DefaultCUPSPolicy value in /etc/cups-autoconfig.conf is set to the empty string.
  // Therefore an empty policy name could be added as additional possible value
  // but an empty policy name would be meningless for the user
  // so that the more verbose string "not set" is used for this case.
  // Therefore "not set" in the cups_autoconfig_operation_policy ComboBox means actually
  // an empty value for DefaultCUPSPolicy in /etc/cups-autoconfig.conf which
  // means to use the DefaultPolicy value in /etc/cups/cupsd.conf also for cups_autoconfig.
  if( "" == initial_cups_autoconfig_DefaultCUPSPolicy )
  { initial_cups_autoconfig_DefaultCUPSPolicy = "not set";
  }
  // Set the different values for the different widgets in the dialog
  // and use the default values as fallback values:
  UI::ChangeWidget( `id("cups_autoconfig_configure_new_attached"), `Value, initial_cups_autoconfig_ConfigureNewPrinters );
  UI::ChangeWidget( `id("cups_autoconfig_disable_on_removal"), `Value, initial_cups_autoconfig_DisablePrintersOnRemoval );
  // Determine the existing policy names in '<Policy policy-name>' sections in /etc/cups/cupsd.conf:
  list< string > operation_policy_names = [ "" ];
  if( Printerlib::ExecuteBashCommand( Printerlib::yast_bin_dir + "modify_cupsd_conf Policies" ) )
  { // The command outputs a line where multiple policy names are separated by space
    // but possible duplicate policy names are not removed in the command output:
    operation_policy_names = toset( splitstring( Printerlib::result["stdout"]:"", " " ) );
  }
  else
  { // Use fallback value when the command above failed.
    operation_policy_names = [ "default" ];
  }
  // Add the special case "not set" (see above) to the available operation_policy_names:
  operation_policy_names  = prepend( operation_policy_names, "not set" );
  // Use only the plain strings in the operation_policy_names list without an id
  // for the operation_policy ComboBox:
  UI::ChangeWidget( `id("cups_autoconfig_operation_policy"), `Items, operation_policy_names );
  // Have the initial_cups_autoconfig_DefaultCUPSPolicy preselected
  // if it is available in operation_policy_names
  // otherwise have the special value "not set" preselected:
  if( contains( operation_policy_names, initial_cups_autoconfig_DefaultCUPSPolicy ) )
  { UI::ChangeWidget( `id("cups_autoconfig_operation_policy"), `Value, initial_cups_autoconfig_DefaultCUPSPolicy );
  }
  else
  { UI::ChangeWidget( `id("cups_autoconfig_operation_policy"), `Value, "not set" );
  }
  // The CheckBox to trigger automatic configuration is initially always off:
  UI::ChangeWidget( `id("cups_autoconfig_trigger"), `Value, false );
  // Disable all widgets if autoconfig_settings_dialog_is_useless:
  if( autoconfig_settings_dialog_is_useless )
  { UI::ChangeWidget( `id("cups_autoconfig_remove"), `Enabled, false );
    UI::ChangeWidget( `id("cups_autoconfig_label"), `Enabled, false );
    UI::ChangeWidget( `id("cups_autoconfig_configure_new_attached"), `Enabled, false );
    UI::ChangeWidget( `id("cups_autoconfig_disable_on_removal"), `Enabled, false );
    UI::ChangeWidget( `id("cups_autoconfig_operation_policy"), `Enabled, false );
    UI::ChangeWidget( `id("cups_autoconfig_trigger"), `Enabled, false );
  }
  y2milestone( "leaving initAutoconfig with\ninitial_cups_autoconfig_ConfigureNewPrinters = '%1'\ninitial_cups_autoconfig_DisablePrintersOnRemoval = '%2'\ninitial_cups_autoconfig_DefaultCUPSPolicy = '%3'", initial_cups_autoconfig_ConfigureNewPrinters, initial_cups_autoconfig_DisablePrintersOnRemoval, initial_cups_autoconfig_DefaultCUPSPolicy );
}

boolean ApplyAutoconfigSettings()
{ // If the cups-autoconfig RPM should be removed and when it is currently installed,
  // try to remove it and return because nothing else matters in this case.
  // Return even when the user decided to reject the removal because
  // it would lead to unexpected results when cups-autoconfig settings
  // may change in the system when the user decided to remove cups-autoconfig
  // but rejects the removal (i.e. some kind of "cancel/abort" by the user)
  // but settings were changed in the system nevertheless.
  // It is crucial to test whether cups-autoconfig is currently installed
  // because it could have been not installed when the dialog was launched
  // and the user may have rejected the installation in initAutoconfig
  // so that the vaule of the "cups_autoconfig_remove" CheckBox would
  // have been also set to 'true' in initAutoconfig.
  if( (boolean)UI::QueryWidget( `id("cups_autoconfig_remove"), `Value ) )
  { if( Printerlib::TestAndInstallPackage( "cups-autoconfig", "installed" ) )
    { Printerlib::TestAndInstallPackage( "cups-autoconfig", "remove" );
      y2milestone( "leaving storeAutoconfig" );
      //return `autoconfig_next;
      return true;
    }
  }
  boolean applied_autoconfig_settings = true;
  // Get the actual settings and values from the dialog:
  boolean current_cups_autoconfig_ConfigureNewPrinters = (boolean)UI::QueryWidget( `id("cups_autoconfig_configure_new_attached"), `Value );
  boolean current_cups_autoconfig_DisablePrintersOnRemoval = (boolean)UI::QueryWidget( `id("cups_autoconfig_disable_on_removal"), `Value );
  string current_cups_autoconfig_DefaultCUPSPolicy = (string)UI::QueryWidget( `id("cups_autoconfig_operation_policy"), `Value );
  y2milestone( "current_cups_autoconfig_ConfigureNewPrinters = '%1'\ncurrent_cups_autoconfig_DisablePrintersOnRemoval = '%2'\ncurrent_cups_autoconfig_DefaultCUPSPolicy = '%3'", current_cups_autoconfig_ConfigureNewPrinters, current_cups_autoconfig_DisablePrintersOnRemoval, current_cups_autoconfig_DefaultCUPSPolicy );
  boolean cups_autoconfig_triggered = (boolean)UI::QueryWidget( `id("cups_autoconfig_trigger"), `Value );
  if( current_cups_autoconfig_ConfigureNewPrinters == initial_cups_autoconfig_ConfigureNewPrinters
      && current_cups_autoconfig_DisablePrintersOnRemoval == initial_cups_autoconfig_DisablePrintersOnRemoval
      && current_cups_autoconfig_DefaultCUPSPolicy == initial_cups_autoconfig_DefaultCUPSPolicy
      && ! cups_autoconfig_triggered
    )
  { y2milestone( "Nothing changed in 'Autoconfig Settings' dialog." );
    y2milestone( "leaving storeAutoconfig" );
    return true;
  }
  if( current_cups_autoconfig_ConfigureNewPrinters != initial_cups_autoconfig_ConfigureNewPrinters )
  { if( current_cups_autoconfig_ConfigureNewPrinters )
    { if( ! Printerlib::ExecuteBashCommand( "sed -i -e '/^[[:space:]]*ConfigureNewPrinters.*/Id' /etc/cups-autoconfig.conf && echo 'ConfigureNewPrinters=yes' >>/etc/cups-autoconfig.conf" ) )
      { Popup::ErrorDetails( // Popup::ErrorDetails message
                             // Do not change or translate "ConfigureNewPrinters=yes", it is a system settings name.
                             _("Failed to set 'ConfigureNewPrinters=yes' in /etc/cups-autoconfig.conf"),
                             Printerlib::result["stderr"]:""
                           );
        applied_autoconfig_settings = false;
      }
    }
    else
    { if( ! Printerlib::ExecuteBashCommand( "sed -i -e '/^[[:space:]]*ConfigureNewPrinters.*/Id' /etc/cups-autoconfig.conf && echo 'ConfigureNewPrinters=no' >>/etc/cups-autoconfig.conf" ) )
      { Popup::ErrorDetails( // Popup::ErrorDetails message
                             // Do not change or translate "ConfigureNewPrinters=no", it is a system settings name.
                             _("Failed to set 'ConfigureNewPrinters=no' in /etc/cups-autoconfig.conf"),
                             Printerlib::result["stderr"]:""
                           );
        applied_autoconfig_settings = false;
      }
    }
  }
  if( current_cups_autoconfig_DisablePrintersOnRemoval != initial_cups_autoconfig_DisablePrintersOnRemoval )
  { if( current_cups_autoconfig_DisablePrintersOnRemoval )
    { if( ! Printerlib::ExecuteBashCommand( "sed -i -e '/^[[:space:]]*DisablePrintersOnRemoval.*/Id' /etc/cups-autoconfig.conf && echo 'DisablePrintersOnRemoval=yes' >>/etc/cups-autoconfig.conf" ) )
      { Popup::ErrorDetails( // Popup::ErrorDetails message
                             // Do not change or translate "DisablePrintersOnRemoval=yes", it is a system settings name.
                             _("Failed to set 'DisablePrintersOnRemoval=yes' in /etc/cups-autoconfig.conf"),
                             Printerlib::result["stderr"]:""
                           );
        applied_autoconfig_settings = false;
      }
    }
    else
    { if( ! Printerlib::ExecuteBashCommand( "sed -i -e '/^[[:space:]]*DisablePrintersOnRemoval.*/Id' /etc/cups-autoconfig.conf && echo 'DisablePrintersOnRemoval=no' >>/etc/cups-autoconfig.conf" ) )
      { Popup::ErrorDetails( // Popup::ErrorDetails message
                             // Do not change or translate "DisablePrintersOnRemoval=no", it is a system settings name.
                             _("Failed to set 'DisablePrintersOnRemoval=no' in /etc/cups-autoconfig.conf"),
                             Printerlib::result["stderr"]:""
                           );
        applied_autoconfig_settings = false;
      }
    }
  }
  if( current_cups_autoconfig_DefaultCUPSPolicy != initial_cups_autoconfig_DefaultCUPSPolicy )
  { if( "not set" == current_cups_autoconfig_DefaultCUPSPolicy )
    { // By default the DefaultCUPSPolicy value in /etc/cups-autoconfig.conf is set to the empty string.
      // Such an empty string was replaced in initAutoconfig() by the more verbose string "not set".
      // Now this verbose string is re-replaced by the empty string:
      current_cups_autoconfig_DefaultCUPSPolicy = "";
    }
    if( ! Printerlib::ExecuteBashCommand( "sed -i -e '/^[[:space:]]*DefaultCUPSPolicy.*/Id' /etc/cups-autoconfig.conf && echo 'DefaultCUPSPolicy=" + current_cups_autoconfig_DefaultCUPSPolicy + "' >>/etc/cups-autoconfig.conf" ) )
    { Popup::ErrorDetails( sformat( // Popup::ErrorDetails message
                                    // where %1 will be replaced by the cups-autoconfig error policy value.
                                    // Do not change or translate "DefaultCUPSPolicy", it is a system settings name.
                                    _("Failed to set 'DefaultCUPSPolicy=%1' in /etc/cups-autoconfig.conf"),
                                    current_cups_autoconfig_DefaultCUPSPolicy
                                  ),
                           Printerlib::result["stderr"]:""
                         );
      applied_autoconfig_settings = false;
    }
  }
  if( applied_autoconfig_settings )
  { // After the autoconfig settings have been successfully applied,
    // check if cups-autoconfig should run now:
    if( cups_autoconfig_triggered )
    { if( ! Printerlib::ExecuteBashCommand( "/usr/lib/cups-autoconfig/cups-autoconfig --add" ) )
      { Popup::ErrorDetails( // Popup::ErrorDetails message.
                             _("Automatic configuration failed."),
                             Printerlib::result["stderr"]:""
                           );
        applied_autoconfig_settings = false;
      }
    }
  }
  y2milestone( "leaving storeAutoconfig" );
  return applied_autoconfig_settings;
}

symbol handleAutoconfig( string key, map event )
{ y2milestone( "entering handleAutoconfig with key '%1'\nand event '%2'", key, event );
  if( "ValueChanged" == event["EventReason"]:"" )
  { if( "cups_autoconfig_remove" == event["WidgetID"]:"" )
    { // Enable or disable the other widgets depending on whether or not
      // the cups-autoconfig RPM should be removed:
      boolean have_cups_autoconfig = ! (boolean)UI::QueryWidget( `id("cups_autoconfig_remove"), `Value );
      UI::ChangeWidget( `id("cups_autoconfig_configure_new_attached"), `Enabled, have_cups_autoconfig );
      UI::ChangeWidget( `id("cups_autoconfig_disable_on_removal"), `Enabled, have_cups_autoconfig );
      UI::ChangeWidget( `id("cups_autoconfig_operation_policy"), `Enabled, have_cups_autoconfig );
      UI::ChangeWidget( `id("cups_autoconfig_trigger"), `Enabled, have_cups_autoconfig );
    }
    if( "cups_autoconfig_configure_new_attached" == event["WidgetID"]:"" )
    { // Set the CheckBox to trigger automatic configuration to "off"
      // when cups-autoconfig should not do an automatic configuration
      // but do not automatically set the trigger to "on" in the opposite case:
      if( ! (boolean)UI::QueryWidget( `id("cups_autoconfig_configure_new_attached"), `Value ) )
      { UI::ChangeWidget( `id("cups_autoconfig_trigger"), `Value, false );
      }
    }
    if( "cups_autoconfig_trigger" == event["WidgetID"]:"" )
    { // Set the CheckBox to do an automatic configuration to "on"
      // when the CheckBox to trigger automatic configuration is set to "on"
      // but do not automatically disable automatic configuration in the opposite case:
      if( (boolean)UI::QueryWidget( `id("cups_autoconfig_trigger"), `Value ) )
      { UI::ChangeWidget( `id("cups_autoconfig_configure_new_attached"), `Value, true );
      }
    }
  }
  if( "Activated" == event["EventReason"]:"" )
  { if( `back == event["ID"]:nil )
    { return `autoconfig_back;
    }
    if( `next == event["ID"]:nil )
    { if( ! ApplyAutoconfigSettings() )
      { Popup::Error( // Popup::Error message:
                      _("Failed to apply the settings to the system.")
                    );
      }
      return `autoconfig_next;
    }
  }
  return nil;
}

/* EOF */
}
