/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	clients/printer_proposal.ycp
 * Package:	Configuration of printer
 * Summary:	Proposal function dispatcher.
 * Authors:	Johannes Meixner <jsmeix@suse.de>
 *
 * $Id: printer_proposal.ycp 27914 2006-02-13 14:32:08Z locilka $
 *
 * Proposal function dispatcher for printer configuration.
 * See source/installation/proposal/proposal-API.txt
 */

{

textdomain "printer";

import "Printer";
import "Progress";
import "String";

/* The main () */
y2milestone("----------------------------------------");
y2milestone("Printer proposal started");

string func = (string) WFM::Args(0);
map param = (map) WFM::Args(1);
map ret = $[];

/* create a textual proposal */
if(func == "MakeProposal") {
    list<string> proposal = [];
    string warning = nil;
    symbol warning_level = nil;
    boolean force_reset = param["force_reset"]:false;

    if(force_reset || !Printer::proposal_valid) {
        Printer::proposal_valid = true;
	boolean progress_orig = Progress::set (false);
	Printer::Read();
	Progress::set (progress_orig);
    }

// Propose configuration for each local printer
// TODO: replace by cups-autoconfig

 list<term> detected_printers = filter(term row, (list<term>)Printer::ConnectionItems( "BasicAddDialog" ), { return (!issubstring(String::CutBlanks(row[1]:""), "Unknown")); });
 y2milestone("Detected local printers : %1", detected_printers);
 if (size(detected_printers)>0){
  y2milestone("Local printers detected, will configure");
  foreach(term printer, detected_printers, {
   y2internal("Configure queue for backend %1", printer[2]:"");
   string queue_name = Printer::NewQueueName( tolower( printer[1]:"" ));
   y2milestone("Proposed queue name : %1", queue_name);
   list drivers = Printer::DriverItems( filterchars( tolower( String::CutBlanks(printer[1]:"") ), Printer::lower_alnum_chars ), true );
   if (size(drivers)>0){
    y2internal("Available drivers : %1", drivers);
    y2internal("Selected driver : %1", drivers[0]:nil);
    Printer::selected_ppds_index=drivers[0,0,0]:-1;
    Printer::selected_connections_index=printer[0,0]:-1;
    Printer::AddQueue(queue_name);
   } else y2error("No available drivers for printer %1", printer);
  });
 } else {
  y2milestone("No local printers detected");
 }

    foreach( term queue, (list<term>) Printer::QueueItems(true, false), {
	proposal = add(proposal, queue[3]:"");
    });
/*
    proposal = maplist ( map< string, string > queue, Printer::queues, {
	string description = queue["description"]:"";
	return description;
    });
*/
    proposal = filter (string p, proposal, { return p != ""; });
    if (size (proposal) == 0)
	proposal = [ _("No printer queue configured.") ];

    ret = $[
	"raw_proposal" : proposal,
	"warning_level" : warning_level,
	"warning" : warning,
    ];
}
/* run the module */
else if(func == "AskUser") {
    map stored = Printer::Export();
    symbol seq = (symbol) WFM::CallFunction("printer", [.propose]);
    if(seq != `next) Printer::Import(stored);
    y2debug("stored=%1",stored);
    y2debug("seq=%1",seq);
    ret = $[
	"workflow_sequence" : seq
    ];
}
/* create titles */
else if(func == "Description") {
    ret = $[
	/* Rich text title for Printer in proposals */
	"rich_text_title" : _("Printer"),
	/* Menu title for Printer in proposals */
	"menu_title" : _("&Printer"),
	"id" : "printer",
    ];
}
/* write the proposal */
else if(func == "Write") {
    Printer::Write();
}
/* unknown function */
else {
    y2error("unknown function: %1", func);
}

/* Finish */
y2debug("ret=%1",ret);
y2milestone("Printer proposal finished");
y2milestone("----------------------------------------");
return ret;

/* EOF */
}
