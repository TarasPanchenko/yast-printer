/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:        include/printer/sharing.ycp
 * Package:     Configuration of printer
 * Summary:     Print queue sharing and publishing dialog definition
 * Authors:     Johannes Meixner <jsmeix@suse.de>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "printer";

import "Label";
import "Wizard";
import "Printer";
import "Popup";
import "NetworkInterfaces";

include "printer/helps.ycp";

term widgetSharing =
		`VBox( `VSpacing( 1 ),
                         `RadioButtonGroup( `id(`deny_or_allow_remote_access),
                                           `VBox( `Left( `RadioButton( `id(`deny_remote_access_radio_button),
                                                                       `opt(`notify),
                                                                       _("&Deny remote access"),
                                                                       true
                                                                     )
                                                       ),
                                                  `VSpacing( 2 ),
                                                  `Left( `RadioButton( `id(`allow_remote_access_radio_button),
                                                                       `opt(`notify),
                                                                       _("&Allow remote access"),
                                                                       false
                                                                     )
                                                       )
                                                )
                                          ),
                         `VSpacing( 1 ),
                         `HBox( `HSpacing( 3 ),
                                `VBox( `Left( `CheckBox( `id(`allow_local_network_access_check_box),
                                                          _("For computers within the &local network"),
                                                          true
                                                       )
                                            ),
                                       `Left( `HBox( `HSpacing( 2 ),
                                                     `CheckBox( `id(`publish_to_local_network_check_box),
                                                                _("&Publish printers by default within the local network"),
                                                                true
                                                              )
                                                   )
                                            ),
                                       `VSpacing( 1 ),
                                       `Left( `Label( _("Via network interfaces specified below") )),
                                       `Table( `id(`interface_table), `header( _("Interface"),
                                                        _("Publish printers by default via this interface")
                                                      ),
                                               [ `item( `id(0), "eth0", "no" ),
                                                 `item( `id(1), "eth1", "yes" )
                                               ]
                                             ),
                                       `Left( `HBox( `PushButton( `id(`add_interface), _("&Add") ),
                                                     `PushButton( `id(`edit_interface), _("&Edit") ),
                                                     `PushButton( `id(`delete_interface), _("&Delete") )
                                                   )
                                            ),
                                       `VSpacing( 1 ),
                                       `Left( `Label( _("For hosts / networks specified below") ) ),
                                       `Table( `id(`ip_table), `header( _("IP address"),
                                                        _("Publish printers by default for this address")
                                                      ),
                                               [ `item( `id(0), "192.168.100.1", "yes" ),
                                                 `item( `id(1), "192.168.100.2", "no" ),
                                                 `item( `id(2), "192.168.200.0/24", "no" ),
                                                 `item( `id(3), "192.168.300.0/255.255.255.0", "yes" )
                                               ]
                                             ),
                                       `Left( `HBox( `PushButton( `id(`add_ip), _("A&dd") ),
                                                     `PushButton( `id(`edit_ip), _("Ed&it") ),
                                                     `PushButton( `id(`delete_ip), _("De&lete") )
                                                   )
                                            )
                                     )
                              ),
                         `VSpacing( 1 )
                       );

map showInterfacePopup(string device, boolean publish){
 map result = $[];
 list<string> devices = NetworkInterfaces::List("");
         UI::OpenDialog( `VBox(
	    `CheckBox(`id(`publish), _("&Publish printers by default via "), publish),
            // translators: combo box label for list of configured IPs
            `ComboBox( `id(`device), `opt( `editable ), _("Network &Devices:"), devices ),
            `VSpacing(),
            `HBox(
                `PushButton( `id(`ok), Label::OKButton() ),
                `PushButton( `id(`cancel), Label::CancelButton() )
             )
        ));
 if(device!="") UI::ChangeWidget(`device, `Value, device);
 while(true){
  any ret = UI::UserInput();
  if (ret==`cancel){
   result=nil;
   break;
  }
  if (ret==`ok){
   publish = (boolean)UI::QueryWidget(`publish, `Value);
   device = (string)UI::QueryWidget(`device, `Value);
   result["device"]=device;
   result["publish"]=publish ? "yes" : "no";
   break;
  }
 }
	UI::CloseDialog();
 return result;
}

map showIPPopup(string device, boolean publish){
 map result = $[];
         UI::OpenDialog( `VBox(
	    `CheckBox(`id(`publish), _("&Publish printers by default via "), publish),
            // translators: input field label for list of configured IPs
            `InputField( `id(`device), _("Network &Address:"), device ),
            `VSpacing(),
            `HBox(
                `PushButton( `id(`ok), Label::OKButton() ),
                `PushButton( `id(`cancel), Label::CancelButton() )
             )
        ));
 if(device!="") UI::ChangeWidget(`device, `Value, device);
 while(true){
  any ret = UI::UserInput();
  if (ret==`cancel){
   result=nil;
   break;
  }
  if (ret==`ok){
   publish = (boolean)UI::QueryWidget(`publish, `Value);
   device = (string)UI::QueryWidget(`device, `Value);
   result["device"]=device;
   result["publish"]=publish ? "yes" : "no";
   break;
  }
 }
	UI::CloseDialog();
 return result;
}

symbol handleSharing(string key, map event){

 if (event["EventReason"]:""=="Activated"){
  y2milestone("button pressed %1", event);
  switch(event["WidgetID"]:`nil){
   integer current=-1;
   map ret = nil;
   case `add_interface	  :
			ret = showInterfacePopup("", false);
			if (ret!=nil){
			 list items = (list)UI::QueryWidget(`interface_table, `Items);
			 items=add(items, `item(`id(size(items)), ret["device"]:"", ret["publish"]:""));
			 UI::ChangeWidget(`interface_table, `Items, items);
			 UI::ChangeWidget(`interface_table, `CurrentItem, current);
			}
			break;
   case `edit_interface	  :
			current = (integer)UI::QueryWidget(`interface_table, `CurrentItem);
			term this = (term)UI::QueryWidget(`interface_table, `Item(current));
                        ret = showInterfacePopup((string)this[1]:"", (this[2]:"no"=="yes"));
			if (ret!=nil){
			 list items = [];
			 foreach(term oneItem, (list<term>)UI::QueryWidget(`interface_table, `Items), {
			  if (current != oneItem[0, 0]:-1){
			   items = add(items, `item(`id(size(items)), oneItem[1]:"", oneItem[2]:""));
			  } else {
				y2milestone("Changing item %1", oneItem);
				items = add(items, `item(`id(size(items)), ret["device"]:"", ret["publish"]:""));
			  }
			 });
			UI::ChangeWidget(`interface_table, `Items, items);
			UI::ChangeWidget(`interface_table, `CurrentItem, current);
			}
			break;
   case `delete_interface :
			current = (integer)UI::QueryWidget(`interface_table, `CurrentItem);
			if (current!=nil && current>-1){
			 list items = [];
			 foreach(term oneItem, (list<term>)UI::QueryWidget(`interface_table, `Items), {
			  if (current != oneItem[0, 0]:-1){
			   items = add(items, `item(`id(size(items)), oneItem[1]:"", oneItem[2]:""));
			  } else y2milestone("Deleting item %1", oneItem);

			 });
			UI::ChangeWidget(`interface_table, `Items, items);
			} else y2error("Unproper index for current item: %1", current);
			break;
   case `add_ip	  :
			ret = showIPPopup("", false);
			if (ret!=nil){
			 list items = (list)UI::QueryWidget(`ip_table, `Items);
			 items=add(items, `item(`id(size(items)), ret["device"]:"", ret["publish"]:""));
			 UI::ChangeWidget(`ip_table, `Items, items);
			 UI::ChangeWidget(`ip_table, `CurrentItem, current);
			}
			break;

   case `edit_ip	  :
			current = (integer)UI::QueryWidget(`ip_table, `CurrentItem);
			term this2 = (term)UI::QueryWidget(`ip_table, `Item(current));
                        ret = showIPPopup((string)this2[1]:"", (this2[2]:"no"=="yes"));
			if (ret!=nil){
			 list items = [];
			 foreach(term oneItem, (list<term>)UI::QueryWidget(`ip_table, `Items), {
			  if (current != oneItem[0, 0]:-1){
			   items = add(items, `item(`id(size(items)), oneItem[1]:"", oneItem[2]:""));
			  } else {
				y2milestone("Changing item %1", oneItem);
				items = add(items, `item(`id(size(items)), ret["device"]:"", ret["publish"]:""));
			  }
			 });
			UI::ChangeWidget(`ip_table, `Items, items);
			UI::ChangeWidget(`ip_table, `CurrentItem, current);
			}
			break;
   case `delete_ip :
			current = (integer)UI::QueryWidget(`ip_table, `CurrentItem);
			if (current!=nil && current>-1){
			 list items = [];
			 foreach(term oneItem, (list<term>)UI::QueryWidget(`ip_table, `Items), {
			  if (current != oneItem[0, 0]:-1){
			   items = add(items, `item(`id(size(items)), oneItem[1]:"", oneItem[2]:""));
			  } else y2milestone("Deleting item %1", oneItem);

			 });
			UI::ChangeWidget(`ip_table, `Items, items);
			} else y2error("Unproper index for current item: %1", current);
			break;
  }
 }

 boolean share = (UI::QueryWidget(`deny_or_allow_remote_access, `CurrentButton)==`allow_remote_access_radio_button);
 UI::ChangeWidget(`allow_local_network_access_check_box, `Enabled, share);
 UI::ChangeWidget(`publish_to_local_network_check_box, `Enabled, share);
 UI::ChangeWidget(`interface_table, `Enabled, share);
 UI::ChangeWidget(`add_interface, `Enabled, share);
 UI::ChangeWidget(`edit_interface, `Enabled, share);
 UI::ChangeWidget(`delete_interface, `Enabled, share);
 UI::ChangeWidget(`ip_table, `Enabled, share);
 UI::ChangeWidget(`add_ip, `Enabled, share);
 UI::ChangeWidget(`edit_ip, `Enabled, share);
 UI::ChangeWidget(`delete_ip, `Enabled, share);
 if (share){
  boolean interface_buttons=true;
  boolean ip_buttons=true;
  if (size((list)UI::QueryWidget(`interface_table, `Items))==0) interface_buttons=false;
  UI::ChangeWidget(`edit_interface, `Enabled, interface_buttons);
  UI::ChangeWidget(`delete_interface, `Enabled, interface_buttons);
  if (size((list)UI::QueryWidget(`ip_table, `Items))==0) ip_buttons=false;
  UI::ChangeWidget(`edit_ip, `Enabled, ip_buttons);
  UI::ChangeWidget(`delete_ip, `Enabled, ip_buttons);
 }
 return nil;
}

/* EOF */
}
