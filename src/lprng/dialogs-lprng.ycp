/**
 * File:
 *  dialogs-lprng.ycp
 * Module:
 *  Printer configurator
 * Summary:
 *  Main dialogs.
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 * Main dialogs.
 */
{
    textdomain "printer";

    import "Label";
    import "Popup";
    import "Printer";
    import "Wizard";

    include "printer/helps.ycp";
    include "printer/misc.ycp";


    /**
     * Settings of ascii features and encoding.
     * @return symbol for ws
     */
    global define symbol runFeaturesDialog () ``{
	map conf = lookup (Printer::printer, "conf", $[]);
	string encoding = lookup (conf, "encoding", "");
	string feature = lookup (conf, "feature", "1n");
	boolean ascii = lookup (Printer::printer, "ascii", false);

	string pages = filterchars (feature, "12l");
	string print_header = filterchars (feature, "n");

	// button label
	term test_button =`PushButton (`id (`test), `opt (`key_F6), _("&Test"));
	term contents =
	    // Title of frame containing pages/sheet, header and orientation
	    `HBox (`HSpacing (10),
		   `VBox (`VStretch (),
			  // label of frame
			  `Frame (_("Printing of ASCII text"),
				  `HBox (`HSpacing (1.0),
					 `VBox (`VSpacing (0.2),
						`RadioButtonGroup (`id (`numberpages_rb),
						       // Radio button
						       `VBox (`RadioButton (`id ("1"), `opt (`hstretch),
										   // radio button
										   _("&One page per sheet"), "1" == pages),
							      // Radio button
							      `RadioButton (`id ("2"), `opt (`hstretch),
										   // radio button
										   _("T&wo pages per sheet"), "2" == pages),
							      // Radio button
							      `RadioButton (`id ("1l"), `opt (`hstretch),
										   // radio button
										   _("&Landscape orientation"), "1l" == pages)
							      )),
						`VSpacing (0.2),
						// CheckBox
						`Left (`CheckBox (`id (`printheader_cb),
								  // check box
								  _("&Print header"), "n" != print_header)),
						// CheckBox
						`Left (`CheckBox (`id (`ascii),
								  // check box
								  _("For&ce ASCII printing"), ascii)),
						`VSpacing (0.5)),
					 `HSpacing (0.5))),
			  `VSpacing (0.5),
			  `ComboBox (`id (`encoding_cbox), `opt (`hstretch, `editable), // ComboBox
				     _("&Encoding of the printed documents"),
				     // combobox item
				     [ `item (`id (""), _("Use the system default")),
				     // combobox item
				     `item (`id ("ISO-8859-1"), _("iso-8859-1"), encoding == "ISO-8859-1"),
                                     // combobox item
				     `item (`id ("ISO-8859-2"), _("iso-8859-2"), encoding == "ISO-8859-2"),
                                     // combobox item
				     `item (`id ("ISO-8859-3"), _("iso-8859-3"), encoding == "ISO-8859-3"),
                                     // combobox item
				     `item (`id ("ISO-8859-4"), _("iso-8859-4"), encoding == "ISO-8859-4"),
                                     // combobox item
				     `item (`id ("ISO-8859-9"), _("iso-8859-9"), encoding == "ISO-8859-9"),
                                     // combobox item
				     `item (`id ("ISO-8859-10"), _("iso-8859-10"), encoding == "ISO-8859-10"),
                                     // combobox item
				     `item (`id ("ISO-8859-13"), _("iso-8859-13"), encoding == "ISO-8859-13"),
                                     // combobox item
				     `item (`id ("ISO-8859-15"), _("iso-8859-15"), encoding == "ISO-8859-15"),
                                     // combobox item
				     `item (`id ("CP1250"), _("Microsoft CP1250"), encoding == "CP1250"),
                                     // combobox item
				     `item (`id ("ibmpc"), _("Original IBM-PC Encoding"), encoding == "ibmpc"),
                                     // combobox item
				     `item (`id ("mac"), _("Apple Macintosh Encoding"), encoding == "mac"),
                                     // combobox item
				     `item (`id ("hp"), _("HP Roman Encoding"), encoding == "hp"),
				     ]),
			  `VStretch (),
			  test_button,
			  `VStretch ()),
		   `HSpacing (10));

	// Label of the dialog
	Wizard::SetContentsButtons (_("ASCII printing settings"), contents, getFeaturesHelp (), Label::BackButton (), Label::NextButton ());

	any ret = nil;
	string print_header_out = "";
	string landscape_out = "";
	repeat {
	    ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	    if (`test == ret || `next == ret)
	    {
		print_header = UI::QueryWidget (`id (`printheader_cb), `Value) ? "" : "n";
		pages = UI::QueryWidget (`id (`numberpages_rb), `CurrentButton);
		feature = pages + print_header;
		conf = union (conf, $[ "encoding" : UI::QueryWidget (`id (`encoding_cbox), `Value), //FIXME: validate encoding
			"feature" : feature, ]);
		ascii = UI::QueryWidget (`id (`ascii), `Value);
		if (`test == ret)
		{
		    Printer::printer = add (add (Printer::printer, "conf", conf), "ascii", ascii);
		    testPrinter (Printer::printer, `ask);
		}
	    }
	    if (`abort == ret || `cancel == ret)
	    {
		ret = reallyAbort () ? `abort : nil;
	    }
	} until (`abort == ret || ret == `back || ret == `next);

	if (ret == `next)
	{
	    Printer::printer = add (add (Printer::printer, "conf", conf), "ascii", ascii);
	}
	return ret;
    }

}
