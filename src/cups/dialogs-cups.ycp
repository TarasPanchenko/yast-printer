/**
 * File:
 *  dialogs-cups.ycp
 * Module:
 *  Printer configurator
 * Summary:
 *  Main dialogs.
 * Authors:
 *  Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 * Main dialogs.
 */
{
    textdomain "printer";

    import "Wizard_hw";
    import "Printerlib";
    import "Printer";

    include "printer/misc.ycp";
    include "printer/misc-cups.ycp";
    include "printer/helps.ycp";
    include "ui/common_popups.ycp";
    include "ui/file_popups.ycp";
    include "wizard/sequencer.ycp";


    /**
     * Is there only client?
     * @return symbol for wizard sequencer
     */
    global define symbol runClientDialog () ``{
        term contents = `VBox (
	    `HBox (
		`ReplacePoint (
		    `id (`hostent_replace),
		    // Combobox label
		    `ComboBox (`id (`hostnameent), `opt (`editable, `hstretch), _("&Server name"), [ Printer::server_hostname ] )
		),
		`VBox (
		    `Label (" "),
		    // menubutton
                    `MenuButton (_("&Lookup"), [
			// menu entry
                        `item (`id (`get_hosts_special), _("&IPP servers")),
			// menu entry
                        `item (`id (`get_hosts), _("&All hosts")),
                    ])
		)
                ),
	    `VSpacing (2),
	    `HBox (
		`HStretch (),
		// pushbutton
		`PushButton (`id (`test), `opt (`key_F6), _("&Test remote IPP access")),
		`HStretch ()
	    ),
            `VSpacing (4),
	    // pushbutton
	    `PushButton (`id (`advanced), `opt (`key_F7), _("Ad&vanced")),
	    `VSpacing (2)
            );
        // dialog label
        Wizard::SetContentsButtons (_("CUPS server"), contents, getCupsClientHelp (), BackButtonLabel (), FinishButtonLabel ());

        symbol ret = nil;
        while (true)
        {
            ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	    if (`test == ret)
	    {
		string n = UI::QueryWidget (`id(`hostnameent), `Value);
		Printerlib::testRemote (n, "", "ipp_server", 0);
	    }
            else if (`next == ret)
            {
                string n = UI::QueryWidget (`id(`hostnameent), `Value);
                Printer::dirty = true;
                Printer::server_hostname = n;
                if (nil == n || "" == n)
		    // popup
		    UI::MessagePopup (_("Enter a valid server name."));
		else
		{
		    Printer::cups_installation = 1;
                    break;
		}
            }
	    else if (`advanced == ret)
	    {
		break;
	    }
            else if (`abort == ret)
            {
		if (reallyAbort ())
		    break;
            }
	    else if (`back == ret)
	    {
		if (rallyExit ())
		    break;
	    }
            else if (`get_hosts == ret || `get_hosts_special == ret)
            {
                // get remote hosts (we always offer list of hosts)
                list hosts = getHostnames (`get_hosts_special == ret ? "ipp" : "");
                UI::ReplaceWidget (`id (`hostent_replace),
                                    `ComboBox (
                                        `id (`hostnameent),
                                        `opt (`editable, `hstretch),
					// combobox label
                                        _("&Server name"),
                                        hosts));
            }
        }
        return ret;
    }
    /**
     * Choose PPD file
     * @return symbol `next, `abort or `back
     */
    global define symbol runSelectPpdFile () ``{

	string file = lookup (Printer::printer, "ownppd", "");
	if (file == "")
	    file = "/usr/share/cups/model/Postscript.ppd.gz";
	string manuf = "";
	string model = "";
	string nick = "";

	term contents = `HBox (
	    `HSpacing (5),
	    `VBox (
		`HBox (
		    // textentry
		    `TextEntry (`id(`name), `opt (`notify), _("&File name:"), file),
		    `VBox (
			`Label (" "),
			// pushbutton
			`PushButton (`id (`browse), _("Bro&wse..."))
		    )
		),
		`VSpacing (3),
		// frame
		`Frame ( _("File info"),
		    `HBox (
			`HSpacing (4),
			`VBox (
			    `VSpacing (1),
			    // label
			    `Label (`id (`manuf), `opt (`hstretch), sformat (_("Manufacturer: %1"),
			    // label
				 _("File does not exist."))),
			    // label
			    `Label (`id (`model), `opt (`hstretch), sformat (_("Model: %1"),
			    // label
				 _("File does not exist."))),
			    // label
			    `Label (`id (`nick), `opt (`hstretch), sformat (_("Description: %1"),
			    // label
				 _("File does not exist."))),
			    `VSpacing (1)
			),
			`HSpacing (4)
		    )
		),
		`VSpacing (2),
		`HBox (
		    `HStretch (),
		    // pushbutton
		    `HWeight (1, `PushButton (`id (`test), `opt (`key_F6), _("&Test"))),
//		    `HStretch (),
//		    // pushbutton
//		    `HWeight (1, `PushButton (`id (`db), _("Use &driver from printer database"))),
		    `HStretch ()
		),
		`VSpacing (2),
		`HBox (
		    `HStretch (),
		    // pushbutton
		    `PushButton (`id (`db), _("Use &driver from printer database"))
		)
	    )
	);

	// dialog caption
	Wizard::SetContentsButtons (_("Select PPD file"), contents, getPpdFileHelp (), BackButtonLabel (), NextButtonLabel ());

	if (Printer::isFile (file))
	{
	    if (Printer::isPpd (file))
	    {
		map info = Printer::ppdInfo(file);
		manuf = lookup (info, "manufacturer", "");
		model = lookup (info, "model", "");
		nick = lookup (info, "nick", "");
		// label
		UI::ChangeWidget (`id (`manuf), `Value, sformat (_("Manufacturer: %1"), manuf));
		// label
		UI::ChangeWidget (`id (`model), `Value, sformat (_("Model: %1"), model));
		// label
		UI::ChangeWidget (`id (`nick), `Value, sformat (_("Description: %1"), nick));
	    }
	    else
	    {
		// label
		UI::ChangeWidget (`id (`manuf), `Value, sformat (_("Manufacturer: %1"),
		// label
		 _("Not a PPD file.")));
		// label
		UI::ChangeWidget (`id (`model), `Value, sformat (_("Model: %1"),
		// label
		 _("Not a PPD file.")));
		// label
		UI::ChangeWidget (`id (`nick), `Value, sformat (_("Description: %1"),
		// label
		 _("Not a PPD file.")));
	    }
	}

	symbol ret = nil;
	while (true){
	    ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	    if (`test == ret)
	    {
		file = UI::QueryWidget (`id (`name), `Value);
		if (!is (file, string))
		    file = "";
		if (!Printer::isFile (file))
		{
		    // popup
		    UI::MessagePopup (_("Enter a valid file name."));
		    continue;
		}
		if (!Printer::isPpd (file))
		{
		    // popup
		    UI::MessagePopup (_("The selected file is not a valid PPD file."));
		    continue;
		}
		Printer::printer = add (Printer::printer, "vendor_ieee", manuf);
		Printer::printer = add (Printer::printer, "device_ieee", model);
		Printer::printer = add (Printer::printer, "ownppd", file);
		Printer::printer["database"] = "foomatic";
		Printer::printer = filter (`k, `v, Printer::printer, ``(k != "config" && k != "options"));
		testPrinter (Printer::printer, -1);
	    }
	    else if (`next == ret)
	    {
		file = UI::QueryWidget (`id (`name), `Value);
		if (!is (file, string))
		    file = "";
		if (!Printer::isFile (file))
		{
		    // popup
		    UI::MessagePopup (_("Enter a valid file name."));
		    continue;
		}
		if (!Printer::isPpd (file))
		{
		    // popup
		    UI::MessagePopup (_("The selected file is not a valid PPD file."));
		    continue;
		}
		Printer::printer = add (Printer::printer, "ownppd", file);
		Printer::printer = add (Printer::printer, "vendor_ieee", manuf);
		Printer::printer = add (Printer::printer, "device_ieee", model);
		Printer::printer = filter (`k, `v, Printer::printer, ``(k != "config" && k != "options"));
		break;
	    }
	    else if (`db == ret)
	    {
		Printer::printer = add (Printer::printer, "ownppd", "");
		break;
	    }
	    else if (`advanced == ret)
	    {
		Printer::printer = add (Printer::printer, "ownppd", file);
		break;
	    }
	    else if (`back == ret)
	    {
		break;
	    }
	    else if (`abort == ret)
	    {
		if (reallyAbort ())
		    break;
	    }
	    else if (`browse == ret)
	    {
//		list mask = ["*.ppd", "*.ppd.gz"];
		string new_name = UI::QueryWidget (`id (`name), `Value);
		new_name = substring (new_name, 0, findlastof(new_name, "/")) + "/";
		if (new_name == "")
		    new_name = "/";
		new_name = UI::AskForExistingFile( new_name, "*.ppd *.ppd.gz",
			// dialog header
                    _("Select the PPD file to use."));
		if (new_name != "")
		    UI::ChangeWidget (`id (`name), `Value, new_name);
		ret = `name;
	    }
	    if (`name == ret)
	    {
		file = UI::QueryWidget (`id (`name), `Value);
		if (! Printer::isFile (file))
		{
		    // label
		    UI::ChangeWidget (`id (`manuf), `Value, sformat (_("Manufacturer: %1"), _("File does not exist.")));
		    // label
		    UI::ChangeWidget (`id (`model), `Value, sformat (_("Model: %1"), _("File does not exist.")));
		    // label
		    UI::ChangeWidget (`id (`nick), `Value, sformat (_("Description: %1"), _("File does not exist.")));
		}
		else if (Printer::isPpd (file))
		{
		    map info = Printer::ppdInfo(file);
		    manuf = lookup (info, "manufacturer", "");
		    model = lookup (info, "model", "");
		    nick = lookup (info, "nick", "");
		    // label
		    UI::ChangeWidget (`id (`manuf), `Value, sformat (_("Manufacturer: %1"), manuf));
		    // label
                    UI::ChangeWidget (`id (`model), `Value, sformat (_("Model: %1"), model));
		    // label
		    UI::ChangeWidget (`id (`nick), `Value, sformat (_("Description: %1"), nick));
		}
		else
		{
		    // label
		    UI::ChangeWidget (`id (`manuf), `Value, sformat (_("Manufacturer: %1"), _("Not a PPD file.")));
		    // label
		    UI::ChangeWidget (`id (`model), `Value, sformat (_("Model: %1"), _("Not a PPD file.")));
		    // label
		    UI::ChangeWidget (`id (`nick), `Value, sformat (_("Description: %1"), _("Not a PPD file.")));
		}
	    }

	}
        return ret;
    }
    /**
     * Choose an user.
     * @return list list of selected users
     */
    global define list chooseUser () ``{
        UI (``{
            list users = SCR::Read (.etc.passwd);
            users = maplist (`i, users, ``{
                return lookup (i, "username", "");
            });
            users = maplist (`i, users, ``{
                return `item (`id (i), i);
            });

            OpenDialog (
                `HBox (
                    `HSpacing (0.7),
                    `VSpacing (16),
                    `VBox (
                        `VSpacing (0.5),
                        `HSpacing (16),
                        // selection box label
                        `SelectionBox ( `id (`users), _("&Select user:"), users),
                        // text entry label
                        `TextEntry (`id (`user), _("Or type &user name:"), ""),
                        `HBox (
                            `PushButton (`id (`ok), `opt (`key_F10), OKButtonLabel()),
                            `PushButton (`id (`cancel), `opt (`key_F9), CancelButtonLabel ())
                            ),
                        `VSpacing (0.3),
			`HSpacing (40)
                        ),
                    `HSpacing (0.7)
                    )
                );
        });
        symbol ret = nil;
        list users = [];
        while (true)
            {
                ret = UI::UserInput ();
                if (`ok == ret)
                    {
                        string user2 = UI::QueryWidget (`id (`users), `CurrentItem);
                        string user1 = UI::QueryWidget (`id (`user), `Value);
                        if ("" != user1)
                            {
                                users = add (users, user1);
				user2 = "";
                            }
                        if ("" != user2)
                            {
                                users = add (users, user2);
                            }
                        break;
                    }
                else if (`cancel == ret)
                    {
                        break;
                    }
            }
        UI::CloseDialog ();
        return users;
    }

    /**
     * Show dialog with users that can/can not use printer/class.
     * @return symbol `next or `back
     */
    global define symbol runUsersDialog () ``{
        //
        // parse settings...
        //
        symbol style = `all;
        list users = lookup (Printer::printer, "allowusers", []);
        if ([] == users)
        {
            users = lookup (Printer::printer, "denyusers", []);
            style = (([] == users) ? `all : `cannot);
        }
        else
        {
            style = `can;
        }

        users = toset (users);
        list items = ((lookup (Printer::printer, "uri", "class") != "class") ?
            [
                // items in combobox
                `item ( `id (`all),    _("All users can use this printer"), `all == style),
		// items in combobox
                `item ( `id (`can),    _("The following users can use this printer"), `can == style),
		// items in combobox
                `item ( `id (`cannot), _("The following users cannot use this printer"), `cannot == style)
            ] :
            [
                // items in combobox
                `item ( `id (`all),    _("All users can use this class"), `all == style),
		// items in combobox
                `item ( `id (`can),    _("The following users can use this class."), `can == style),
		// items in combobox
                `item ( `id (`cannot), _("The following users cannot use this class."), `cannot == style)
            ]);
        term contents = `VBox (
		`ComboBox (`id (`type), `opt (`notify),  "", items),
		// selectionbox label
		`ReplacePoint (`id( `replace_users), `SelectionBox (`id (`users), _("&Users"), maplist (`i, users, ``{return `item (`id (i), i);}))),
		`HBox (`PushButton (`id (`add), `opt (`key_F3), AddButtonLabel ()), `PushButton (`id (`delete), `opt (`key_F4), DeleteButtonLabel ()))
	    );

        // dialog label
        Wizard::SetContentsButtons (_("Restrictions"), contents, getUsersHelp (), BackButtonLabel (), NextButtonLabel ());

        symbol ret = `type;
        while (true)
        {
            if (`type == ret)
            {
                UI (``{
                    symbol type = QueryWidget (`id (`type), `Value);
                    if (`can == type || `cannot == type)
                        {
                            ChangeWidget (`id(`users), `Enabled, true);
                            ChangeWidget (`id(`add), `Enabled, true);
                            ChangeWidget (`id(`delete), `Enabled, true);
                        }
                    else
                        {
                            ChangeWidget (`id(`users), `Enabled, false);
                            ChangeWidget (`id(`add), `Enabled, false);
                            ChangeWidget (`id(`delete), `Enabled, false);
                        }
                });
            }
            if (`add == ret)
            {
                list users_to_add = chooseUser ();
                users = toset (flatten ( [users, users_to_add]));
		// selectionbox label
                UI::ReplaceWidget (`id (`replace_users), `SelectionBox (`id (`users), _("&Users"),maplist (`i, users, ``{return `item (`id (i), i);})));
            }
            if (`delete == ret)
            {
                string user_to_delete = UI::QueryWidget (`id (`users), `CurrentItem);
                users = DeleteItem (users, user_to_delete);
		// selectionbox label
                UI::ReplaceWidget (`id (`replace_users), `SelectionBox (`id (`users), _("&Users"),maplist (`i, users, ``{return `item (`id (i), i);})));
            }
            if (`back == ret)
            {
                break;
            }
            if (`next == ret)
            {
                // read values
                symbol type = UI::QueryWidget (`id (`type), `Value);
                if (`all == type)
                    {
                        Printer::printer = add (Printer::printer, "allowusers", []);
                        Printer::printer = add (Printer::printer, "denyusers", []);
                        break;
                    }
                else if (`can == type)
                    {
                        Printer::printer = add (Printer::printer, "allowusers", users);
                        Printer::printer = add (Printer::printer, "denyusers", []);
                        if (0 == size (users))
                            {
                                // message box
                                UI::MessagePopup (_("Specify at least one user."));
                            }
                        else
                            {
                                break;
                            }
                    }
                else if (`cannot == type)
                    {
                        Printer::printer = add (Printer::printer, "allowusers", []);
                        Printer::printer = add (Printer::printer, "denyusers", users);
                        if (0 == size (users))
                            {
                                // message box
                                UI::MessagePopup (_("Specify at least one user."));
                            }
                        else
                            {
                                break;
                            }
                    }
            }
            else if (`abort == ret)
            {
                if (reallyAbort ())
                    {
                        break;
                    }
            }
            ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
        }
        return ret;
    }

    /**
     * State of printer/class.
     * @return symbol `next or `back
     */
    global define symbol runStateDialog () ``{
	boolean is_class = lookup (Printer::printer, "uri", "class") == "class";
        // get state
        boolean accept = lookup (Printer::printer, "accepting", true);
        boolean idle = !(lookup (Printer::printer, "state", "idle") == "stopped");

	// label
        string caption_state = (!is_class ? _("The printer is idle or &printing.")
	// label
	 : _("The class is idle or &printing."));
	// label
        string caption_avail = (!is_class ? _("The printer is accepting &jobs.")
	// label
	 : _("The class is accepting &jobs."));
	// label
        string caption = (!is_class ? _("State and banners of the printer")
	// label
	 : _("State and banners of the class"));
	// label
	string state_caption = (!is_class ? _("State of the printer")
	// label
	 : _("State of the class"));
	// label
	string banners_caption = (!is_class ? _("Banners of the printer")
	// label
	 : _("Banners of the class"));

        // read list of banners
        list banners = getBannerList ();
        banners = sort (banners);
        // read current settings
        string banner_start = lookup (Printer::printer, "bannerstart", "none");
        string banner_end = lookup (Printer::printer, "bannerend", "none");

        if ("" == banner_start)
        {
            banner_start = "none";
        }
        if ("" == banner_end)
        {
            banner_end = "none";
        }



	term contents = `HBox (`HStretch (), `VBox (
	    `VStretch (),
	    `Frame (state_caption,
                `VBox (
                    `Left (`CheckBox (`id (`state), caption_state, idle)),
                    `VSpacing (0.2),
                    `Left (`CheckBox (`id (`accept), caption_avail, accept)),
                    `VSpacing (0.2)
                )
	    ),
            `VStretch (),
	    `Frame (banners_caption,
	      `HBox (
		`HStretch (),
                `VBox (
                    `ComboBox ( `id (`banner_start),
                        // combo box label
                        _("&Starting banner"),
                        maplist (`i, banners, ``{
                            return `item (`id (i), i, i == banner_start);
                        })
                    ),
                    `ComboBox( `id (`banner_end),
                        // combo box label
                        _("&Ending banner"),
                        maplist (`i, banners, ``{
                            return `item (`id (i), i, i == banner_end);
                       })
                    )
                ),
		`HStretch ()
	      )
	    ),
	    `VStretch ()
            ), `HStretch ());


        // dialog label
        Wizard::SetContentsButtons (caption, contents, getStateHelp (), BackButtonLabel (), NextButtonLabel ());

        symbol ret = nil;
        while (true)
            {
                ret = UI::UserInput ();
	        if (ret == `cancel)
	            ret = `abort;
                if (`next == ret)
                {
                    idle = UI::QueryWidget (`id (`state), `Value);
                    accept = UI::QueryWidget (`id (`accept), `Value);
                    Printer::printer = add (Printer::printer, "accepting", accept);
                    Printer::printer = add (Printer::printer, "state", idle ? "idle" : "stopped");

                    banner_end = UI::QueryWidget (`id (`banner_end), `Value);
                    banner_start = UI::QueryWidget (`id (`banner_start), `Value);
                    if ("" == banner_start)
                    {
                        banner_start = "none";
                    }
                    if ("" == banner_end)
                    {
                        banner_end = "none";
                    }
                    Printer::printer = add (Printer::printer, "bannerstart", banner_start);
                    Printer::printer = add (Printer::printer, "bannerend", banner_end);
                    break;
                }
                else if (`back == ret)
                {
                    break;
                }
                else if (`abort == ret)
                {
                    if (reallyAbort ())
                    {
                        break;
                    }
                }
            }
	return ret;
    }
    /**
      * CUPS dialog for enetring IP address
      * @param ad boolean true to show allow-deny radiobutton pair
      * @param label string label of IP address textentry
      * @param init string initial IP address (for textentry)
      * @param state symbol `allow or `deny checked radiobutton
      * @return term dialog contents
      */
    global define term ipAddrPopup (boolean ad, string label, string init, symbol state) ``{
	return `VBox (
	    ad ? `RadioButtonGroup (`id (`type),
		`HBox (
		    // radiobutton
		    `RadioButton (`id (`allow), _("Allow From"), state != `deny),
		    // radiobutton
		    `RadioButton (`id (`deny), _("Deny From"), state == `deny)
		)
	    ) : `VSpacing (0),
	    `TextEntry (`id (`ad), label, init),
	    `HBox (
		`PushButton (`id (`ok), `opt (`default, `key_F10), OKButtonLabel()),
		`PushButton (`id (`cancel), `opt (`key_F9), CancelButtonLabel())
	    )
	);
    }
    /**
     * CUPS access control list dialog
     * @param type symbol `root, `admin, `printers of `classes specifying access configuration area
     * @return symbol `next or `back
     */
    global define symbol runCupsAclDialog (symbol type) ``{
	string pth = type == `root ? "/" : type == `admin ? "/admin" : type == `printers ? "/printers" : "/classes";
	boolean show_ignore = type != `root && type != `admin;
	term contents = `HBox (
	    `HSpacing (2),
	    `VBox (
		`VSpacing (1),
		// frame
		`Frame (_("Application order"),
                `RadioButtonGroup (`id (`order), `HBox (
		    // radio button
                    `RadioButton (`id (`ad), `opt (`hstretch), _("A&llow, Deny")),
		    // radio button
                    `RadioButton (`id (`da), `opt (`hstretch), _("&Deny, Allow"))
                ))),
		`VSpacing (1),
		// selection box label
                `ReplacePoint (`id (`replace_acl), `SelectionBox (`id (`acl), _("&Permissions"))),
		`VSpacing (1),
                `HBox (
                    `PushButton (`id (`add), `opt (`key_F3), AddButtonLabel ()),
                    `PushButton (`id (`edit), `opt (`key_F4), EditButtonLabel ()),
                    `PushButton (`id (`del), `opt (`key_F5), DeleteButtonLabel ())
                ),
		show_ignore ? `VSpacing (1) : `VSpacing (0),
		// push button
		show_ignore ? `PushButton (`id (`ignore), sformat (_("Use inherited permissions"))) : `VSpacing (0),
		`VSpacing (1)
	    ),
	    `HSpacing (2)
	);

	// dialog caption
        Wizard::SetContentsButtons (sformat (_("CUPS permissions settings for %1"), pth), contents, getCupsAclHelp (show_ignore), BackButtonLabel (), NextButtonLabel ());
	map settings = lookup (Printer::cups_server_settings, pth, $[]);
	if (lookup (settings, "Order", "Deny,Allow") == "Allow,Deny")
	    UI::ChangeWidget (`id (`ad), `Value, true);
	else
	    UI::ChangeWidget (`id (`da), `Value, true);
	list cont = union (maplist (`e, lookup (settings, "AllowFrom", []), ``{return `i (`allow, e);}),
			maplist (`e, lookup (settings, "DenyFrom", []), ``{return `i (`deny, e);}));
	// selectionbox label
	UI::ReplaceWidget (`id (`replace_acl), `SelectionBox (`id (`acl), _("&Permissions"),
	   // listbox entry, %1 is IP address
	   maplist (`e, cont, ``(`item (`id (e), select (e, 0, nil) == `allow ? sformat (_("Allow From %1"), select (e, 1, ""))
		// listbox entry, %1 is IP address
		: sformat (_("Deny From %1"), select (e, 1, "")))))));
        symbol ret = nil;
        while (true)
        {
            ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
            if (`abort == ret)
	    {
                if (reallyAbort ())
                    break;
	    }
            else if (`back == ret)
                break;
            else if (`next == ret)
            {
                break;
            }
	    else if (`ignore == ret)
	    {
		break;
	    }
	    else if (`add == ret)
            {
		// popup request
                UI::OpenDialog (ipAddrPopup (true, _("Enter &IP address"), "", `allow));
                symbol r = nil;
                while (nil == r)
                    r = UI::UserInput ();
                string ad = UI::QueryWidget (`id (`ad), `Value);
		symbol acc = UI::QueryWidget (`id (`type), `CurrentButton) == `allow ? `allow : `deny;
                UI::CloseDialog ();
                if (r != `ok)
                    continue;
                if (ad != "")
		{
                    cont = toset (add (cont, `i (acc, ad)));
		}
		// selectionbox label
		UI::ReplaceWidget (`id (`replace_acl), `SelectionBox (`id (`acl), _("&Permissions"),
		    // listbox entry, %1 is IP address
	            maplist (`e, cont, ``(`item (`id (e), select (e, 0, nil) == `allow ? sformat (_("Allow From %1"), select (e, 1, ""))
			// listbox entry, %1 is IP address
			: sformat (_("Deny From %1"), select (e, 1, "")))))));
	    }
	    else if (`edit == ret)
            {
		term item =  UI::QueryWidget (`id (`acl), `CurrentItem);
		symbol acc = select (item, 0, nil);
		string ad = select (item, 1, "");

		// popup request
                UI::OpenDialog (ipAddrPopup (true, _("Enter &IP address"), ad, acc));
                symbol r = nil;
                while (nil == r)
                    r = UI::UserInput ();
                ad = UI::QueryWidget (`id (`ad), `Value);
                acc = UI::QueryWidget (`id (`type), `CurrentButton) == `allow ? `allow : `deny;
                UI::CloseDialog ();
                if (r != `ok)
                    continue;
                if (ad != "")
                {
		    cont = DeleteItem (cont, item);
                    cont = toset (add (cont, `i (acc, ad)));
                }
		// selectionbox label
                UI::ReplaceWidget (`id (`replace_acl), `SelectionBox (`id (`acl), _("&Permissions"),
		    // listbox entry, %1 is IP address
                    maplist (`e, cont, ``(`item (`id (e), select (e, 0, nil) == `allow ? sformat (_("Allow From %1"), select (e, 1, ""))
			// listbox entry, %1 is IP address
                        : sformat (_("Deny From %1"), select (e, 1, "")))))));
            }
	    else if (`del == ret)
	    {
		cont = DeleteItem (cont, UI::QueryWidget (`id (`acl), `CurrentItem));
		// selectionbox label
                UI::ReplaceWidget (`id (`replace_acl), `SelectionBox (`id (`acl), _("&Permissions"),
		    // listbox entry, %1 is IP address
                    maplist (`e, cont, ``(`item (`id (e), select (e, 0, nil) == `allow ? sformat (_("Allow From %1"), select (e, 1, ""))
			// listbox entry, %1 is IP address
                        : sformat (_("Deny From %1"), select (e, 1, "")))))));
	    }
        }
	settings = add(settings, "Order", UI::QueryWidget (`id (`order), `CurrentButton) == `ad ? "Allow,Deny" : "Deny,Allow");
	list allow = filter (`z, maplist (`x, filter (`e, cont, ``(select (e, 0, nil) == `allow)), ``{return select (x, 1, nil);}), ``(z != ""));
	list deny = filter (`z, maplist (`x, filter (`e, cont, ``(select (e, 0, nil) == `deny)), ``{return select (x, 1, nil);}), ``(z != ""));
	settings = add (settings, "AllowFrom", allow);
	settings = add (settings, "DenyFrom", deny);
	if (`next == ret)
	{
	    Printer::cups_server_settings = add (Printer::cups_server_settings, pth, settings);
	}
	else if (`ignore == ret)
	{
	    Printer::cups_server_settings = add (Printer::cups_server_settings, pth, $[]);
	    ret = `next;
	}
        return ret;
    }
    /**
     * CUPS server settings dialog
     * @return symbol `next or `back
     */
    global define symbol runCupsServerDialog () ``{
	if (Printer::cups_server_settings == $[])
	    readCupsSettings ();
	term contents = `HBox (`HSpacing (2), `VBox (
	    `VSpacing (1),
	    // frame
	    `Frame (_("Browsing settings"), `VBox (
		`HBox (`HSpacing (3), `RadioButtonGroup (`id (`browsing), `HBox (
		    // label
		    `Label (_("Browsing")),
		    // radiobutton
		    `RadioButton (`id (`on), _("On")),
		    // radiobutton
		    `RadioButton (`id (`off), _("Off"))
		)),
		`HSpacing (3)),
		`VSpacing (1),
		// selectionbox label
		`HBox (`HSpacing (3), `ReplacePoint (`id( `replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"))), `HSpacing (3)),
		`HBox (
		    `PushButton (`id (`add), `opt (`key_F3), AddButtonLabel ()),
		    `PushButton (`id (`edit), `opt (`key_F4), EditButtonLabel ()),
		    `PushButton (`id (`del), `opt (`key_F5), DeleteButtonLabel ())
		)
	    )),
	    `VSpacing (1),
	    // frame
	    `Frame (_("Access settings"), `VBox (
		`RadioButtonGroup (`id (`loc), `VBox (
		    `HBox (
			`RadioButton (`id (`root), `opt (`hstretch), "/ (r&oot)", true),
			`RadioButton (`id (`admin), `opt (`hstretch), "/ad&min")
		    ),
		    `HBox (
			`RadioButton (`id (`printers), `opt (`hstretch), "/&printers"),
			`RadioButton (`id (`classes), `opt (`hstretch), "/&classes")
		    )
		)),
		// pushbutton
		`PushButton (`id (`change), _("Change p&ermissions"))
	    )),
	    `VSpacing (1)
	), `HSpacing (2));

	// dialog caption
	Wizard::SetContentsButtons (_("CUPS server settings"), contents, getCupsServerHelp (), BackButtonLabel (), NextButtonLabel ());

	list addresses = lookup (Printer::cups_server_settings, "BrowseAddress", []);

	UI::ChangeWidget (`id (`browsing), `CurrentButton, lookup (Printer::cups_server_settings, "Browsing", "Off") == "On" ? `on : `off);
	// selectionbox
	UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));

	symbol ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	    if (`abort == ret)
	    {
		if (reallyAbort ())
		    break;
	    }
	    else if (`back == ret)
		break;
	    else if (`change == ret)
	    {
		ret = UI::QueryWidget (`id (`loc), `CurrentButton);
		break;
	    }
	    else if (`add == ret)
	    {
		// popup request
		UI::OpenDialog (ipAddrPopup (false, _("Enter &IP address"), "", nil));
		symbol r = nil;
		while (nil == r)
		    r = UI::UserInput ();
		string ad = UI::QueryWidget (`id (`ad), `Value);
		UI::CloseDialog ();
		if (r != `ok)
		    continue;
		if (ad != "")
		    addresses = toset (add (addresses, ad));
		// selectionbox label
		UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));
	    }
	    else if (`del == ret)
	    {
                addresses = DeleteItem (addresses, UI::QueryWidget (`id (`addr), `CurrentItem));
		// selectionbox label
		UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));
	    }
	    else if (`edit == ret)
	    {
		if (UI::QueryWidget (`id (`addr), `CurrentItem) == nil)
		    continue;
		// popup request
		UI::OpenDialog (ipAddrPopup (false, _("Enter &IP address"), UI::QueryWidget (`id (`addr), `CurrentItem), nil));
                symbol r = nil;
                while (nil == r)
                    r = UI::UserInput ();
                string ad = UI::QueryWidget (`id (`ad), `Value);
                UI::CloseDialog ();
                if (r != `ok)
                    continue;
                if (ad != "")
		{
		    addresses = DeleteItem (addresses, UI::QueryWidget (`id (`addr), `CurrentItem));
                    addresses = toset (add (addresses, ad));
		}
		// selectionbox label
                UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));

	    }
	    if (`next == ret)
	    {
		break;
	    }
	}
	if (ret == `next)
	    Printer::cups_server_settings = add(Printer::cups_server_settings, "Browsing", UI::QueryWidget (`id (`browsing), `CurrentButton) == `on ? "On" : "Off");
	    Printer::cups_server_settings = add(Printer::cups_server_settings, "BrowseAddress", addresses);
	return ret;
    }
}
