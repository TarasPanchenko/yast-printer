/**
 * File:
 *  dialogs.ycp
 * Module:
 *  Printer configurator
 * Summary:
 *  Main dialogs.
 * Authors:
 *  Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 * Main dialogs.
 */
{
    textdomain "printer";


    import "CUPS";
    import "Label";
    import "Mode";
    import "Popup";
    import "Printer";
    import "Printerdb";
    import "Printerlib";
    import "PrinterTest";
    import "Report";
    import "Spooler";
    import "Stage";
    import "Wizard";
//    import "Wizard_hw";
    import "CWMTab";
    import "DialogTree";
    import "CWM";
    import "IP";

    include "printer/helps.ycp";
    include "printer/misc.ycp";

    string initial_tab = "overview";
    /**
      * Read settings dialog
      * @return `abort if aborted and `next otherwise
      */
    define symbol ReadDialog() ``{
	Wizard::RestoreHelp (getInitProgressHelp ());
	boolean ret = Printer::Read();
	return ret ? `next : `abort;
    }

    /**
      * Write settings dialog
      * @return `abort if aborted and `next otherwise
      */
    define symbol WriteDialog() ``{
//	Printer::validateShared();
	Wizard::RestoreHelp (getWriteProgressHelp ());
	boolean ret = Printer::Write();
	return ret ? `next : `abort;
    }

    /**
     * Ask about the manufacuturer and the model of the printer.
     * Uses global printer
     * @return symbol `back, `next, `abort
     */
    define symbol ManufModelPopup () ``{
	y2milestone ("Manuf/model dialog started for %1", Printer::printer);
	Printerdb::InstallDrivers ();
	map ppd_info = Printer::printer["ppd_info"]:$[];
	string manuf_db = ppd_info["manufacturer_db"]:"";
	string model_db = ppd_info["model_db"]:"";
	if (manuf_db == "") manuf_db = Printer::printer["detected", "vendor_db"]:"";
	if (model_db == "") model_db = Printer::printer["detected", "device_db"]:"";
	Printerdb::loadFoomaticIfNeeded ();

        // selection box label
	term manufsel = `SelectionBox (`id (`manufsel), `opt (`notify, `immediate),
	    // selection boc title
	    _("Manufacturer"),
	    maplist (string k, map v, Printerdb::foomatic, ``(
		`item (`id (k), v[`label]:k))));

	list model_val = [];
	term modelsel = nil;
	term contents = `VBox (`HBox ( manufsel,
	    `ReplacePoint (`id (`modelsel_rep), `HSpacing ())),
		`HBox(
			`HSpacing(),
			`PushButton(`id(`cancel), Label::CancelButton()),
			`PushButton(`id(`next), Label::OKButton())),
			`HSpacing()
	    );
	// dialog box label
	Wizard::SetContentsButtons (_("Printer Model"),
	    contents, getManufModelHelp (), Label::CancelButton (),
	    Label::OKButton ());
	Wizard::RestoreAbortButton ();
	Wizard::RestoreBackButton ();

	if (manuf_db == "" || manuf_db == nil)
	{
	    foreach (string k, map v, Printerdb::foomatic, ``{
		if (manuf_db == "" || manuf_db == nil) manuf_db = k;
	    });
	}
	UI::ChangeWidget (`id (`manufsel), `CurrentItem, manuf_db);
	symbol ret = `manufsel;
	while (`abort != ret && `back != ret && ret != `next && ret != `specifyppd && ret != `downloadppd)
	{
	    if (ret == `manufsel)
	    {
		y2debug ("Manuf: %1, W: %2", manuf_db,
		    UI::QueryWidget (`id (`manufsel), `CurrentItem));
		if (manuf_db
			!= UI::QueryWidget (`id (`manufsel), `CurrentItem))
		{
		    y2debug ("Setting manuf_db");
		    manuf_db = (string)
			UI::QueryWidget (`id (`manufsel), `CurrentItem);
		    model_db = "";
		}
		map<string,string> modelsmap = mapmap (string kk, map vv,
		    (map<string,map>)filter (any k, any v,
			Printerdb::foomatic[manuf_db]:$[],
			``(is (k, string) && is (v, map))),
		    ``($[kk: vv[`label]:kk]));
		list<term> modelsel_items = sortitems (modelsmap);
		modelsel = `SelectionBox (`id (`modelsel), `opt (`notify,
		    `immediate),
		    // selection box caption
		    _("&Model"),
		    modelsel_items);
		UI::ReplaceWidget (`id (`modelsel_rep), modelsel);
		if (! haskey (Printerdb::foomatic[manuf_db]:$[], model_db))
		{

		 while(size(model_db)>0){
		  foreach (any k, any v, Printerdb::foomatic[manuf_db]:$[],``{
		   if (is(k, string) && issubstring((string)k, model_db)){ 
			y2milestone("matched %1", k);
			model_db=tostring(k);
			break;
		    }
		  });
		  if (haskey (Printerdb::foomatic[manuf_db]:$[], model_db)) break;
		  model_db=substring(model_db,0,size(model_db)-1);
		 }

		    foreach (any k, any v, Printerdb::foomatic[manuf_db]:$[],``{
			if ((model_db == "" || model_db == nil)
			    && is (k, string) && k != "" && k != nil)
			{
			    model_db = (string)k;
			}
		    });

		}
		if (model_db != "")
		    UI::ChangeWidget (`id (`modelsel), `CurrentItem, model_db);
		ret = `modelsel;
	    }
	    if (`modelsel == ret)
	    {
		model_db = (string)
		    UI::QueryWidget (`id (`modelsel), `CurrentItem);
		y2debug ("modelsel changed to %1", model_db);
	    }
	    ret = (symbol)UI::UserInput ();
	    if (ret == `cancel) break;
	    if (ret == `next && (model_db == "" || model_db == nil))
	    {
		// popup
		Popup::Message (_("Select a printer model."));
		UI::SetFocus (`id (`modelsel));
		ret = nil;
	    }
	    else if (ret == `next && size (filter (any k, any v,
		Printerdb::foomatic[manuf_db, model_db]:$[],
		``(is (k, string)))) <= 0)
	    {
		// message popup
		string old_text = _("No PPD file is available for the selected model.");

		// richtext - information about support status
		// %1 is URL
		// %2 is URL
		string unsup_message = _("This printer is not supported by &product;.
Find information regarding supported and unsupported printers
in your product documentation.<br>
If the printer can be switched to support a standard
printer language (PostScript, PCL, or ESC/P), it can be
configured as that type of printer.
Ask the vendor of the printer whether this model
understands a standard printer language directly (not
through a driver emulation) and how to switch the printer
into the standard printer language mode, for example, 
using an additional PostScript module.");
		term d = `VBox (
		    `HSpacing (60),
		    `HBox (
			`RichText (unsup_message),
			`VSpacing (15)
		    ),
		    `PushButton (`id (`ok), Label::OKButton ())
                );
		UI::OpenDialog (d);
		UI::UserInput ();
		UI::CloseDialog ();
		ret = nil;
	    }
	}
	if (ret == `next || ret == `select_ppd)
	{
	    string ppd_file = Printerdb::getAutoPpdFile (manuf_db, model_db);

	    if (ppd_file == nil) ppd_file = "";

	    ppd_file = (string)SCR::Read (.ppd.file.open, [ppd_file, SCR::Read (.target.tmpdir)]);

	    Printer::printer = (map<string,any>)union (Printer::printer, $[
		"ppd" : ppd_file,
		"ppd_info" : Printerdb::PpdInfo (ppd_file),
	    ]);
	    if ( ret==`next && Printer::printer["auto_propose"]:false ) ret = `next_propose_queues;

	map ppd_options = Printer::printer["ppd_options"]:$[];

       if (ppd_options == $[]) {
               string ps = Printer::getPaperSize();
               ppd_options = $["PageSize":ps,
                "PageRegion":ps,
                "ImageableArea":ps,
                "PaperDimension":ps];
              }
       Printer::printer["ppd_options"]=ppd_options;



	}
	y2milestone ("Returning %1, printer set to %2", ret, Printer::printer);
return nil;
	return ret;
    }

/**
 * Run dialog
 * @return symbol `back, `next, `abort
 */
 define symbol runDownloadPpdFile () ``{
  term contents = `HBox (`HStretch (),
	    `VBox (
		`VStretch (),
		// text entry label
		`TextEntry (`id (`url), _("&URL"), "ftp://"),
		`VSpacing (2),
		`HBox (
		    // text entry label
		    `TextEntry (`id (`user), _("&Username"), ""),
		    `HSpacing (2),
		    // password text entry label
		    `Password (`id (`pass), Label::Password (), "")
		),
		`VStretch ()
	    ), `HStretch ()
	);
	// dialog caption
	Wizard::SetContents (_("Download a PPD File"), contents,
	    downloadHelp(), true, true);

	symbol ret = nil;

	while (ret == nil)
	{
	    ret = (symbol)UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `next)
	    {
		string url = (string)UI::QueryWidget (`id (`url), `Value);
		string user = (string)UI::QueryWidget (`id (`user), `Value);
		string pass = (string)UI::QueryWidget (`id (`pass), `Value);
		list url_parts = splitstring (url, "/");
		string file = url_parts[size (url_parts) - 1]:"ppd.ppd";
		string dir = (string)SCR::Read (.target.tmpdir) + "/ppd_files";
		y2milestone ("Working dir: %1", dir);
		SCR::Execute (.target.bash, sformat (
		    "test -d %1 || mkdir -p %1", dir));
		SCR::Execute (.target.bash, sformat (
		    "/bin/rm %1/*", dir));
		file = dir + "/" + file;
		if (user != "" && pass != "")
		{
		    string userpass = sformat ("%1:%2", user, pass);
		    SCR::Execute(.curl.setUserPassword, userpass, $[]);
		}
		else if (user != "")
		{
		    // error report
		    Report::Error (_("Set the password."));
		    ret = nil;
		    continue;
		}
		SCR::Execute (.target.bash, sformat (
		    "/bin/rm %1/*", dir));
		// label of popup informing about processed operation
		UI::OpenDialog (`VBox (`Label (_("Downloading file..."))));
		y2milestone ("Downloading from %1 to %2", url, file);
		map response = (map)SCR::Execute (.curl.get, url,
		    $["output": file]);
		UI::CloseDialog ();
		y2milestone ("Get file response: %1", response);
		if (response["dsize"]:0 == 0)
		{
		    Report::Error (
// error report
_("An error occurred while downloading the PPD file.
Verify the URL, 
username, and password."));
		    ret = nil;
		    continue;
		}
		if (! Printerdb::processPpdFiles (dir))
		{
		    ret = nil;
		    continue;
		}
            }
	}
	return ret;
    }

    /**
     * Run dialog
     * @return symbol `back, `next, `abort
     */
    define symbol runInstalledPrinterDialog () ``{
	y2milestone ("running installed printers dialog");
	list<map> printers = getConfiguredPrinters ();
	list items = [];

	integer counter = -1;
	list sel_items= maplist (map p, printers, ``{
	    counter = counter + 1;
	    map ppd_info = p["ppd_info"]:$[];
	    string manuf = ppd_info["manufacturer"]:"";
	    string model = ppd_info["model"]:"";
	    string uri = p["uri"]:"";
	    uri = Printerlib::getUriNiceName (uri);

	    // eg. Epson Stylus Photo 810, Parallel printer on /dev/lp0
	    return `item (`id (counter), sformat (_("%1 %2, %3"),
		manuf, model, uri));
	});

	term contents = `HBox (`HSpacing (2), `VBox (
	    `VSpacing (2),
		// selection box label
	    `SelectionBox (`id (`printers), `opt (`hstretch), _("Printer"), sel_items),
	    `VSpacing (2)
	), `HSpacing (2));

	// dialog box label
        Wizard::SetContentsButtons (_("Printers"), contents, getPrintersHelp (), Label::BackButton (), Label::NextButton ());
	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();
	UI::ChangeWidget (`id (`printers), `CurrentItem, 0);
	symbol ret = (symbol)UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;

	while (true)
	{
            if (`abort == ret || `cancel == ret)
            {
                ret = reallyAbort () ? `abort : `cont;
                if (ret == `abort) break;
            }
	    else if (`back == ret)
	    {
		break;
	    }
	    else if (`next == ret)
	    {
		integer ind = (integer)
		    UI::QueryWidget (`id (`printers), `CurrentItem);
		Printer::printer = (map<string,any>)(eval (printers[ind]:$[]));
		y2milestone ("Selected printer %1", Printer::printer);
		Printer::index = -1;
		map ppd_info = Printer::printer["ppd_info"]:$[];
		Printer::printer["name"] = Printer::generateQueueName (
		    Printer::printer["name"]:"",
		    Printer::printer["uri"]:"",
                    ppd_info["manufacturer"]:"",
                    ppd_info["model"]:"",
		    Printer::getForbiddenNames ());
		if (SCR::Read (.target.size, Printer::printer["ppd"]:"") != -1)
		{
		    Printer::printer["ppd"] = SCR::Read (.ppd.file.open,
			[Printer::printer["ppd"]:"",
			    SCR::Read (.target.tmpdir)]);
		}
		break;
	    }
	    ret = (symbol)UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	}
	return ret;
    }

    /**
     * Dialog for choosing configuration.
     * @param all_ppds boolean if true all PPD files for all models are shown
     * @return symbol for wizard sequencer
     */
    define symbol runPpdSelectDialog (boolean all_ppds) ``{
	y2milestone ("Running PPD file select dialog for %1", Printer::printer);
	Printerdb::InstallDrivers ();
	map ppd_info = Printer::printer["ppd_info"]:$[];
	string manuf_db = ppd_info["manufacturer_db"]:"";
	string model_db = ppd_info["model_db"]:"";
	string nick = ppd_info["nick"]:"";
	string lang = ppd_info["language"]:"";
	string file = Printerdb::getFileFromNickName (
	    manuf_db,
	    model_db,
	    nick,
	    lang);
	string orig_file = file;

	map info = $[];
	list cfgs = [];
	y2milestone ("Vendor: %1, Model: %2", manuf_db, model_db);
	if (! (all_ppds || (manuf_db != "" && model_db != "")))
	{
	    // message popup
	    Popup::Message (_("Cannot determine the model of the printer.
Select the model."));
	    return `back;
	}
	Printerdb::loadFoomaticIfNeeded ();

	map<string,map<string,string> > all_ppds_list = $[];

	if (all_ppds)
	{
	    list<map<string,string> > ppds = Printerdb::ListAllPpds ();
	    all_ppds_list = listmap (map<string,string> m, ppds, {
		string filename = m["filename"]:"";
		string id = filename;
		string man_db = m["vendor_db"]:"";
		string mod_db = m["device_db"]:"";
		string label = GetPpdFileDescription (
		    Printerdb::foomatic[man_db, mod_db,
			filename, "nickname"]:"",
		    Printerdb::foomatic[man_db, mod_db,
			filename, "language"]:"",
		    filename
		);
		string tllabel = tolower (label);
		return $[tllabel : $["id" : id, "label" : label ]];
	    });
	    cfgs = maplist (string tllabel, map<string,string> info,
		all_ppds_list,
	    {
		string label = info["label"]:"";
		string id= info["id"]:"";
		return `item (`id (id), label);
	    });
	}
	else
	{
	  list<string> ppds = Printerdb::sortPpds (manuf_db, model_db);
	  foreach (string k, ppds, ``{
	    y2debug ("V: %1, M: %2, K: %3", manuf_db, model_db, k);

	    string filename = k;
	    string label = GetPpdFileDescription (
		Printerdb::foomatic[manuf_db, model_db, filename, "nickname"]:"",
		Printerdb::foomatic[manuf_db, model_db, filename, "language"]:"", filename
	    );
	    cfgs = add (cfgs, `item (`id (k), label));
	  });
	}

	map<string,map<string,string> > displayed_ppds_list = all_ppds_list;

	term filter_box = `VBox ();
	if (all_ppds)
	{
	    filter_box = `VBox (
		`HBox (
		    // push button
		    `TextEntry (`id (`filter_str), _("&Filter")),
		    `VBox (
			`Label (" "),
			`HBox (
			    // push button
			    `PushButton (`id (`filter), _("&Apply")),
			    // push button
			    `PushButton (`id (`clear_filter), _("&Clear"))
			)
		    )
		),
		`VSpacing (1)
	    );
	}

	term contents = `HBox (
	    `HSpacing (1),
	    `VBox (
		    `VSpacing (1),
		    filter_box,
		    `ReplacePoint (`id (`selection_rp),
			// selection box label
			`SelectionBox (`id (`selection), `opt (`hstretch), _("&PPD File"), cfgs)
		    ),
		    `VSpacing (1),
		    `HBox (
			`HStretch (),
			all_ppds
			    // push button
			    ? `PushButton (`id (`select_model), _("Select &Model"))
			    : `HSpacing (0)
		    ),
		    `VSpacing (1)
		),
	    `HSpacing (1)
	);
	// dialog box label
	string caption = _("PPD Files");
	Wizard::SetContentsButtons (caption, contents, getPpdSelectHelp (all_ppds), Label::BackButton (), all_ppds ? Label::NextButton () : Label::OKButton ());

//	UI::ChangeWidget(`test, `Enabled, Printer::printer["raw"]:false);

	if (file != "" && file != nil)
	{
	    UI::ChangeWidget (`id (`selection), `CurrentItem, file);
	}
	else
	{
            {
		term item = (term) (cfgs[0]:nil);
		if (nil != item)
		{
		    file = item[0, 0]:"";
		}
            }
	    if (file != "" && file != nil)
	    {
		UI::ChangeWidget (`id (`selection), `CurrentItem, file);
	    }
	}

	any ret = `config;
	string ppd_file = "";
	while (`abort != ret && ret != `back && ret != `next && `advanced != ret && `select_model != ret)
	{
	    if (ret == `filter)
	    {
		string f = (string)UI::QueryWidget (`id (`filter_str), `Value);
		if (f == "")
		{
		    ret = `clear_filter;
		}
		else
		{
		    f = tolower (f);
		    displayed_ppds_list = filter (string k,
			map<string,string> v, all_ppds_list,
		    {
			return issubstring (k, f);
		    });
		}
	    }
	    if (ret == `clear_filter)
	    {
		displayed_ppds_list = all_ppds_list;
		UI::ChangeWidget (`id (`filter_str), `Value, "");
	    }
	    if (ret == `filter || ret == `clear_filter)
	    {
		cfgs = maplist (string tllabel, map<string,string> info,
		    displayed_ppds_list,
		{
		    string label = info["label"]:"";
		    string id= info["id"]:"";
		    return `item (`id (id), label);
		});
		UI::ReplaceWidget (`selection_rp,
		    `SelectionBox (`id (`selection), `opt (`hstretch), _("&PPD File"), cfgs));

	    }
	    if (`info == ret)
	    {
		string i
		    // contents of a rich text field in information popup
		    = info["comment"]:_("<P>No information available.</P>");
		// popup header
		Popup::LongText (_("Configuration Information"), `RichText (i), 50, 18);
	    }
	    if (`abort == ret)
	    {
		ret = reallyAbort () ? `abort : nil;
	    }
	    ret = UI::UserInput ();
            if (ret == `cancel) ret = `abort;
	}

	if (ret == `advanced || ret == `next)
	{
	    file = (string)UI::QueryWidget (`id (`selection), `CurrentItem);
	    if (orig_file != file)
	    {
		Printer::printer["options"] = $[];
		string filename = (string)SCR::Read (.ppd.file.open,
		    [file, SCR::Read (.target.tmpdir)]);

		if (SCR::Read (.target.size, Printer::printer["ppd"]:"") != -1)
		    SCR::Execute (.target.remove, Printer::printer["ppd"]:"");
		Printer::printer["ppd"] = filename;
		Printer::printer["ppd_info"] = Printerdb::PpdInfo (filename);
	    }
	    // add comment
	    if (Printer::printer["info"]:"" == "") Printer::printer["info"] = Printerdb::foomatic[manuf_db, model_db, file, "nickname"]:"";
	}
	return (symbol)ret;
    }

    /**
     * Configuration of printer names.
     * @param allow_auto boolean true if should be allowed to omit printer name
     * @return symbol for wizard seq.
     */
    define symbol runNameDialog (boolean allow_auto) ``{
	y2milestone ("Running name dialog for %1", Printer::printer);
	list<string> forbidden_names = Printer::getForbiddenNames ();
	string name = Printer::printer["name"]:"";
	string old_name = name;
	string info = Printer::printer["info"]:"";
	string loc = Printer::printer["location"]:"";
	string uri = Printer::printer["uri"]:"";
	string uri_type = URL::Parse(uri)["scheme"]:"";
	boolean raw = (boolean) (Printer::printer["raw"]:nil);
	boolean shared = (boolean)Printer::printer["shared"]:true;

	if (raw == nil)
	{
	    if (uri_type == "lpd" || uri_type == "ipp")
	    {
		raw = Printer::printer["proposed_raw"]:true;
	    }
	    else
	    {
		raw = false;
	    }
	}
	boolean ff = Printer::printer["ff"]:false;
	boolean is_class = uri_type == "class";
	boolean auto_propose = Printer::printer["auto_propose"]:false;

	if (allow_auto)
	    allow_auto = ! is_class;

	if (-1 != Printer::index)
	{
	    // remove me from forbidden names
	    forbidden_names = filter (string i, forbidden_names, ``(i != name));
	}

	if (is_class)
	{
	    if (Printer::printer["options"]:$[] == $[])
		Printer::printer["options"] = $["job-sheets": "none,none"];
	}

	term raw_insert = is_class
	    ? `VSpacing (0)
	    : `CheckBox (`id (`raw), `opt (`notify, `hstretch),
		// checkbox
		_("Do Local &Filtering"), ! raw);

	term ff_insert = "cups" == Spooler::Get () ? `VSpacing (0) :
	    `CheckBox (`id (`ff), `opt (`hstretch),
		// check box
		_("Print &Form Feed between Jobs"), ff);


	term contents = `VBox (
	    `TextEntry (`id (`name), `opt (`hstretch),
		// text entry
		_("Name for &Printing"), name),
	    `VSpacing (0.5),
	    `TextEntry (`id (`info), `opt (`hstretch), is_class
		// text entry
		? _("Class &Description")
		// text entry
		: _("Printer &Description"), info),
	    `TextEntry (`id (`loc), `opt (`hstretch), is_class
		// text entry
		? _("&Class Location")
		// text entry
		: _("Printer &Location"), loc),
	    `Left(`CheckBox(`id(`shared), _("Share Printer"), shared)),
	    `VSpacing (0.5),
	    raw_insert,
	    ff_insert,
	    `VSpacing (allow_auto ? 0.5 : 0)
	);
	contents = `HBox (`HSpacing (4),
	    `VBox (
		// frame label
		`Frame (_("Queue Name and Spooler Settings"), contents),
		`VSpacing (is_class ? 0 : 1),
		     `VSpacing (0)
	    ), `HSpacing (4));

	// dialog box label
	Wizard::SetContentsButtons (
		// dialog caption
		is_class ? _("Class Name") : _("Queue Name"),
		contents,
		getSpoolInfoHelp (is_class),
		Label::BackButton (),
		Label::NextButton ()
		);
	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();
	UI::ChangeWidget (`id (`name), `ValidChars, "-_0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
	// disable test printing when local filtering (#186597)
//	UI::ChangeWidget(`test, `Enabled, raw);

	if (name == "")
	{
	    if (is_class)
		name = Printer::generateClassName (forbidden_names);
	    else
		name = Printer::generateQueueName (nil, uri,
		    Printer::printer["detected", "vendor"]:"",
		    Printer::printer["detected", "device"]:"",
		    forbidden_names);
	    UI::ChangeWidget (`id (`name), `Value, name);
	}

	any ret = nil;
	string fwd = "";
	repeat {
	    ret = UI::UserInput ();
	    switch ((symbol)ret)
	     {
	      case `auto :
		auto_propose = (boolean)UI::QueryWidget (`id (`auto), `Value);
		if (auto_propose)
		{
		    name = (string)UI::QueryWidget (`id (`name), `Value);
		    info = (string)UI::QueryWidget (`id (`info), `Value);
		    UI::ChangeWidget (`id (`name), `Enabled, false);
		    UI::ChangeWidget (`id (`name), `Value, "");
		    UI::ChangeWidget (`id (`info), `Enabled, false);
		    UI::ChangeWidget (`id (`info), `Value, "");
		    if (! is_class)
		    {
			raw = ! (boolean)UI::QueryWidget (`id (`raw), `Value);
			UI::ChangeWidget (`id (`raw), `Enabled, false);
			UI::ChangeWidget (`id (`raw), `Value, true);
//			UI::ChangeWidget (`id (`test), `Enabled, false);
		    }
		    if (Spooler::Get () != "cups")
		    {
			ff = (boolean)UI::QueryWidget (`id (`ff), `Value);
			UI::ChangeWidget (`id (`ff), `Enabled, false);
			UI::ChangeWidget (`id (`ff), `Value, false);
		    }
		}
		else
		{
		    UI::ChangeWidget (`id (`name), `Enabled, true);
		    UI::ChangeWidget (`id (`name), `Value, name);
		    UI::ChangeWidget (`id (`info), `Enabled, true);
		    UI::ChangeWidget (`id (`info), `Value, info);
		    if (! is_class)
		    {
			UI::ChangeWidget (`id (`raw), `Enabled, true);
			UI::ChangeWidget (`id (`raw), `Value, ! raw);
//			UI::ChangeWidget (`id (`test), `Enabled, true);
		    }
		    if (Spooler::Get () != "cups")
		    {
			UI::ChangeWidget (`id (`ff), `Enabled, true);
			UI::ChangeWidget (`id (`ff), `Value, ff);
		    }
		}
		break;
	    case `next:
		if (! is_class)
		    raw = ! (boolean)UI::QueryWidget (`id (`raw), `Value);
		if (Spooler::Get () != "cups")
		    ff = (boolean)UI::QueryWidget (`id (`ff), `Value);
		name = (string)UI::QueryWidget (`id (`name), `Value);
		info = (string)UI::QueryWidget (`id (`info), `Value);
		loc = (string)UI::QueryWidget (`id (`loc), `Value);
		shared = (boolean)UI::QueryWidget (`id (`shared), `Value);
//		if (allow_auto)
//		{
//		    auto_propose = (boolean) UI::QueryWidget (`id (`auto), `Value);
//		}
		if (/*auto_propose || */CheckLocalQueueName (name, forbidden_names))
		{
		    break;
		}
		ret = nil;
	    break;
	    case `abort :
	    case `cancel:
		ret = reallyAbort () ? `abort : nil;
		break;
	// disable test printing when local filtering (#186597)
	case `raw :
//		UI::ChangeWidget(`test, `Enabled, !(boolean)UI::QueryWidget(`raw, `Value));
		break;
	  }
	} until (`abort == ret || ret == `back || ret == `next);

	if (ret == `next)
	{
	    Printer::printer["name"] = name;
	    Printer::printer["raw"] = raw;
	    Printer::printer["ff"] = ff;
	    Printer::printer["info"] = info;
	    Printer::printer["location"] = loc;
	    Printer::printer["auto_propose"] = auto_propose;
	    Printer::printer["shared"] = shared;
	    if (raw)
	    {
		ret = `raw;
	    }
	    if (is_class)
		ret = `class;

	    if (old_name != "" && old_name != name)
	    {
		Printer::addToDeleted (
		    old_name, is_class ? "class" : "printer");
	    }
	}
	y2milestone ("Returning %1, printer set to %2", ret, Printer::printer);
	return (symbol)ret;
    }
    /**
     * Choose one printer from list of printers
     * @return string selected printer
     */
    define string choosePrinterOrClass () ``{
	list onlyprinters = filter (map e, Printer::printcap,
	    ``(e["uri"]:"class" != "class"));
	list<string> printers =
	    (list<string>)flatten ([
		toset (
		    maplist (map i, filter (
			map e, Printer::printcap, ``(
			    e["uri"]:"class" != "class"
			)
		    ), ``{
			return i["name"]:"";
		    })
		)
	    ]);

	UI::OpenDialog (
		`HBox (
		    `HSpacing (0.7),
		    `VSpacing (16),
		    `VBox (
			`VSpacing (0.5),
			`HSpacing (16),
			// selection box label
			`SelectionBox ( `id (`printers), _("&Printer"), maplist (string i, printers, ``{return `item (`id(i),i);})),
			`HBox (
			    `PushButton (`id (`ok), `opt (`key_F10), Label::OKButton ()),
			    `PushButton (`id (`cancel), `opt (`key_F9), Label::CancelButton ())
			    ),
			`VSpacing (0.3)
			),
		    `HSpacing (0.7)
		    )
		);

	string member = "";
	symbol ret = nil;
	while (true)
	    {
		ret = (symbol)UI::UserInput ();
		if (`ok == ret)
		    {
			member = (string)
			    UI::QueryWidget (`id (`printers), `CurrentItem);
			break;
		    }
		else if (`cancel == ret)
		    {
			break;
		    }
	    }
	UI::CloseDialog ();
	return member;
    }
    /**
     * Members of class
     * @return symbol `next or `back
     */
    define symbol runMembersDialog () ``{
	list<string> printers = (list<string>)toset (Printer::printer["printers"]:[]);
	term contents =
	    `VBox (
		`ReplacePoint (
		    `id (`replace_members),
		    `SelectionBox(
			`id (`printers),
			// selection box label
			_("&Members of This Class"),
			maplist (string i, printers, ``{
			    return `item (`id (i), i);
			})
			)
		    ),
		`HBox(
		    `PushButton(`id(`add), `opt (`key_F3), Label::AddButton ()),
		    `PushButton(`id(`delete), `opt (`key_F5), Label::DeleteButton ())
		    )
		);
	// dialog label
	Wizard::SetContentsButtons (_("Class Members"), contents, getMembersHelp (), Label::BackButton (), Label::NextButton ());

	symbol ret = nil;
	while (true)
	{
	    ret = (symbol)UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (`delete == ret)
		{
		    string member_to_delete = (string)
			UI::QueryWidget (`id (`printers), `CurrentItem);
		    if (nil != member_to_delete)
			{
			    printers = (list<string>)DeleteItem (printers, member_to_delete);
			    UI::ReplaceWidget (
				`id (`replace_members),
				`SelectionBox(
				    `id (`printers),
				    // selection box label
				    _("&Members of This Class"),
				    maplist (string i, printers, ``{
					return `item (`id (i), i);
				    })));
			}
		    else
			{
			    // message box
			    Popup::Message (_("Select the printer to delete."));
			}
		}
	    else if (`add == ret)
		{
		    string member_to_add = choosePrinterOrClass ();
		    if (member_to_add != "")
		    {
			printers = toset (add (printers, member_to_add));
			UI::ReplaceWidget (
			    `id (`replace_members),
			    `SelectionBox(
				`id (`printers),
				// selection box label
				_("&Members of This Class"),
				maplist (string i, printers, ``{
				    return `item (`id (i), i);
				})));
		    }
		}
	    else if (`next == ret)
		{
		    if (0 != size (printers))
			{
			    Printer::printer = add (Printer::printer, "printers", printers);
			    break;
			}
		    else
			{
			    // message box
			    Popup::Message (_("A class must contain at least one printer."));
			}
		}
	    else if (`back == ret)
		{
		    break;
		}
	    else if (`abort == ret)
		{
		    if (reallyAbort ())
			{
			    break;
			}
		}
	}
	return ret;
    }


void storePageSize(string PageSize){
  map sizes = $[];
  foreach(map option, Printerdb::getPpdFileOptions (Printer::printer["ppd"]:"", true), {
   if (option["name"]:""=="PageSize") sizes=option;
  });
 Printer::printer["ppd_options", "PageRegion"] = PageSize;
 Printer::printer["ppd_options", "ImageableArea"] = PageSize;
 Printer::printer["ppd_options", "PaperDimension"] = PageSize;
 Printer::printer["ppd_options", "PageSize"] = PageSize;
}

    /**
     * Configuration of the filter. It is quite complicated because there can
     * be depended options so change of value (lower list) can change content
     * of options (upper list).
     * @return symbol for ws
     */
    define symbol runOptionsDialog () ``{
	if (SCR::Read (.target.size, Printer::printer["ppd"]:"") <= 0)
	{
	    // message popup
	    Report::Message (_("Unknown PPD file. Select the printer model."));
	    return `back;
	}
	string filename = Printer::printer["ppd"]:"";

	y2milestone ("Modifying PPD file %1", filename);

	any vals = nil;

	// dialog caption
	Wizard::SetContentsButtons (_("Configuration Options"), `VBox (
		`VWeight (1, `ReplacePoint (`id (`upper), `VSpacing (1))),
		`VWeight (1, `ReplacePoint (`id (`lower), `VSpacing (1)))
		), getFilterHelp (), Label::CancelButton (),Label::OKButton ());
	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();
	map selected = Printer::printer["options"]:$[];
	map ppd_selected = Printer::printer["ppd_options"]:$[];

	list opts = [];

	// check locales (for printer size) only for new queue, not modified
	boolean checkLocales = true;
//	foreach(map<string, any> row, Printer::printcap, {
//	 if (Printer::printer["name"]:"" == row["name"]:"") checkLocales = false;
//	});
	list<map> optlist = Printerdb::getPpdFileOptions (filename, checkLocales);

	// and now add options without their location in PPD file
	optlist = add (optlist, $[
	    "location" : `lpoptions,
	    "current" : "3",
	    // list item
	    "gui" : _("Orientation"),
	    "name" : "orientation-requested",
	    "type" : "PickOne",
	    "valorder" : ["3", "4", "5", "6"],
	    "values" : $[
		// list item
		"3" : _("Portrait"),
		// list item
		"4" : _("Landscape"),
		// list item
		"5" : _("Reverse"),
		// list item
		"6" : _("Reverse Portrait"),
	    ],
	]);
	optlist = add (optlist, $[
	    "location" : `lpoptions,
	    "current" : "1",
	    // list item
	    "gui" : _("Pages per Sheet"),
	    "name" : "number-up",
	    "type" : "PickOne",
	    "valorder" : ["1", "2", "4"],
	    "values" : $[
		"1" : "1",
		"2" : "2",
		"4" : "4",
	    ],
	]);
	opts = maplist (map i, optlist, ``(
	    `item (`id (i["name"]:""), i["gui"]:"")
	));

	any ret = `opts;
	// selection box label
	UI::ReplaceWidget (`id (`upper), `SelectionBox (`id (`opts), `opt (`notify, `immediate), Label::Options (), opts));
	UI::ChangeWidget (`id (`opts), `CurrentItem,
	    ((map)SCR::Read (.ppd.file.options,[filename, ""]))[
		"data", 0, "name"]:"");

	string option_type = "";
	string option = "";
	symbol option_loc = nil;

	while (`next != ret && `back != ret && `abort != ret)
	{
	    if (`opts == ret)
	    {
		option = (string)UI::QueryWidget (`id (`opts), `CurrentItem);
		string ppd_default = "";
		foreach (map i, optlist, ``{
		    if (i["name"]:"" == option)
		    {
			option_loc = i["location"]:`ppd;
			option_type = i["type"]:"PickOne";
			vals = maplist (string k, i["valorder"]:[], ``(
			    [k, i["values", k]:k]
			));
			ppd_default = i["current"]:"";
			if (ppd_default == "")
			    ppd_default = i["valorder", 0]:"";
		    }
		});
		UI::ReplaceWidget (`id (`lower),
		    getWidgetForOption (option_type, (list)vals));
y2internal("vals %1", vals);
y2internal("ppd_default %1", ppd_default);
		string current = "";
		if (option_loc == `lpoptions)
		    current = selected[option]:"";
		else
		    current = ppd_selected[option]:"";
		if (current == "")
		    current = ppd_default;
y2internal("current %1", current);
y2internal("ppd_selected %1", ppd_selected);
		if (option_type == "Boolean")
		{
		    integer index = -1;
		    find(list l, (list<list>)vals, {
			index = index + 1;
			return current == l[0]:nil;
		    });
		    UI::ChangeWidget (`id (`vals), `CurrentButton, index);
		}
		else if (option_type == "PickMany")
		{
		    if (current == "None")
			current = "";
		    list<string> items = splitstring (current, ",");
		    UI::ChangeWidget (`id (`vals), `SelectedItems, items);
		}
		else
		{
		    UI::ChangeWidget (`id (`vals), `CurrentItem, current);

		}
	    }
	    else if (`vals == ret || is (ret, integer))
	    {
		string current = "";
		if (option_type == "Boolean")
		{
		    list<list> values = (list<list>) vals;
		    integer current_index = (integer)
			UI::QueryWidget (`id (`vals), `CurrentButton);
		    current = (string)values[current_index, 0]:"";
		}
		else if (option_type == "PickMany")
		{
		    current = mergestring (
			(list<string>) UI::QueryWidget (`id (`vals), `SelectedItems),
			","
		    );
		    if (current == "")
			current = "None";
		}
		else
		{
		    current = (string)
			UI::QueryWidget (`id (`vals), `CurrentItem);
		}
		if (option_loc == `lpoptions)
		    selected[option] = current;
		else
		    ppd_selected[option] = current;
	    }
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    else if (ret == `next)
	    {
		y2milestone ("Checking constraints");
		list<map> constraints
		    = (list<map>)SCR::Read (.ppd.file.constraints, filename);
		map options = (map)
		    SCR::Read (.ppd.file.options, [filename, ""]);
		list<map> optlist = options["data"]:[];
		map opt2val = $[];
		map opt2gui = $[];
		map opt2val_gui = $[];
		foreach (map o, optlist, ``{
		    string opt_key = o["name"]:"";
		    string opt_gui = o["gui"]:opt_key;
		    string val_key = ppd_selected[opt_key]:"";
		    if (val_key == "")
		    {
			val_key = o["current"]:"";
		    }
		    if (val_key == "")
		    {
			val_key = o["valorder", 0]:"";
		    }
		    string val_gui = o["values", val_key]:val_key;
		    opt2val[opt_key] = val_key;
		    opt2gui[opt_key] = opt_gui;
		    opt2val_gui[opt_key] = val_gui;
		});
		constraints = maplist (map c, constraints, ``{
		    if (opt2val[c["option1"]:""]:"" == c["value1"]:" "
			&& opt2val[c["option2"]:""]:"" == c["value2"]:" ")
		    {
			y2milestone ("Constraint found between %1 and %2, values %3 and %4",
			    c["option1"]:"", c["option2"]:"",
			    c["value1"]:"", c["value2"]:"");
			return c;
		    }
		    else
		    {
			return nil;
		    }
		});
		constraints = filter (map c, constraints, ``(c != nil));
		if (size (constraints) > 0)
		{
		    y2milestone ("Failed constraints %1", constraints);
		    list<string> constlist = toset (flatten (
			maplist (map c, constraints, ``(
			    [c["option1"]:"", c["option2"]:""]
			))
		    ));
		    y2debug ("List of failed options: %1", constlist);
		    constlist = maplist (string c, constlist, ``(opt2gui[c]:c));
		    y2debug ("Printable list: %1", constlist);
		    string merged_const = mergestring (constlist, "\n");
		    y2debug ("Failed constraints: %1", merged_const);
		    Report::Error (sformat (
			// error report
			_("The following options conflict:

%1"),
			merged_const
		    ));
		    ret = nil;
		}
	    }
	}
	if (`next == ret)
	{
	    string ps = (string) (ppd_selected["PageSize"]:nil);
	    if (ps != nil) storePageSize(ps);
	    Printer::printer["options"] = selected;
	    Printer::printer["ppd_options"] = ppd_selected;


	}
return nil;
	return (symbol)ret;
    }

    /**
     * Create contents for edit dialog. Calls Setwizardcontents at the end.
     */
    define void createEditDialog () ``{
	map ppd_info = Printer::printer["ppd_info"]:$[];
	if (ppd_info == $[]) ppd_info = Printer::printer["detected", "ppd_info"]:$[];
	string manuf_db = ppd_info["manufacturer_db"]:"";
	string model_db = ppd_info["model_db"]:"";
	string nick = ppd_info["nick"]:"";
	string lang = ppd_info["language"]:"";
	string help_text = "";
	// determine printer type ...
	//
//	string uri = Printerlib::getReplacedString( Printer::printer["uri"]:"", false);
string uri = Printer::printer["uri"]:"";
	string uri_type = URL::Parse(uri)["scheme"]:"";
	boolean conf_type = Printer::printer["type"]:"yast2" == "yast2";
	boolean know = conf_type || Printer::printer["type"]:"yast2" == "non-yast-now";
	boolean raw = Printer::printer["raw"]:false;
	string model = Printer::printer["detected", "ppd_info", "model"]:"";		//["device"]:"";
	map ppd_options = Printer::printer["ppd_options"]:$[];
//saveOptions();
	//
	// texts
	//
	string model_text = sformat ("%1 %2", ppd_info["manufacturer"]:"", ppd_info["model"]:"");
	string config_text = GetPpdFileDescription (
	    nick,
	    lang,
	    Printerdb::getFileFromNickName (
		manuf_db,
		model_db,
		nick,
		lang)
	);
	if (config_text == "") config_text = _("Unknown");

	string name_text = Printer::printer["name"]:"";
	string connection_text = "";
	list items = [];
	string rich = "";

	// table entry
	items = add (items, `item (`id (`name), _("Name and basic settings"), Printer::printer["name"]:""));
	if ("class" != uri_type)
	{
	    if (! raw)
	    {
		// table entry
		items = add (items, `item (`id (`model), _("Printer model"), know ? model_text : _("unknown")));
		// table entry
		items = add (items, `item (`id (`ppd), _("PPD file"), config_text));
	    }
		// table entry
	    items = add (items, `item (`id (`connection), _("Connection"), know ? Printerlib::getUriNiceName (uri) : _("Unknown")));
	}
	if ("class" == uri_type)
	{
	    list<string> members = Printer::printer["printers"]:[];
	    string members_str = mergestring (members, ", ");
	// table entry
	    items = add (items, `item (`id (`class_members), _("Class members"), members_str));
	// table entry
	    items = add (items, `item (`id (`perm), _("Restriction settings"), ""));
	// table entry
	    items = add (items, `item (`id (`state), _("State and banner settings"), ""));
	}
	else
	{
	    if (! raw)
	    {
		// table entry
		items = add (items, `item (`id (`settings), _("Filter settings"), ppd_options["PageSize"]:""+" ..."));
		// table entry
		items = add (items, `item (`id (`perm), _("Restriction settings"), ""));
		// table entry
		items = add (items, `item (`id (`state), _("State and banner settings"), ""));
	    }
	}
	if (Printer::printer["ppd_info"]:nil == nil) 
		{
		 Printer::printer["ppd_info"] = Printer::printer["detected", "ppd_info"]:$[];
		 Printer::printer["valid"] = Printer::printer["detected", "valid"]:false;
		 Printer::printer["ppd"] = Printer::printer["detected", "ppd"]:"";
		}
	term allow_cbox = Printer::index >= 0 && Spooler::Get () != "cups"
	    ? `VBox (
		`Left (`CheckBox (`id (`yast), `opt (`notify),
		    // check box
		    _("&Allow Editing"), conf_type)),
		`VSpacing (1))
	    : `VSpacing (0);

	term contents = `VBox (
	    `VSpacing (1),
	    `HBox (
		`HSpacing (1),
		`VBox (
		    allow_cbox,
			// table header
		    `Table (`id (`options), `opt(`keepSorting, `notify), `header ( _("Option Area"),
			// table header
			 _("Current Values")), items),
		    `HBox (
			// push button
			`PushButton (`id (`edit), `opt (`key_F4), Label::EditButton ())
		    )
		),
		`HSpacing (1)
	    ),
	    `VSpacing (1)
	);

	// dialog caption
	Wizard::SetContentsButtons (_("Configuration"), contents, getEditHelp (uri_type, raw),
	    Label::BackButton (), Label::OKButton ());
	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();
    }

    /**
     * Complex edit dialog for printer...
     * @return symbol for wizard seq.
     */
    define symbol runEditDialog () ``{
	any ret = nil;
	createEditDialog ();
	if (Printer::printer["type"]:"yast2" == "yast2")
	{
//	    UI::ChangeWidget (`id (`test), `Enabled, true);
	    UI::ChangeWidget (`id (`edit), `Enabled, true);
	}
	else
	{
//	    UI::ChangeWidget (`id (`test), `Enabled, false);
	    UI::ChangeWidget (`id (`edit), `Enabled, false);
	}
//	UI::ChangeWidget(`test, `Enabled, Printer::printer["raw"]:false);

	while (nil == ret)
	    {
		UI::SetFocus (`id (`options));
		ret = UI::UserInput ();
		if (ret == `options || ret == `edit)
		{
		    ret = UI::QueryWidget (`id (`options), `CurrentItem);
		}
		else if (`abort == ret || `cancel == ret)
		{
		    ret = reallyAbort () ? `abort : nil;
		}
		else if (`yast == ret)
		{
		    boolean state = (boolean)
			UI::QueryWidget (`id (`yast), `Value);
		    if (! state)
		    {
			// popup
			if (Popup::YesNo (_("If you forbid editing this queue,\nyou will not be able to change its settings\nusing YaST2. Continue?")))
			{
			    Printer::printer["type"] = "non-yast-now";
		    ret = `update;
			}
			else
			{
			    UI::ChangeWidget (`id (`yast), `Value, true);
			    ret = nil;
			}
		    }
		    else if (Printer::printer["type"]:"yast2" == "non-yast-now"
			|| Printer::printer["type"]:"yast2" == "yast2")
		    {
			Printer::printer["type"] = "yast2";
			ret = `update;
		    }
		    else
		    {
			// popup
			if (Popup::YesNo (_("The selected queue was not configured 
using YaST2. Add a printer 
with a preassigned name?")))
			    ret = `add;
			else
			{
			    UI::ChangeWidget (`id (`yast), `Value, false);
			    ret = nil;
			}
		    }
		}
		if (`connection == ret)
		{
		    string uri = Printer::printer["uri"]:"";
		    string uri_type = URL::Parse(uri)["scheme"]:"";
		    map<string,symbol> retvals = $[
			"smb": `con_samba,
			"novell": `con_novell,
			"lpd": `con_lpd,
			"socket": `con_socket,
			"pipe" : `con_pipe,
			"parallel" : `con_local,
			"serial" : `con_local,
			"usb" : `con_local,
			"irda" : `con_local,
			"bluetooth" : `con_local,
			"hp" : `con_local
		    ];
		    if (uri_type == "ipp")
		    {
			string uri_queue = Printerlib::getUriRemoteQueue (uri);
			if (substring (uri_queue, 0, 9) == "printers/"
			    || substring (uri_queue, 0, 8) == "classes/")
			{
			    ret = `con_ipp;
			}
			else
			{
			    ret = `con_uri;
			}
		    }
		    else
		    {
			ret = retvals[uri_type]:`con_uri;
		    }
		}
		else if (`perm == ret)
		{
		    break;
		}
		else if (`state == ret)
		{
		    break;
		}
		else if (`ascii == ret)
		{
		    break;
		}
		else if (`config == ret)
		{
		    break;
		}
		else if (`ppd == ret)
		{
		    break;
		}
		if (`update == ret)
		{
		    if (Printer::printer["type"]:"yast2" == "yast2")
		    {
			UI::ChangeWidget (`id (`test), `Enabled, true);
			UI::ChangeWidget (`id (`edit), `Enabled, true);
		    }
		    else
		    {
			UI::ChangeWidget (`id (`test), `Enabled, false);
			UI::ChangeWidget (`id (`edit), `Enabled, false);
		    }
		    ret = nil;
		}
	    }
	return (symbol)ret;
    }


    /**
      * Decide how to configure autodetected printer
      * @return symbol for ws
      */
    define symbol detectConfigType () ``{
	y2milestone ("Detecting way to configure printer");
	symbol ret = nil;
	// new queue to existing printer
	if (Printer::runAutoprobedListDialog__current == "-2")
	{
	    y2milestone ("Configuring queue for installed printer");
	    return `installed_printer;
	}
	// not detected printer
	else if (Printer::runAutoprobedListDialog__current == "-1")
	{
	    y2milestone ("Other undetected printer chosen");
	    ret = `connection;
	}
	// improperly set device/uri
	else if (Printer::printer["uri"]:"" == ""
		|| Printer::printer["uri"]:"" == "parallel:")
	{
	    y2milestone ("Printer device not known");
	    ret = `connection;
	}
	// unsupported spooler
	else if (Spooler::Get () != "cups")
	{
	    y2milestone ("Unknown spooler");
	    ret = `connection;
	}
	else if (Printer::confmode == `adm)
	{
	    y2milestone ("Administration, nothing detected");
	    ret = `connection;
	}

	if (ret == `connection)
	{
	    y2milestone ("Returning %1", `connection);
	    return `connection;
	}

	Printerdb::InstallDrivers ();

	string support
	    = Printerdb::foomatic[Printer::printer["detected", "vendor_db"]:"",
		Printer::printer["detected", "device_db"]:"", `support]:"full";

	// check for existence of at least one PPD file
	map PPDs = Printerdb::foomatic[
	    Printer::printer["detected", "vendor_db"]:"",
	    Printer::printer["detected", "device_db"]:""]:$[];
	PPDs = filter (any k, any v, PPDs, ``(is (k, string)));
	if (size (PPDs) < 1)
	{
	    y2milestone ("No PPD file available");
	    ret = `name;
	}
	// check for support status
	else if (support != "full")
	{
	    y2milestone ("Support status isn't fully supported");
	    ret = `name;
	}
	// no reason to ask too much
	else
	{
	    y2milestone ("Supported printer detected");
	    ret = `quick;
	}

	// check CUPS USB device
	if (Spooler::Get () == "cups")
	{
	    CUPS::DetectCupsUsbDevicesInfo ();
	    list problematic = CUPS::GetProblematicCupsUsbDevices ();
	    string device = Printerlib::getUriDevice (
		Printer::printer["uri"]:"");
	    if (contains (problematic, device))
	    {
		y2milestone ("Problematic CUPS device detected");
		ret = `connection;
	    }
	}
	y2milestone ("Returning %1", ret);
	return ret;
    }

    /**
     * Show printer details in one window
     * @return symbol `back `next `abort
     */
    define symbol runQueuesProposalDialog () ``{
	y2milestone ("Started queues proposal dialog for %1", Printer::printer);
	map ppd_info = Printer::printer["ppd_info"]:$[];
	string vendor = ppd_info["manufacturer_db"]:"";
	string model = ppd_info["model_db"]:"";
	string config = ppd_info["nick"]:"";
	list<map<string,any> > queues = getFoomaticAutoQueues (vendor, model, config);
	string default_queue = Printerdb::getFoomaticDefaultQueue (queues);

	term contents = `VBox (
	    `VSpacing (0.7),
	    `HBox (
		`HSpacing (2),
		// frame label
		`VBox (
		    `Heading (
			// heading label
			_("Configured Queues")
		    ),
		    `VSpacing (0.5),
		    `Table (
			// table header
			`id (`table), `opt (`notify), `header (_("Queue Name"),
			    // table header
			     _("Comment")),
			    maplist (map v, queues, ``(
				`item (`id (v["name"]:""), v["name"]:"",
				    v["info"]:"" )))
		    ), // table
		    `VSpacing (0.5),
		    `HBox (
			`HStretch (),
			`PushButton (`id (`test), `opt (`key_F6),
			    // pushbutton
			    _("T&est Printing"))
		    ), // HBox
		    `VSpacing (1)
		), // VBox
		`HSpacing (2)
	    ), // HBox
	    `VSpacing (1)
	); // VBox

	// label of the dialog
	Wizard::SetContentsButtons (_("Printer Overview"), contents,
	    getShowPrinterHelp (), Label::BackButton (), Label::OKButton ());
	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();

	if (default_queue != nil && default_queue != "")
	    UI::ChangeWidget (`id (`table), `CurrentItem, default_queue);

	symbol ret = nil;
	while (ret == nil)
	{
	    ret = (symbol)UI::UserInput ();
	    if (ret == `table)
	    {
		ret = `test;
	    }
	    if (`abort == ret || `cancel == ret)
	    {
		ret = `abort;
		if (reallyAbort ())
		{
		    break;
		}
	    }
	    else
	    {
		break;
	    }
	}
	if (`next == ret)
	{
	    boolean set_default = Printer::default_queue == ""
		|| Printer::default_queue == nil;
	    // add queues...
	    map p = Printer::printer;
	    foreach (map<string,any> v, queues, ``{
		Printer::printer = (map<string,any>)union (p, v);
		Printer::index = -1;
		Printer::storePrinter ();
	    });
	    if (set_default && default_queue != nil && default_queue != "")
	    {
		Printer::default_queue = default_queue;
	    }
	}
	return ret;
    }

    /**
     * Create contents of table of autodetected printers.
     * @param current_sel currently selected item
     * @return list list of items, `ids are indexes to autoprobed_printers list
     */
    define list getAutoprobedSelectionBox (integer current_sel) ``{
	integer current = -1;
	boolean selected = false;
	list items = maplist (map i, Printer::autodetected, ``{
	    current = current + 1;
	    if (current == current_sel)
	    {
		selected = true;
	    }
	    if (isPrinterConfigured (i["vendor"]:"", i["device"]:"",
		i["uri"]:"", i["unique_key"]:""))
	    {
		y2debug ("Skipping %1, already configured", i);
		return nil;
	    }
	    else
		return `item (`id (current), sformat (
		// selection box entry, %1 is printer manufacturer,
		// %2 model %3 device,
		// eg. EPSON Stylus Photo 810; Connection: First parallel port
		    _("%1 %2; Connection: %3"),
		    i["vendor"]:"", i["device"]:"",
		    Printerlib::getDeviceNiceName (
			Printerlib::getUriDevice (i["uri"]:""), true)),
			    current == current_sel);
	});

	items = filter (any i, items, ``(i != nil));
	if (size (getConfiguredPrinters ()) > 0)
	{
	    items = add (items, `item (`id (-2),
		// selection box entry
		_("New Queue for Configured Printer")));
	}

	// selection box entry
	return add (items, `item (`id (-1), _("Other (not detected)"),
	    !selected));
    }


     /**
     * Restart detection of printers.
     * @return symbol always `next
     */
    define symbol runProbeDialog () ``{
	Printer::Detect ();
	return `next;
    }


void initServerType (string key) {
 CUPS::ReadCupsSettings ();
 if (CUPS::InstallationType () == `server){
  UI::ChangeWidget(`id(`server_type), `CurrentButton, `local);
  } else {
	  UI::ChangeWidget(`id(`server_type), `CurrentButton, `remote);
	  UI::ChangeWidget(`id(`server_name), `Items, [ CUPS::server_hostname ]);
	  if (CUPS::server_default) UI::ChangeWidget(`use_default, `Value, true);
		else UI::ChangeWidget(`queues, `Items, [ Printer::default_queue ]);
	 }
 if ( contains (CUPS::cups_server_settings["Browsing"]:["On"],"On") ) UI::ChangeWidget(`ipp_listen, `Value, true);
 if (Printer::lpd_enable) UI::ChangeWidget(`lpd_enable, `Value, true);
}

list<string> getAddresses(list<string> addr_orig){
 list<string> addresses=addr_orig;
 term contents = `Frame (_("Browsing Settings"), `VBox (
		// selectionbox label
		`HBox (`HSpacing (3), `SelectionBox (`id (`addr), _("Browse Addre&sses")), `HSpacing (3)),
		`HBox (
		    `HSpacing (3),
		    `PushButton (`id (`add), `opt (`key_F3), Label::AddButton ()),
		    `PushButton (`id (`edit), `opt (`key_F4), Label::EditButton ()),
		    `PushButton (`id (`del), `opt (`key_F5), Label::DeleteButton ()),
		    `HStretch (),
		    // push button
//		    `PushButton (`id (`propose_server), _("&Propose")),
		    `PushButton (`id (`ok), Label::OKButton()),
		    `HSpacing (3)
		)
	    ));
 UI::OpenDialog(contents);
 symbol ret = nil;
 do {
     UI::ChangeWidget(`addr, `Items, addresses);
     ret = (symbol) UI::UserInput();
     string curr = (string)UI::QueryWidget(`addr, `CurrentItem);
     switch(ret){
      case `add:
		curr="";
      case `edit:
		UI::OpenDialog(`VBox(`TextEntry(`id(`ip_addr), _("IP Address"), curr),
				`HBox(`PushButton(`id(`cancel), Label::CancelButton()), `PushButton(`id(`ok), Label::OKButton()))));
		if ((symbol)UI::UserInput()==`ok){
		 list<string> tmp_list = [];
		 foreach(string row, addresses, {
		 if (row==curr && curr!="") tmp_list = add(tmp_list, (string)UI::QueryWidget(`ip_addr, `Value));
			else tmp_list = add(tmp_list, row);
		 });
		 if (curr=="") tmp_list = add(tmp_list, (string)UI::QueryWidget(`ip_addr, `Value));
		addresses = tmp_list;
		}
		UI::CloseDialog();
		break;
      case `del:
		addresses = filter(string item, addresses, {return (item != curr);});
		break;
      case `cancel:
		addresses = addr_orig;
      case `ok:
		ret = nil;
		break;
     }
    }while (ret !=nil);

 UI::CloseDialog();
 return addresses;
}

symbol handleServerType (string key, map event) ``{
 boolean local = (UI::QueryWidget(`id(`server_type), `CurrentButton) == `local);

 UI::ChangeWidget(`ipp_listen, `Enabled, local);
 UI::ChangeWidget(`lpd_enable, `Enabled, local);
 boolean listen = (boolean)UI::QueryWidget(`ipp_listen, `Value);
 UI::ChangeWidget(`select_addr, `Enabled, listen && local);

 UI::ChangeWidget(`server_name, `Enabled, !local);
 UI::ChangeWidget(`lookup_server, `Enabled, !local && CUPS::enable_netcat);
 UI::ChangeWidget(`test_ipp, `Enabled, !local && CUPS::enable_netcat);
 UI::ChangeWidget(`use_default, `Enabled, !local);

  boolean use_def=false;
 if (!local) use_def=!(boolean) UI::QueryWidget(`use_default, `Value);
 UI::ChangeWidget(`queues, `Enabled, use_def);
 UI::ChangeWidget(`lookup_queue, `Enabled, use_def && CUPS::enable_netcat);
 if (event["EventReason"]:""=="Activated" && event["ID"]:`nil==`select_addr) {
	CUPS::cups_server_settings["BrowseAddress"] = getAddresses(CUPS::cups_server_settings["BrowseAddress"]:[]);
 }
  symbol id = event["ID"]:`nil;
  switch(id){
   case `get_hosts_listen:
   case `get_hosts_special:
   case `get_hosts:
		list hosts = [];
		if (id == `get_hosts_listen) hosts = CUPS::ListenCupsServers ();
		else hosts = getHostnames ( `get_hosts_special == id ? "ipp" : "");
		UI::ChangeWidget(`server_name, `Items, hosts);
		break;
    case `test_ipp:
		string n = (string)UI::QueryWidget (`id(`server_name), `Value);
                if (nil == n || "" == n)
		    // popup
		    Popup::Message (_("Enter a valid server name."));
		else
		    Printerlib::testRemote (n, "", "ipp_server", 0);
		break;
    case `lookup_queue:
		list queues = (list)SCR::Read (.cups.remote, UI::QueryWidget (`id (`server_name), `Value));
		queues = toset (queues);
		UI::ChangeWidget(`queues, `Items, queues);
		break;
  }
 return nil;
}

boolean validateServerType(string key, map event){
 if (! (UI::QueryWidget(`id(`server_type), `CurrentButton) == `local)){
  if (size((string)UI::QueryWidget (`id (`server_name), `Value))==0){
   Popup::Warning (_("Enter a valid server name."));
   return false;
  }
  if (!(boolean)UI::QueryWidget(`use_default, `Value) && size((string)UI::QueryWidget(`queues, `Value))==0){
   Popup::Warning (sformat("%1 \"%2\".", _("Select default queue or check"), _("Use Server's Default Queue")));
   return false;
  }
 } else{
  if ((boolean)UI::QueryWidget(`lpd_enable, `Value) && !Printer::lpd_enable){
   if (!Popup::YesNo(_("To enable LPD support, you must enable also xinetd service."))) return false;
  }
 }
 return true;
}

void storeServerType(string key, map event){
 boolean local = (UI::QueryWidget(`id(`server_type), `CurrentButton) == `local);
 if (local){
	 CUPS::cups_installation=`server;
	 boolean listen = (boolean)UI::QueryWidget(`ipp_listen, `Value);
         CUPS::cups_server_settings["Browsing"] = listen ? ["On"] : ["Off"];
	 Printer::lpd_enable = (boolean)UI::QueryWidget(`lpd_enable, `Value);
	}else{
		CUPS::cups_installation=`client;
		CUPS::server_hostname = (string)UI::QueryWidget(`server_name, `Value);
		CUPS::server_default = ((boolean)UI::QueryWidget(`use_default, `Value));
		if (!CUPS::server_default) Printer::default_queue = (string)UI::QueryWidget(`queues, `Value);
	}
 Printer::dirty = true;
}

    /**
     * Function to set the data to the hardware dialog
     * get inspired by summary and getAutoprobedSelectionBox when writing it
     */
list<map<string,any> > o_items = nil;

list<term> buildItemsList(string t_filter){
 string new_spooler = Spooler::Get ();
 if (new_spooler == "cups" && CUPS::InstallationType () == `client) new_spooler = "cups-client";
 y2milestone("spooler %1", new_spooler);
 o_items = [];
 if (new_spooler == "cups")
  {
   list < map<string,any> > items = maplist (map i, Printer::printcap, ``{
    y2milestone("printcap %1", i);
    string def = "";
    if (i["name"]:"unknown" == Printer::default_queue) def="Default";
    return  $[
	"ID"    : Printerlib::getReplacedString(i["uri"]:"", false),
	"MODEL" : i["ppd_info", "model"]:"unknown",
	"SPOOL" : i["name"]:"unknown",
	"DESCR" : sformat("<b>%1 %2 / %3</b><br>%4<br>%5 %6<br>%7 %8",
		i["ppd_info", "manufacturer"]:"none", i["ppd_info", "model"]:"", i["name"]:"",
			(((boolean)i["shared"]:false)?_("Shared"):_("Not Shared")),
			_("Connected As"), Printerlib::getReplacedString(i["uri"]:"none", true),
			_("With Spool"), i["name"]:"none"
			),
	"DEFAULT":def ];
  });

  items=(list<map<string,any> >) merge((list<map<string,any> >) items,
		(list<map<string,any> >) maplist (map i, Printer::autodetected, ``{
  if (isPrinterConfigured (i["vendor"]:"", i["device"]:"", i["uri"]:"", i["unique_key"]:""))
   {
    y2milestone ("Skipping %1, already configured", i);
    return nil;
   }
    else
     {
      boolean finded=false;
      foreach(map<string, any> row, items, {
       if (row["ID"]:nil == Printerlib::getReplacedString(Printerlib::getUriDevice (i["uri"]:""), false))
        {
         finded=true;
         y2milestone("Printer %1 without ppd file already configured", row["ID"]:nil);
        }
      });
      if (finded==false) return $[
	"ID":Printerlib::getReplacedString(Printerlib::getUriDevice (i["uri"]:""), false),
        "MODEL":i["info"]:"unknown",
        "SPOOL":i["name"]:"not configured",
        "DESCR": "<b>" + i["info"]:"none" + "</b><br>"
			+ i["location"]:"" + "<br>"
	+ _("This printer is not configured") ];
     }

   }));
   items = (list < map<string,any> >) filter (any i, items, ``(i != nil));
   Printer::conf_unconf_printers = items;
   maplist(map<string,any> s, items, {
	o_items = add(o_items,  $[
		"id" : tostring(size(o_items)),
		"rich_descr" : s["DESCR"]:"none",
		"table_descr":[
			s["SPOOL"]:"unknown",
			s["ID"]:"unknown" ,
			s["MODEL"]:"unknown",
			s["DEFAULT"]:"" ]
		   ]);
   });
 }
   list<term> term_items = maplist (map<string,any> i, o_items, {
   Printer::selectPrinter(tointeger(i["id"]:""));
    if (t_filter=="Local" && !Printer::isPrinterLocal()) return nil;
    if (t_filter=="Remote" && Printer::isPrinterLocal()) return nil;
        term t = `item (`id (i["id"]:""));
        foreach (string l, i["table_descr"]:[], {
            t = add (t, l);
        });
        return t;
    });
   term_items = (list<term>) filter (any i, term_items, ``(i != nil));
 return term_items;
}

void refreshOverview(integer selected, boolean rebuild_items){
 if (rebuild_items){
  list<term> items = buildItemsList((string)UI::QueryWidget(`filter, `Value));
  UI::ChangeWidget (`id (`_hw_items), `Items, items);
  if (size((items))>0) selected = tointeger( UI::QueryWidget(`id(`_hw_items), `CurrentItem));
 }
 boolean editable = (selected==nil || selected==-1) ? false : true;
  if (size((list<term>)UI::QueryWidget(`id (`_hw_items), `Items))>0)
   {
    integer old_selection = selected;
    selected = tointeger( UI::QueryWidget(`id(`_hw_items), `CurrentItem));
    if (selected != old_selection) Printer::selectPrinter(selected);
    UI::ChangeWidget(`_hw_sum, `Value, o_items[selected, "rich_descr"]:"");
   }
    else
     {
      UI::ChangeWidget(`_hw_sum, `Value, "");
      editable = false;
     }
 boolean local = (CUPS::InstallationType() == `server);
 UI::ChangeWidget(`_hw_items,	`Enabled, local);
 UI::ChangeWidget(`add,		`Enabled, local);
 UI::ChangeWidget(`edit,	`Enabled, local && editable);
 UI::ChangeWidget(`delete,	`Enabled, local && editable);
 UI::ChangeWidget(`filter,	`Enabled, local);
 UI::ChangeWidget(`test,	`Enabled, local && editable);
}

    /**
     * Common detected hardware dialog.
     * @return symbol for ws
     */
    define symbol handleOverview (string key, map event) ``{

	// several functions dialog
	if (Stage::normal()) Wizard::SetNextButton(`next, Label::FinishButton());
		else Wizard::SetNextButton(`next, Label::AcceptButton());

	symbol ret=nil;
        string new_spooler = Spooler::Get ();
	integer selected = -1;
	if (size((list<term>)UI::QueryWidget(`id (`_hw_items), `Items))>0) selected = tointeger( UI::QueryWidget(`id(`_hw_items), `CurrentItem));
	Printer::selectPrinter(selected);
	refreshOverview(selected, (event["EventReason"]:nil=="SelectionChanged"||event["ID"]:nil==`delete||event["ID"]:nil==`edit)?false:true);
	y2milestone("selected printer %1", selected);
        if (new_spooler == "cups" && CUPS::InstallationType () == `client) new_spooler = "cups-client";

	// to avoid some warnings into log file
	if ( !is(event["ID"]:nil, symbol) || (symbol)event["ID"]:nil==nil ) { ret=nil; }
	 else{
	  ret = (symbol) event["ID"]:nil;
	switch((symbol) event["ID"]:nil){
	 case `delete :
	y2internal("selected printer %1", selected);
 		if (new_spooler == "cups-client") {CUPS::cups_installation=`server;new_spooler="cups";}
			else if ( (Printer::conf_unconf_printers[selected, "SPOOL"]:"" != "not configured") && Popup::YesNo (sformat (_("Really delete printer %1?"), Printer::printer["name"]:"")))
		{
		 Printer::deletePrinter ();
	         refreshOverview(selected, true);
		}
		ret=nil;
		break;
// TODO handle all events here
	case `add :
		Printer::selectPrinter(-1);
		ret = `add_button;
		break;
	case `edit :
		if (new_spooler == "cups")
		 {
		  if (Printer::printer == $["type":"yast2"]) 
		   {
		    integer from_detect = -1;
		    integer count = 0;
		    string prn_id="";
		    foreach(map<string, any> temp_printer, Printer::Detect(), {
			string temp_string = splitstring(temp_printer["uri"]:"", ":")[1]:"";
                        if (selected >= count)
			 {
			  if (Printerlib::getReplacedString(temp_string, false) ==
								Printer::conf_unconf_printers[selected, "ID"]:"")
			   {
			    from_detect = from_detect + 1;
			    break;
			   }
			  if (temp_string != prn_id)
			   {
			    from_detect = from_detect+1;
			    prn_id = temp_printer["ID"]:"";
			   }
			  count=count + 1;
			 }
		    });
		    Printer::editDetected(Printer::Detect()[from_detect]:$[]);
		   }
		  if (Printer::printer["ppd_info", "model"]:nil == nil) ret=`edit_unconf;
			else ret = `edit_button;
		 } else ret=`connection_cups;
		break;
	      case `test :
		    // error report
/*
		    Report::Error (_("Queues that do local filtering cannot be tested
here. Proceed to the next dialog to select the printer model
and test the queue after the printer model is selected."));
*/
		    PrinterTest::testPrinter (Printer::printer, `ask);
		    ret=nil;
	     break;
	default:
	 ret = nil;
	}
    }
y2internal("ret %1", ret);
 return ret; // FIXME
}

 map<string,any> firewall_widget =
		CWMFirewallInterfaces::CreateOpenFirewallWidget ($["services":[ "ipp-tcp" ], "display_details":true]);
 list<string> addresses = [];

void initCupsServer(string key){
 string firewall_help = firewall_widget["help"]:"";
 term firewall_layout = firewall_widget["custom_widget"]:`VBox ();
 UI::ReplaceWidget(`fw, firewall_layout);
 addresses = CUPS::cups_server_settings["BrowseAddress"]:[];
 UI::ChangeWidget (`id (`browsing), `CurrentButton, CUPS::cups_server_settings["Browsing"]:["On"] == ["Off"] ? `off : `on);
 // selectionbox
 UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));
 CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");
 boolean enable = true;
 if (CUPS::InstallationType () != `server) enable=false;
 UI::ChangeWidget(`f_browsing, `Enabled, enable);
 UI::ChangeWidget(`f_address, `Enabled, enable);

}

define symbol handleCupsServer (string key, map event) {
 CWMFirewallInterfaces::OpenFirewallHandle (firewall_widget, "", event);
 symbol id = event["ID"]:`nil;
 any ret = nil;
 if (id!=`nil) switch(id){
   case `propose_server:
	if ((size(addresses)>0 && Popup::ContinueCancel(_("Really replace with the suggested value?")))
	 ||(size(addresses)==0)){
	   CUPS::ProposeServerSettings ();
	   addresses = CUPS::cups_server_settings["BrowseAddress"]:[];
	   UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));
	}
	break;
  case `change:
	ret = (symbol)UI::QueryWidget (`id (`loc), `CurrentButton);
        break;
  case `add:
	// popup request
	UI::OpenDialog (ipAddrPopup (false, _("&IP Address"), "", nil));
	symbol r = nil;
	while (nil == r) r = (symbol)UI::UserInput ();
	string ad = (string)UI::QueryWidget (`id (`ad), `Value);
	UI::CloseDialog ();
	if (r != `ok) break;
	if (ad != "") addresses = toset (add (addresses, ad));
	// selectionbox label
	UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));
	break;
  case `del:
        addresses = (list<string>)DeleteItem (addresses, UI::QueryWidget (`id (`addr), `CurrentItem));
	// selectionbox label
	UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));
	break;
  case `edit:
	if (UI::QueryWidget (`id (`addr), `CurrentItem) == nil) break;
	// popup request
	UI::OpenDialog (ipAddrPopup (false, _("&IP Address"), (string)UI::QueryWidget (`id (`addr), `CurrentItem), nil));
        symbol r2 = nil;
        while (nil == r2) r2 = (symbol)UI::UserInput ();
        string ad2 = (string)UI::QueryWidget (`id (`ad), `Value);
        UI::CloseDialog ();
        if (r2 != `ok) break;
        if (ad2 != "")
	 {
	  addresses = (list<string>)DeleteItem (addresses, UI::QueryWidget (`id (`addr), `CurrentItem));
          addresses = (list<string>)toset (add (addresses, ad2));
	 }
	// selectionbox label
        UI::ReplaceWidget (`id (`replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"), addresses));
	break;
    }
 UI::ChangeWidget(`edit, `Enabled, (size(addresses)>0));
 UI::ChangeWidget(`del,  `Enabled, (size(addresses)>0));
 if (ret!=nil)initial_tab = "server";
	else initial_tab = "overview";
 return (symbol)ret;
}

void storeCupsServer(string key, map event){
 CUPS::cups_server_settings["BrowseAddress"] = addresses;
 CUPS::cups_server_settings["Browsing"] = UI::QueryWidget (`id (`browsing), `CurrentButton) == `on ? ["On"] : ["Off"];
 CWMFirewallInterfaces::OpenFirewallStore (firewall_widget, "", event);
}

map<string, map<string,any> > wd = $[
          "SERVER_TYPE" : $[
            "widget" : `custom,
            "custom_widget" :
`HBox(
`HSpacing(5),
            `MarginBox(1,0,
              `VBox(
                `Frame(_("Print via"),
                 `RadioButtonGroup( `id( `server_type ),
                  `VBox(
                        `VBox(
                         `Left( `RadioButton(`id(`local), `opt(`notify), "Local CUPS Server")),
                          `VBox(
                           `Left(
                            `HBox(
                                `HSpacing(),
                                `CheckBox(`id(`ipp_listen), `opt(`notify), _("Listen to IPP Broadcast Packets")),
                                `PushButton(`id(`select_addr), _("Select Addresses"))
                               )),
                           `Left(
                            `HBox(
                                `HSpacing(),
                                `CheckBox(`id(`lpd_enable), `opt(`notify), _("enable LPD clients"))))
                              )),
                        `VBox(
                         `Left(`RadioButton(`id(`remote), `opt(`notify), "Do All Your Printing Directly via One Remote CUPS Server" )),
                          `Left(
                           `HBox(
                                `HSpacing(),
                                `MinWidth(8, `ComboBox(`id(`server_name), `opt(`editable), _("Server Name"))),
                                // menubutton
                                `VBox(
                                 `VSpacing(),
                                  `HBox(
                                   `MenuButton (`id(`lookup_server), _("&Look Up"), [
                                   // menu entry
                                   `item (`id (`get_hosts_special), _("Scan for &IPP Servers")),
                                   // menu item
                                   `item (`id (`get_hosts_listen),_("Listen for IPP &Broadcasts")),
                                   // menu entry
                                   `item (`id (`get_hosts), _("Look Up &All Hosts")),
                                   ]),
                                   `PushButton(`id(`test_ipp), _("Test Remote IPP Access"))
                                ))
                              )),
                         `Left( `HBox(`HSpacing(), `CheckBox(`id(`use_default), `opt(`notify), _("Use Server's Default Queue")))),
                         `Left(
                          `HBox(
                           `HSpacing(),
                           `MinWidth(8, `ComboBox(`id(`queues), `opt(`editable), _("Queues"))),
                           `VBox(`VSpacing(),
                            `PushButton(`id(`lookup_queue), _("Lookup"))
                                )
                              )
                        ))
                 ))),
                `VStretch()
             )),
`HSpacing(5)
),
	    "init"   : initServerType,
	    "handle" : handleServerType,
	    "validate_type" : `function,
            "validate_function" : validateServerType,
	    "store"  : storeServerType
	  ],
          "OVERVIEW" : $[
            "widget" : `custom,
            "custom_widget" :
                `VBox(
		  `Right(`ComboBox(`id(`filter), `opt(`notify),
			"", ["Show all", "Local", "Remote"])),
                  `VWeight(2,`Table (`id (`_hw_items), `opt (`notify, `immediate),
					`header(_("Queue Name"),_("Device"), _("Model"),  _("Default Queue")))),
                  `VWeight(1,`RichText (`id (`_hw_sum), "")),
                  `HBox (
                        `PushButton (`id (`add), Label::AddButton ()),
                        `PushButton (`id (`edit), _("Configure")),
                        `PushButton (`id (`delete), Label::DeleteButton ()),
			`HStretch (),
                        `PushButton (`id (`test), _("Print test page"))
                        )
                ),
//            "init" : initOverview,
            "handle" : handleOverview,
//          "store" : storeOverview,
//            "help" : help["overview"]:""
          ],
          "SERVER" : $[
            "widget" : `custom,
            "custom_widget" :
	`HBox (`HSpacing (2), `VBox (
	    `VSpacing (1),
	    // frame
	    `Frame (`id(`f_browsing), _("Browsing Settings"), `VBox (
		`HBox (`HSpacing (3), `RadioButtonGroup (`id (`browsing), `HBox (
		    // label
		    `Label (_("Browsing")),
		    // radiobutton
		    `RadioButton (`id (`on), _("On")),
		    // radiobutton
		    `RadioButton (`id (`off), _("Off"))
		)),
		`HSpacing (3)),
		// selectionbox label
		`HBox (`HSpacing (3), `ReplacePoint (`id( `replace_addr), `SelectionBox (`id (`addr), _("Browse Addre&sses"))), `HSpacing (3)),
		`HBox (
		    `HSpacing (3),
		    `PushButton (`id (`add), `opt (`key_F3), Label::AddButton ()),
		    `PushButton (`id (`edit), `opt (`key_F4), Label::EditButton ()),
		    `PushButton (`id (`del), `opt (`key_F5), Label::DeleteButton ()),
		    `HStretch (),
		    // push button
		    `PushButton (`id (`propose_server), _("&Propose")),
		    `HSpacing (3)
		)
	    )),
	    // frame
	    `Frame (`id(`f_address), _("Access Settings"), `VBox (
		`RadioButtonGroup (`id (`loc), `VBox (
		    `HBox (
			`RadioButton (`id (`root), `opt (`hstretch), "/ (r&oot)", true),
			`RadioButton (`id (`admin), `opt (`hstretch), "/ad&min")
		    ),
		    `HBox (
			`RadioButton (`id (`printers), `opt (`hstretch), "/&printers"),
			`RadioButton (`id (`classes), `opt (`hstretch), "/&classes")
		    )
		)),
		// pushbutton
		`PushButton (`id (`change), _("Change P&ermissions"))
	    )),
//	    firewall_layout
	    `ReplacePoint( `id( `fw ), `Empty() )
	), `HSpacing (2)),
	    "init"   : initCupsServer,
	    "handle" : handleCupsServer,
	    "store"  : storeCupsServer,
	    "help"   : getCupsServerHelp()
	   ]
        ];

map tabs_descr = $[
        "global" : $[
          "header" : _("Global Settings"),
	  "tree_item_label" : _("Global Settings"),
          "contents" : `VBox (
            "SERVER_TYPE"
          ),
         "widget_names" : ["SERVER_TYPE"]
        ],
        "overview" : $[
          "header" : _("Printers and Queues"),
          "tree_item_label" : _("Printers and Queues"),
          "contents" : `VBox (
            "OVERVIEW"
          ),
         "widget_names" : ["OVERVIEW"]
        ],
        "server" : $[
          "header" : _("CUPS server settings"),
          "tree_item_label" : _("CUPS server settings"),
          "contents" : `VBox (
		"SERVER"
		),
         "widget_names" : ["SERVER"]
        ],
];


symbol runMainDialog(){
    string caption = _("Detected Printers");
/*
    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order":  [ "global", "overview", "server" ],
            "tabs": tabs_descr,
            "widget_descr": wd,
            "initial_tab" :  initial_tab,
            "tab_help" : "",
        ]),
    ];
    term contents = `VBox( "tab");

    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    string help = CWM::MergeHelps(w);
    contents = CWM::PrepareDialog(contents, w);

    Wizard::SetContentsButtons(caption, contents, help, Label::BackButton (), Label::AcceptButton ());
    Wizard::DisableBackButton();

    symbol ret = CWM::Run(w, $[]);
*/

   symbol ret = DialogTree::ShowAndRun ($[
            "ids_order"         : [ "global", "overview", "server" ],
            "initial_screen"    : initial_tab,
            "screens"           : tabs_descr,
            "widget_descr"      : wd,
	    "back_button"	: nil,//Label::BackButton(),
            "abort_button"      : Label::AbortButton(),
            "next_button"       : (Mode::normal() ?
                Label::NextButton () : Label::OKButton ()
            )
        ]);
    return ret;
}



define symbol runRemoteAccessDialog(){
 term contents = `HBox (`HStretch (), `VBox (
            `VStretch (),
            `RadioButtonGroup (`id (`rb),
                        // frame
                `Frame (_("Remote Access"),`HBox (
                    `HSpacing (3),
                    `VBox (
                        `VSpacing (3),
                                // radiobutton
          `Left(`RadioButton( `id(0), _("Enable"))),
          `Left(`RadioButton( `id(1), _("Disable"))),
                        // radiobutton
                        `VSpacing (3)
                    ),
                    `HSpacing (3)
                )
            )),
            `VStretch ()
        ), `HStretch ());

  Wizard::SetContentsButtons (_("CUPS Remote Access Settings"), contents,  getRemoteAccessHelp(),
                Label::BackButton (), Label::NextButton () );
boolean allow=true;
foreach(string row, CUPS::cups_server_settings["Listen"]:[], {
 if (row=="localhost:631") allow=false;
});
	if (allow) UI::ChangeWidget (`id (`rb), `CurrentButton,0);
		else UI::ChangeWidget (`id (`rb), `CurrentButton,1);


  symbol ret = (symbol)UI::UserInput();
  if (ret == `next){
     integer option = tointeger(UI::QueryWidget(`id(`rb), `CurrentButton));
     switch (option){
      case 0 : 
		y2milestone("Changing remote access to enable");

		CUPS::cups_server_settings["Listen"]=
			["*:631", "/var/run/cups/cups.sock"];
		CUPS::cups_server_permissions["/"]=$["Allow":["localhost", "127.0.0.2", "@LOCAL"],
						"Order":["allow,deny"]];
		break;
      case 1 : 
		y2milestone("Changing remote access to disable");
		CUPS::cups_server_settings["Listen"]=
			["localhost:631", "127.0.0.2:631", "/var/run/cups/cups.sock"];
		CUPS::cups_server_permissions["/"]=$["Allow":["localhost", "127.0.0.2"],
						"Order":["allow,deny"]];
		break;
     };
  }

 return ret;
}


    /**
      * Detect installation type
      * @return symbol `server or `client
      */
    define symbol getInstType () ``{
	if (Spooler::Get () != "cups") return `server;
	return CUPS::InstallationType ();
    }

    /**
     * We need this wrapper because of wizard sequencer.
     * @return `next for wizard sequencer
     */
    define symbol storePrinter () ``{
	Printer::storePrinter ();
	return `next; // because of wizard sequencer
    }

void initOptions(string key){
 // TODO : fix olicies
 UI::ChangeWidget(`policy, `Enabled, false);

 string info = Printer::printer["info"]:"";
 string loc = Printer::printer["location"]:"";
 UI::ChangeWidget(`description, `Value, info);
 UI::ChangeWidget(`location, `Value, loc);
 UI::ChangeWidget(`default_printer, `Value, Printer::default_queue==Printer::printer["name"]:"");
 boolean has_ppd = (Printer::printer["raw"]:false==false && size(Printer::printer["ppd"]:"")>0);
 UI::ChangeWidget(`chb_driver, `Value, has_ppd);

 if(has_ppd){
  y2internal("PPD %1", Printer::printer["ppd"]:"");
  map sizes = $[];
  foreach(map option, Printerdb::getPpdFileOptions (Printer::printer["ppd"]:"", true), {
   if (option["name"]:""=="PageSize") sizes=option;
  });
  y2internal("sizes %1", sizes);
  //y2internal("selected %1", ((map)SCR::Read (.ppd.file.options,[Printer::printer["ppd"]:"", ""]))["data"]:$[]);
  y2internal("options %1", Printer::printer["options"]:nil);
  list vals = maplist (string k, sizes["valorder"]:[], ``( [k, sizes["values", k]:k]));
  string default_size = Printer::printer["ppd_options", "PageSize"]:"";
  if (default_size==nil || default_size=="") default_size = sizes["current"]:"";
  if (default_size == "") default_size = sizes["valorder", 0]:"";
  list items=[];
  foreach (list i, (list<list>)vals, {
  items=add(items, `item(`id(i[0]:""), i[1]:"", (i[0]:""==default_size)));
  });

        // read list of banners
        list<string> banners = CUPS::getBannerList ();
        banners = sort (banners);
        // read current settings
        string banner_start = Printer::printer["bannerstart"]:"none";
        string banner_end = Printer::printer["bannerend"]:"none";

        if ("" == banner_start) banner_start = "none";
        if ("" == banner_end) banner_end = "none";
  UI::ChangeWidget(`start_banner, `Items, maplist (string i, banners, ``{ return `item (`id (i), i, i == banner_start); }));
  UI::ChangeWidget(`end_banner, `Items, maplist (string i, banners, ``{ return `item (`id (i), i, i == banner_end); }));

  y2internal("items %1", items);
  y2internal("printer %1", Printer::printer);
//        ));
  UI::ChangeWidget(`paper_size, `Items, items);
 } else {}
}


symbol handleOptions(string key, map event){
 if (event["EventReason"]:""=="Activated" && event["ID"]:nil==`more_driver_options){
 y2internal("show popup");
 UI::OpenDialog(
   `MinSize(35,20,
	`VBox(
                `ReplacePoint (`id (`contents), `VSpacing (1)),
		`HBox(
			`HSpacing(5),
			`PushButton(`id(`cancel), Label::CancelButton()),
			`PushButton(`id(`next), Label::OKButton()),
			`HSpacing(5)
		     ))
          )
	);
  runOptionsDialog();
  UI::CloseDialog();
  initOptions("");
 } else if (event["EventReason"]:""=="ValueChanged" && event["ID"]:nil ==`paper_size){
  storePageSize((string)UI::QueryWidget(`paper_size, `Value));
 }
 return nil;
}

void storeOptions(string key, map event){
 string info = (string)UI::QueryWidget(`description, `Value);
 string loc = (string)UI::QueryWidget(`location, `Value);
 Printer::printer["info"] = info;
 Printer::printer["location"] = loc;

 Printer::printer["bannerstart"] = (string) UI::QueryWidget(`start_banner, `Value);
 Printer::printer["bannerend"]   = (string) UI::QueryWidget(`end_banner, `Value);
 if((boolean)UI::QueryWidget(`default_printer, `Value)) Printer::setDefaultPrinter();
}

void initBasic(string key){
 string uri = Printer::printer["uri"]:"";
 UI::ChangeWidget(`curr_conn, `Value, uri);
	map selected = Printer::printer["options"]:$[];
	map ppd_selected = Printer::printer["ppd_options"]:$[];
 UI::ChangeWidget(`model_name, `Value, sformat("%1 %2",
	Printer::printer["ppd_info", "manufacturer"]:"",
	Printer::printer["ppd_info", "model"]:""));

 Printerdb::InstallDrivers ();
	Printerdb::loadFoomaticIfNeeded ();
 string manuf_db = Printer::printer["ppd_info", "manufacturer_db"]:"";
 string model_db = Printer::printer["ppd_info", "model_db"]:"";
y2internal("manuf_db %1, model_db %2", manuf_db, model_db);
    list cfgs = [];
  list<string> ppds = Printerdb::sortPpds (manuf_db, model_db);
  foreach (string k, ppds, ``{
    y2debug ("V: %1, M: %2, K: %3", manuf_db, model_db, k);

    string filename = k;
    string label = GetPpdFileDescription (
        Printerdb::foomatic[manuf_db, model_db, filename, "nickname"]:"",
        Printerdb::foomatic[manuf_db, model_db, filename, "language"]:"", filename
    );
    cfgs = add (cfgs, `item (`id (k), label));
  });
 UI::ChangeWidget(`drivers, `Items, cfgs);
        string file = Printerdb::getFileFromNickName (
            manuf_db, model_db,
            Printer::printer["ppd_info", "nick"]:"",
            Printer::printer["ppd_info", "language"]:""
            );
 UI::ChangeWidget(`drivers, `CurrentItem, file);
}

symbol handleBasic(string key, map event){
 if (event["EventReason"]:""=="Activated" && event["WidgetID"]:nil==`change_conn){
       term contents = `VBox(
       `ReplacePoint(`id(`contents), `Empty()),
               `HBox(
                       `PushButton(`id(`cancel), Label::CancelButton()),
                       `PushButton(`id(`next), Label::OKButton()))
        );
  UI::OpenDialog(contents);
  runNewQueueDialog(nil);
  UI::CloseDialog();
  initBasic("");
 }
 if (event["EventReason"]:""=="Activated" && event["ID"]:nil==`change_model){
 UI::OpenDialog(`MinSize(100, 30,  `ReplacePoint(`id(`contents), `Empty())));
 ManufModelPopup();
 UI::CloseDialog();
 initBasic("");
 }
 return nil;
}

void storeBasic(string key, map event){
 y2internal("changed ppd %1", UI::QueryWidget(`drivers, `CurrentItem));
  string manuf_db = Printer::printer["ppd_info", "manufacturer_db"]:"";
  string model_db = Printer::printer["ppd_info", "model_db"]:"";
 string file = (string)UI::QueryWidget (`drivers, `CurrentItem);
y2internal("new file %1", file);
     Printer::printer["options"] = $[];
     string filename = (string)SCR::Read (.ppd.file.open, [file, SCR::Read (.target.tmpdir)]);
y2internal("filename %1", filename);
     if (SCR::Read (.target.size, Printer::printer["ppd"]:"") != -1) SCR::Execute (.target.remove, Printer::printer["ppd"]:"");
     Printer::printer["ppd"] = filename;
     Printer::printer["ppd_info"] = Printerdb::PpdInfo (filename);
 // add comment
 if (Printer::printer["info"]:"" == "") Printer::printer["info"] = Printerdb::foomatic[manuf_db, model_db, file, "nickname"]:"";
y2internal("printer %1", Printer::printer);
}

void initStatus(string key){
 boolean accept = Printer::printer["accepting"]:true;
 UI::ChangeWidget(`job_status, `CurrentButton, accept ? `accept_job : `reject_job);
 boolean idle = Printer::printer["state"]:"idle" != "stopped";
 UI::ChangeWidget(`print_status,  `CurrentButton, idle ? `enable_print : `disable_print);
}

void storeStatus(string key, map event){
 Printer::printer["accepting"] = UI::QueryWidget(`job_status, `CurrentButton)==`accept_job;
 Printer::printer["state"] = (UI::QueryWidget(`print_status, `CurrentButton)==`enable_print) ? "idle" : "stopped";
}

void initSharing(string key){
y2internal("initSharing");
 UI::ChangeWidget(`publish_exclude, `Value, !(Printer::printer["shared"]:true));
 UI::ChangeWidget(`hosts, `CurrentButton, `host_allow);
 UI::ChangeWidget(`users, `CurrentButton, `user_allow);

 UI::ChangeWidget(`hosts, `Enabled, false);
 UI::ChangeWidget(`users, `Enabled, false);
 UI::ChangeWidget(`host_exception, `Enabled, false);
 UI::ChangeWidget(`user_exception, `Enabled, false);
 UI::ChangeWidget(`add_host, `Enabled, false);
 UI::ChangeWidget(`add_user, `Enabled, false);
 UI::ChangeWidget(`del_host, `Enabled, false);
 UI::ChangeWidget(`del_user, `Enabled, false);
}

define symbol handleSharing(string key, map event);

boolean IPPopup(symbol widget, string title, boolean validateIP){
	UI::OpenDialog(
	 `VBox(
	  `InputField(`id(`ip), title, ""),
	`HBox(
	 `PushButton(`id(`cancel), Label::CancelButton()),
	 `PushButton(`id(`ok), Label::OKButton())
	 ))
	);
	any ret = UI::UserInput();
	do{
        if (ret==`cancel) {
		UI::CloseDialog();
		return false;
	       }
	 if (ret == `ok){
	 string ip = (string)UI::QueryWidget(`ip, `Value);
	  boolean valid = true;
	  if(validateIP)  {
		if (!IP::Check(ip)) Popup::Error (_("Invalid IP address."));
		valid=false;
		}
	      if (valid) {
		UI::CloseDialog();
		list items = (list)UI::QueryWidget(widget, `Items);
		items = add(items, ip);
		UI::ChangeWidget(widget, `Items, items);
		handleSharing("", $[]);
		return true;
	 }}
	ret = UI::UserInput();
	} while (!(ret == `cancel || ret == `ok));
}

void deleteCurrent(symbol widget){
 list items = (list)UI::QueryWidget(`host_exception, `Items);
 string current = (string)UI::QueryWidget(`host_exception, `CurrentItem);
 items = filter(term row, (list<term>)items, { return (row[1]:""!=current); });
 UI::ChangeWidget(`host_exception, `Items, items);
}

symbol handleSharing(string key, map event){
 UI::ChangeWidget(`del_host, `Enabled, (size((list)UI::QueryWidget(`host_exception, `Items))>0));
 UI::ChangeWidget(`del_user, `Enabled, (size((list)UI::QueryWidget(`user_exception, `Items))>0));
y2internal("event %1", event);
 if (event["EventReason"]:"" == "Activated"){
  switch ((symbol)event["ID"]:nil){
   case `add_host:
		IPPopup(`host_exception, _("IP address"), true);
	break;
   case `del_host:
		deleteCurrent(`host_exception);
	break;
   case `add_user:
		IPPopup(`user_exception, _("Username"), false);
	break;
   case `del_user:
		deleteCurrent(`user_exception);
	break;
  }
 }
 return nil;
}

void storeSharing(string key, map event){
 Printer::printer["shared"] = !(boolean)UI::QueryWidget(`publish_exclude, `Value);
}

 define symbol runNewEditDialog () ``{
  symbol ret=`nil;
 map<string, map <string, any> > widgets = $[
 "options" : $[
	"widget" : `custom,
	"custom_widget" : `VBox(
		`Left( `CheckBox(`id(`default_printer), _("Set As Default")) ),
	`VStretch(),
		`Left( `InputField(`id(`description), _("Description")) ),
		`Left( `InputField(`id(`location), _("Location")) ),
	`VStretch(),
		`CheckBoxFrame(`id(`chb_driver), _("Driver Options"), false, `HBox(
		  `ComboBox(`id(`paper_size), `opt(`notify), _("Default Paper in Your Printer")),
		  `HStretch(),
		  `PushButton(`id(`more_driver_options), _("More Driver Options"))
		)),
	`VStretch(),
	        `HBox(
		 `Frame(`id(`policy), _("Policies"), `HBox(
			`ComboBox(`id(`err_policy), _("Error Policy"), []),
			`ComboBox(`id(`oper_policy), _("Operation Policy"), [])
			)),
		  `HStretch(),
		 `Frame(_("Banners"),  `HBox(
			`ComboBox(`id(`start_banner), _("Starting Banner"), []),
			`ComboBox(`id(`end_banner), _("Ending Banner"), [])
			))
		),
	`VStretch()
	),
	"init" : initOptions,
	"handle" : handleOptions,
	"store" : storeOptions,
	"opt" : [`notify],
	"help" : ""
 ],
  "basic" : $[
        "widget" : `custom,
	"custom_widget" : `VBox(
	`HBox(
	  `Left( `TextEntry(`id(`curr_conn),`opt(`disabled), _("Current Connection"), "") ),
	  `PushButton(`id(`change_conn), _("Change Connection")),
	   `PushButton(`id(`conn_wizard), _("Connection Wizard"))
	 ),
	 `VStretch(),
	`HBox(
	  `Left( `TextEntry(`id(`model_name),`opt(`disabled), _("Model Name"), "") ),
	  `PushButton(`id(`change_model), _("Change Model"))
	 ),
	 `VBox(
/*
	  `HBox(
	   `Left( `InputField(`id(`driver_filter), _("Driver Filter"), "") ),
	   `PushButton(`id(`filter_drivers), _("Show Matching Driver")),
	   ),
*/
		`SelectionBox(`id(`drivers), _("Driver"), []),
		`Right(`PushButton(`id(`add_driver),_("Add Driver")) )
		),
	 `VStretch()
	 ),
	"init" : initBasic,
	"handle" : handleBasic,
	"store" : storeBasic,
/*
                "init"  : initServiceStatus,
                "handle" : handleServiceStatus,
                "store"  : storeServiceStatus,
                "handle_events" : [ "enabled", "disabled" ],
*/
                "opt" : [ `notify ],
                "help" : "",
            ],
 "status" : $[
	"widget" : `custom,
	"custom_widget" : `VBox(
	 `Frame(_("Printout Status"),
	  `RadioButtonGroup(`id(`print_status),
	   `VBox(
	    `Left(`RadioButton(`id(`enable_print), _("Enable Printout"))),
	    `Left(`RadioButton(`id(`disable_print), _("Disable Printout")))
	 ))
	),
	 `Frame(_("Print Job Status"),
	  `RadioButtonGroup(`id(`job_status),
	   `VBox(
	    `Left(`RadioButton(`id(`accept_job), _("Accept Print Jobs"))),
	    `Left(`RadioButton(`id(`reject_job), _("Reject Print Jobs")))
	 ))
	 ),
	`VStretch()
	),
	"opt" : [`notify],
	"init" : initStatus,
	"store" : storeStatus,
	"help": ""
 ],
 "sharing" : $[
	"widget" : `custom,
	"custom_widget" : `VBox(
//	`CheckBoxFrame(`id(`publish_exclude), _("Exclude From Publishing in the Network") , true,
	`Left( `CheckBox(`id(`publish_exclude), _("Exclude From Publishing in the Network")) ),
	 `VBox(
	  `Frame(_("Hosts"),
	   `VBox(
	    `RadioButtonGroup(`id(`hosts), `VBox(
	    `Left(`RadioButton(`id(`host_allow), _("Allow Access for Every Host Except those Specified Below"))),
	    `Left(`RadioButton(`id(`host_deny),  _("Deny Access for Every Host Except those Specified Below")))
	    )),
	  `SelectionBox(`id(`host_exception), "", []),
	  `Left(`HBox(
	   `PushButton(`id(`add_host), Label::AddButton()),
	   `PushButton(`id(`del_host),  Label::DeleteButton())
	   ))
	  )
	 ),
	`Frame(_("Users"),
	 `VBox(
	  `RadioButtonGroup(`id(`users), `VBox(
	   `Left(`RadioButton(`id(`user_allow), _("Allow Printing for Everyone Except Users Specified Below"))),
	   `Left(`RadioButton(`id(`user_deny),  _("Deny Printing for Everyone Except Users Specified Below")))
	   )),
	  `SelectionBox(`id(`user_exception), "", []),
	  `Left(`HBox(
	   `PushButton(`id(`add_user), Label::AddButton()),
	   `PushButton(`id(`del_user),  Label::DeleteButton())
	   ))
	  )
	 ))
	),
	"init": initSharing,
	"handle": handleSharing,
	"store": storeSharing,
	"opt" : [`notify],
	"help": ""
]
];



map tabs_descr =
$[
"options" : $[
	"header" : _("Printer Options"),
	"contents" : `VBox("options"),
	"widget_names" : ["options"]
	],
"basic"	  : $[
	"header" : _("Basic Settings"),
	"contents" : `VBox ( "basic"),
	"widget_names" : ["basic"]
	],
"status"  : $[
	"header" : _("Status"),
	"contents" : `VBox("status"),
	"widget_names" : ["status"]
	],
"sharing" : $[
	"header" : _("Sharing"),
	"contents" : `VBox("sharing"),
	"widget_names" : ["sharing"]
	]
];

    map widget_descr = $[
        "tab": CWMTab::CreateWidget($[
            "tab_order": ["options", "basic", "status", "sharing"],
            "tabs": tabs_descr,
            "widget_descr": widgets,
            "initial_tab" : "options",
            "tab_help" : "",
        ]),
    ];
    string caption = _("Printer Queue Edit Dialog");
    term contents = `VBox( "tab");
    list<map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >)widget_descr);
    contents = CWM::PrepareDialog(contents, w);
    Wizard::SetContentsButtons(caption, contents, "", Label::BackButton (), Label::NextButton ());
    Wizard::RestoreAbortButton();
//    Wizard::DisableBackButton();

    ret = CWM::Run(w, $[]);
  if (ret==`next) Printer::storePrinter();
  return ret;
 }
}
