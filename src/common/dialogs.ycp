/**
 * File:
 *  dialogs.ycp
 * Module:
 *  Printer configurator
 * Summary:
 *  Main dialogs.
 * Authors:
 *  Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 * Main dialogs.
 */
{
    textdomain "printer";


    import "CUPS";
    import "Label";
    import "Mode";
    import "Popup";
    import "Printer";
    import "Printerdb";
    import "Printerlib";
    import "PrinterTest";
    import "Report";
    import "Spooler";
    import "Wizard";
    import "Wizard_hw";

    include "printer/helps.ycp";
    include "printer/misc.ycp";


    /**
      * Read settings dialog
      * @return `abort if aborted and `next otherwise
      */
    global define symbol ReadDialog() ``{
	Wizard::RestoreHelp (getInitProgressHelp ());
	boolean ret = Printer::Read();
	return ret ? `next : `abort;
    }

    /**
      * Write settings dialog
      * @return `abort if aborted and `next otherwise
      */
    global define symbol WriteDialog() ``{
	Wizard::RestoreHelp (getWriteProgressHelp ());
	boolean ret = Printer::Write();
	return ret ? `next : `abort;
    }

    /**
      * Casts value type to integer if you know what I am talking about.
      * @param a value
      * @return integer representation of a
      */
    global define integer AnyToInteger (any a) ``{
	integer c = a;
	return c;
    }

    /**
      * Display printer information popup
      * @param info map containing info about printer from SuSE database
      * @param vdb string database key of printer vendor
      * @param mdb string database key of printer model
      */
    global define void DisplayPrinterPopup (map info, string vdb, string mdb)``{
	string manuf_info = lookup (info, "vendor",
	    // richtext
	    _("<P>No information available.</P>"));
	string model_info = lookup (info, "printer",
	    // richtext
	    _("<P>No information available.</P>"));
	// Manufacturer: ...info... Model: ...info...  1/2
	string info_text = _("<P><B>Manufacturer:</B></P>")
	    + manuf_info +
	    // Manufacturer: ...info... Model: ...info...  2/2
	    _("<P><B>Model:</B></P>") + model_info;
	string support = Printerdb::foomatic[vdb, mdb, `support]:"";

	if (support == "not")
	{
	    info_text =
		// part of richtext
		_("<p><B>This printer is not supported by SuSE Linux.</B></P>")
		+ info_text;
	}

	Popup::LongText (_("Printer information"),
	    // message box caption
	    `RichText (info_text), 50, 18);
    }

    /**
     * Ask about the manufacuturer and the model of the printer.
     * Uses global printer
     * @return symbol `back, `next, `abort
     */
    global define symbol runManufModelDialog () ``{
	y2milestone ("Manuf/model dialog started for %1", Printer::printer);
	map ppd_info = Printer::printer["ppd_info"]:$[];
	string manuf_db = ppd_info["manufacturer_db"]:"";
	string model_db = ppd_info["model_db"]:"";
	if (manuf_db == "")
	    manuf_db = Printer::printer["detected", "vendor_db"]:"";
	if (model_db == "")
	    model_db = Printer::printer["detected", "device_db"]:"";

	map info = $[];
//	boolean info_instead_next = false;

	Printerdb::loadFoomaticIfNeeded ();

        // selection box label
	term manufsel = `SelectionBox (`id (`manufsel), `opt (`notify),
	    // selection boc title
	    _("&Select manufacturer:"),
	    maplist (`k, `v, Printerdb::foomatic, ``(
		`item (`id (k), v[`label]:k))));

	list model_val = [];
	term modelsel = nil;
	term contents = `VBox (`HBox (`HWeight (1, manufsel),
	    `HWeight (1, `ReplacePoint (`id (`modelsel_rep), `HSpacing ()))),
	    `HBox (
		`HStretch (),
		// menubutton
		`MenuButton (`id (`other_ppd), _("Add &PPD File to Database"), [
		    // menubutton item
		    `item (`id (`specifyppd), _("Specify &Local PPD File")),
		    // menubutton item
		    `item (`id (`downloadppd), _("&Download PPD File")),
		]),
//		`HStretch (),
		// Button which provides information about selected
		// manufacturer/model
//		`PushButton (`id (`infobut), `opt (`key_F2), _("&Info")),
		`HStretch ()
	    ));
	// dialog box label
	Wizard::SetContentsButtons (_("Manufacturer and model of the printer"),
	    contents, getManufModelHelp (), Label::BackButton (),
	    Label::NextButton ());

	if (manuf_db == "" || manuf_db == nil)
	{
	    foreach (`k, `v, Printerdb::foomatic, ``{
		if (manuf_db == "" || manuf_db == nil)
		    manuf_db = k;
	    });
	}
	UI::ChangeWidget (`id (`manufsel), `CurrentItem, manuf_db);

	symbol ret = `manufsel;
	while (`abort != ret && `back != ret && ret != `next
	    && ret != `specifyppd && ret != `downloadppd)
	{
	    if (Spooler::Get () != "cups"
		&& (ret == `specifyppd || ret == `downloadppd))
	    {
		// message popup
		Popup::Message (_("PPD files can be added to database
only if using CUPS spooler"));
		ret = nil;
		continue;
	    }
/*	    if (ret == `infobut)
	    {
		if (model_db == "" || model_db == nil)
	        {
	            // popup
	            Popup::Message (_("Select a printer model."));
		    UI::SetFocus (`id (`modelsel));
	        }
		else
		{
		    DisplayPrinterPopup (info, manuf_db, model_db);
		}
	    }*/
	    if (ret == `manufsel)
	    {
		y2debug ("Manuf: %1, W: %2", manuf_db,
		    UI::QueryWidget (`id (`manufsel), `CurrentItem));
		if (manuf_db
			!= UI::QueryWidget (`id (`manufsel), `CurrentItem))
		{
		    y2debug ("Setting manuf_db");
		    manuf_db = UI::QueryWidget (`id (`manufsel), `CurrentItem);
		    model_db = "";
		}
		modelsel = `SelectionBox (`id (`modelsel), `opt (`notify,
		    `immediate),
		    // selection box caption
		    _("Select &model:"),
		    {
			map modelsmap = mapmap (`kk, `vv,
			    filter (`k, `v, Printerdb::foomatic[manuf_db]:$[],
				``(is (k, string))),
			    ``([kk, vv[`label]:kk]));
			return sortitems (modelsmap);
		    });
		UI::ReplaceWidget (`id (`modelsel_rep), modelsel);
		if (! haskey (Printerdb::foomatic[manuf_db]:$[], model_db))
		{
		    foreach (`k, `v, Printerdb::foomatic[manuf_db]:$[], ``{
			if ((model_db == "" || model_db == nil)
			    && is (k, string) && k != "" && k != nil)
			{
			    model_db = k;
			}
		    });
		}
		if (model_db != "")
		    UI::ChangeWidget (`id (`modelsel), `CurrentItem, model_db);
		ret = `modelsel;
	    }
	    if (`modelsel == ret)
	    {
		model_db = UI::QueryWidget (`id (`modelsel), `CurrentItem);
		y2debug ("modelsel changed to %1", model_db);
		info = $[];
//		string type = Printerdb::foomatic[manuf_db,model_db, `support]:"full";
//		info_instead_next = ! ("not" != type);
	    }
	    ret = UI::UserInput ();
	    if (`abort == ret || `cancel == ret)
            {
                ret = reallyAbort () ? `abort : `cont;
                if (ret == `abort) break;
            }
	    if (ret == `next && (model_db == "" || model_db == nil))
	    {
		// popup
		Popup::Message (_("Select a printer model."));
		UI::SetFocus (`id (`modelsel));
		ret = nil;
	    }
	    else if (ret == `next && size (filter (`k, `v,
		Printerdb::foomatic[manuf_db, model_db]:$[],
		``(is (k, string)))) <= 0)
	    {
		// message popup
		string old_text = _("No PPD file available for selected model");

		// richtext - information about support status
		string unsup_message = _("This printer is not supported by SuSE Linux.<BR>
Find information regarding supported and unsupported printers
in your manual or in the support database articles
\"Purchase of Printers and Compatibility\" and \"GDI printers\",
available online at<BR>
http://sdb.suse.de/en/sdb/html/jsmeix_print-kompatibel.html<BR>
and<BR>
http://sdb.suse.de/sdb/en/html/ke_printer-gdi.html<BR>
If the printer can be switched to support a standard
printer language (PostScript, PCL, ESC/P) then it can be
configured as PostScript or PCL or ESC/P printer.<BR>
Please ask the vendor of the printer whether this model
\"understands\" a standard printer language directly (not
through a driver emulation) and how to switch the printer
into the standard printer language mode (e.g. via an
additional PostScript module).");
		term d = `VBox (
		    `HSpacing (40),
		    `RichText (unsup_message),
		    `PushButton (`id (`ok), Label::OKButton ())
                );
		UI::OpenDialog (d);
		UI::UserInput ();
		UI::CloseDialog ();
		ret = nil;
	    }

//	    if (ret == `next && info_instead_next)
//		ret = `infobut;
	}

	if (ret == `next)
	{
	    string ppd_file
		= Printerdb::getAutoPpdFile (manuf_db, model_db, nil);

	    if (ppd_file == nil)
		ppd_file = "";

	    ppd_file = Printerdb::foomatic[manuf_db, model_db, ppd_file,
		"filename"]:"";

	    ppd_file = SCR::Read (.ppd.file.open,
		[ppd_file, SCR::Read (.target.tmpdir)]);

	    Printer::printer = union (Printer::printer, $[
		"ppd" : ppd_file,
		"ppd_info" : Printer::ppdInfo (ppd_file),
	    ]);
	    if (Printer::printer["auto_propose"]:false)
	    {
		ret = `next_propose_queues;
	    }
	}
	y2milestone ("Returning %1, printer set to %2", ret, Printer::printer);
	return ret;
    }

    /**
     * Run dialog
     * @return symbol `back, `next, `abort
     */
    global define symbol runDownloadPpdFile () ``{
	term contents = `HBox (`HStretch (),
	    `VBox (
		`VStretch (),
		// text entry label
		`TextEntry (`id (`url), _("&URL"), "ftp://"),
		`VSpacing (2),
		`HBox (
		    // text entry label
		    `TextEntry (`id (`user), _("&User"), ""),
		    `HSpacing (2),
		    // password text entry label
		    `Password (`id (`pass), _("&Password"), "")
		),
		`VStretch ()
	    ), `HStretch ()
	);
	// dialog caption
	Wizard::SetContents (_("Download PPD File"), contents,
	    downloadHelp(), true, true);

	symbol ret = nil;

	while (ret == nil)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `next)
	    {
		string url = UI::QueryWidget (`id (`url), `Value);
		string user = UI::QueryWidget (`id (`user), `Value);
		string pass = UI::QueryWidget (`id (`pass), `Value);
		list url_parts = splitstring (url, "/");
		string file = url_parts[size (url_parts) - 1]:"ppd.ppd";
		string dir = SCR::Read (.target.tmpdir);
		file = dir + "/" + file;
		if (user != "" && pass != "")
		{
		    string userpass = sformat ("%1:%2", user, pass);
		    SCR::Execute(.curl.setUserPassword, userpass, $[]);
		}
		else if (user != "")
		{
		    // error report
		    Report::Error (_("Set the password."));
		    ret = nil;
		    continue;
		}
		SCR::Execute (.target.bash, sformat (
		    "/bin/rm %1/*", dir));
		// label of popup informing about processed operation
		UI::OpenDialog (`VBox (`Label (_("Downloading File"))));
		y2milestone ("Downloading from %1 to %2", url, file);
		map response = SCR::Execute (.curl.get, url,
		    $["output": file]);
		UI::CloseDialog ();
		y2milestone ("Get file response: %1", response);
		if (response["dsize"]:0 == 0)
		{
		    Report::Error (
// error report
_("An error occurred while downloading the PPD file.
Verify the URL, 
user name, and password.
"));
		    ret = nil;
		    continue;
		}
		if (! processPpdFiles (dir))
		{
		    ret = nil;
		    continue;
		}
            }
	}
	return ret;
    }

    /**
     * Run dialog
     * @return symbol `back, `next, `abort
     */
    global define symbol runInstalledPrinterDialog () ``{
	y2milestone ("running installed printers dialog");
	list(map) printers = getConfiguredPrinters ();
	list items = [];

	integer counter = -1;
	list sel_items= maplist (`p, printers, ``{
	    counter = counter + 1;
	    map ppd_info = p["ppd_info"]:$[];
	    string manuf = ppd_info["manufacturer"]:"";
	    string model = ppd_info["model"]:"";
	    string uri = p["uri"]:"";
	    uri = Printerlib::getUriNiceName (uri);

	    // eg. Epson Stylus Photo 810, Parallel printer on /dev/lp0
	    return `item (`id (counter), sformat (_("%1 %2, %3"),
		manuf, model, uri));
	});

	term contents = `HBox (`HSpacing (2), `VBox (
	    `VSpacing (2),
		// selection box label
	    `SelectionBox (`id (`printers), `opt (`hstretch), _("&Select Printer:"), sel_items),
	    `VSpacing (2)
	), `HSpacing (2));

	// dialog box label
        Wizard::SetContentsButtons (_("Printers"), contents, getPrintersHelp (), Label::BackButton (), Label::NextButton ());
	UI::ChangeWidget (`id (`printers), `CurrentItem, 0);
	symbol ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;

	while (true)
	{
            if (`abort == ret || `cancel == ret)
            {
                ret = reallyAbort () ? `abort : `cont;
                if (ret == `abort) break;
            }
	    else if (`back == ret)
	    {
		break;
	    }
	    else if (`next == ret)
	    {
		integer ind = UI::QueryWidget (`id (`printers), `CurrentItem);
		Printer::printer = eval (printers[ind]:$[]);
		y2milestone ("Selected printer %1", Printer::printer);
		Printer::index = -1;
		map ppd_info = Printer::printer["ppd_info"]:$[];
		Printer::printer["name"] = Printer::generateQueueName (
		    Printer::printer["name"]:nil,
		    Printer::printer["uri"]:"",
                    ppd_info["manufacturer"]:"",
                    ppd_info["model"]:"",
		    Printer::getForbiddenNames ());
		break;
	    }
	    ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	}
	return ret;
    }

    /**
     * Dialog for choosing configuration.
     * @return symbol for wizard sequencer
     */
    global define symbol runPpdSelectDialog () ``{
	y2milestone ("Running config dialog for %1", Printer::printer);
	map ppd_info = Printer::printer["ppd_info"]:$[];
	string manuf_db = ppd_info["manufacturer_db"]:"";
	string model_db = ppd_info["model_db"]:"";
	string config = ppd_info["nick"]:"";
	string orig_config = config;

	map info = $[];
	list cfgs = [];
	map cfgsmap = $[];
	y2milestone ("Vendor: %1, Model: %2", manuf_db, model_db);
	if (! ((manuf_db != "" && model_db != "")))
	{
	    // message popup
	    Popup::Message (_("Cannot determine the model of the printer.
Select model first"));
	    return `back;
	}
	Printerdb::loadFoomaticIfNeeded ();

	list ppds = maplist (`k, `v,
	    filter (`kk, `vv, Printerdb::foomatic[manuf_db, model_db]:$[],
		``(is (kk, string))), ``(k));

	ppds = Printerdb::sortPpds (manuf_db, model_db, ppds);

	cfgs = [];
	foreach (`k, ppds, ``{
	    string ppdfile_orig = "";

	    if (is (k, string))
	    {
		y2debug ("V: %1, M: %2, K: %3", manuf_db, model_db, k);
		ppdfile_orig = Printerdb::foomatic[manuf_db, model_db, k,
		    "filename"]:"";
	    }
	    else
		return;

	    string label = k;
	    string filename = Printerdb::foomatic[manuf_db, model_db,
		config, "filename"]:"";
	    if (filename != "")
	    {
		if (substring (filename, 0, 22) == "/usr/share/cups/model/")
		    filename = substring (filename, 22);
		label = label + sformat (" (%1)", filename);
	    }
	    cfgs = add (cfgs, `item (`id (k), label));
	    cfgsmap[k] = label;
	});

	term contents = `HBox (
	    `HSpacing (1),
	    `VBox (
		    `VSpacing (1),
		    // selection box label
		    `SelectionBox (`id (`selection), `opt (`hstretch), _("&Select PPD file:"), cfgs),
		    `VSpacing (1),
		    `HBox (
			`HStretch (),
			// pushbutton
			`HWeight (1, `PushButton (`id (`test), `opt (`key_F6), _("&Test printing")))
		    ),
		    `VSpacing (1)
		),
	    `HSpacing (1)
	);
	// dialog box label
	string caption = _("PPD Files");
	Wizard::SetContentsButtons (caption, contents, getPpdSelectHelp (), Label::BackButton (), Label::OKButton ());

	if (config != "" && config != nil)
	{
	    UI::ChangeWidget (`id (`selection), `CurrentItem, config);
	}
	if (config == "" || config == nil)
	{
            {
		term item = cfgs[0]:nil;
		if (nil != item)
		{
		    config = select (select (item, 0, nil), 0, "");
		}
            }
	    if (config != "" && config != nil)
	    {
		UI::ChangeWidget (`id (`selection), `CurrentItem, config);
	    }
	}

	any ret = `config;
	string ppd_file = "";
	while (`abort != ret && ret != `back && ret != `next && `advanced != ret)
	{
	    if (`info == ret)
	    {
		// popup
		string i
		    = info["comment"]:_("<P>No information available.</P>");
		// popup header
		Popup::LongText (_("Configuration information"), `RichText (i), 50, 18);
	    }
	    if (`abort == ret)
	    {
		ret = reallyAbort () ? `abort : nil;
	    }
	    if (`test == ret)
	    {
		map tmpPrinter = Printer::printer;
		config = UI::QueryWidget (`id (`selection), `CurrentItem);
        // Why this? The new selected configuration cannot be tested
        // before saving:
		boolean new_file_created = false;
		if (orig_config != config)
		{
		    tmpPrinter["options"] = $[];
		    tmpPrinter = adjustPaperSize (tmpPrinter);
		    string ppd_file_orig = Printerdb::foomatic[manuf_db,
			model_db, config, "filename"]:"";
		    string filename = SCR::Read (.ppd.file.open,
			[ppd_file_orig, SCR::Read (.target.tmpdir)]);
		    tmpPrinter["ppd"] = filename;
		    tmpPrinter["ppd_info"] = Printer::ppdInfo (filename);
		    new_file_created = true;
		}
		PrinterTest::testPrinter (tmpPrinter, `ask);
		if (new_file_created)
		    SCR::Execute (.target.remove, tmpPrinter["ppd"]:"");
	    }
	    ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	}

	if (ret == `advanced || ret == `next)
	{
	    config = UI::QueryWidget (`id (`selection), `CurrentItem);
	    if (orig_config != config)
	    {
		Printer::printer["options"] = $[];
		string ppd_file_orig = Printerdb::foomatic[manuf_db, model_db,
		    config, "filename"]:"";

		string filename = SCR::Read (.ppd.file.open,
		    [ppd_file_orig, SCR::Read (.target.tmpdir)]);

		if (SCR::Read (.target.size, Printer::printer["ppd"]:"") != -1)
		    SCR::Execute (.target.remove, Printer::printer["ppd"]:"");
		Printer::printer["ppd"] = filename;
		Printer::printer["ppd_info"] = Printer::ppdInfo (filename);
	    }
	    // add comment
	    if (Printer::printer["info"]:"" == "")
		Printer::printer["info"] = cfgsmap[config_id]:config_id;
	}
	return ret;
    }

    /**
     * Configuration of printer names.
     * @param allow_auto boolean true if should be allowed to omit printer name
     * @return symbol for wizard seq.
     */
    global define symbol runNameDialog (boolean allow_auto) ``{
	y2milestone ("Running name dialog for %1", Printer::printer);
	list forbidden_names = Printer::getForbiddenNames ();
	string name = Printer::printer["name"]:"";
	string old_name = name;
	string info = Printer::printer["info"]:"";
	string loc = Printer::printer["location"]:"";
	string uri = Printer::printer["uri"]:"";
	string uri_type = Printerlib::getUriType (uri);
	boolean raw = Printer::printer["raw"]:nil;
	if (raw == nil)
	{
	    if (uri_type == "lpd" || uri_type == "ipp")
		raw = true;
	    else
		raw = false;
	}
	boolean ff = Printer::printer["ff"]:false;
	boolean is_class = uri_type == "class";
	boolean auto_propose = Printer::printer["auto_propose"]:false;

	if (allow_auto)
	    allow_auto = ! is_class;

	if (-1 != Printer::index)
	{
	    // remove me from forbidden names
	    forbidden_names = filter (`i, forbidden_names, ``(i != name));
	}

	if (is_class)
	{
	    if (Printer::printer["options"]:$[] == $[])
		Printer::printer["options"] = $["job-sheets": "none,none"];
	}

	term raw_insert = is_class
	    ? `VSpacing (0)
	    : `CheckBox (`id (`raw), `opt (`hstretch),
		// checkbox
		_("Do Local &Filtering"), ! raw);

	term ff_insert = "cups" == Spooler::Get () ? `VSpacing (0) :
	    `CheckBox (`id (`ff), `opt (`hstretch),
		// check box
		_("Print &formfeed between jobs"), ff);

	term aa_insert = allow_auto
	    ? `CheckBox (`id (`auto), `opt (`notify, `hstretch),
		// check box
		_("Automatically Propose &Multiple Queues"), auto_propose)
	    : `VSpacing (0);

	term contents = `VBox (
	    `TextEntry (`id (`name), `opt (`hstretch),
		// text entry
		_("Name for &printing:"), name),
	    `VSpacing (1),
	    `TextEntry (`id (`info), `opt (`hstretch), is_class
		// text entry
		? _("&Description of class")
		// text entry
		: _("&Description of Printer"), info),
	    `TextEntry (`id (`loc), `opt (`hstretch), is_class
		// text entry
		? _("&Location of class")
		// text entry
		: _("&Location of Printer"), loc),
	    `VSpacing (1),
	    raw_insert,
	    ff_insert,
	    `VSpacing (allow_auto ? 1 : 0),
	    aa_insert,
	    `VSpacing (1)
	);
	contents = `HBox (`HSpacing (4),
	    `VBox (
		// frame label
		`Frame (_("Queue name and spooler settings"), contents),
		`VSpacing (is_class ? 0 : 2),
		is_class
		    ? `VSpacing (0)
		    : `PushButton (`id (`test), `opt (`key_F6),
			// push button
			_("&Test printing"))
	    ), `HSpacing (4));

	// dialog box label
	Wizard::SetContentsButtons (
		// dialog caption
		is_class ? _("Class name") : _("Queue name"),
		contents,
		getSpoolInfoHelp (is_class),
		Label::BackButton (),
		Label::NextButton ()
		);
	UI::ChangeWidget (`id (`name), `ValidChars, "_0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");

	if (name == "")
	{
	    if (is_class)
		name = generateClassName (forbidden_names);
	    else
		name = Printer::generateQueueName (nil, uri,
		    Printer::printer["detected", "vendor"]:"",
		    Printer::printer["detected", "device"]:"",
		    forbidden_names);
	    UI::ChangeWidget (`id (`name), `Value, name);
	}

	any ret = nil;
	string fwd = "";
	repeat {
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `auto)
	    {
		auto_propose = UI::QueryWidget (`id (`auto), `Value);
		if (auto_propose)
		{
		    name = UI::QueryWidget (`id (`name), `Value);
		    info = UI::QueryWidget (`id (`info), `Value);
		    UI::ChangeWidget (`id (`name), `Enabled, false);
		    UI::ChangeWidget (`id (`name), `Value, "");
		    UI::ChangeWidget (`id (`info), `Enabled, false);
		    UI::ChangeWidget (`id (`info), `Value, "");
		    if (! is_class)
		    {
			raw = ! UI::QueryWidget (`id (`raw), `Value);
			UI::ChangeWidget (`id (`raw), `Enabled, false);
			UI::ChangeWidget (`id (`raw), `Value, true);
			UI::ChangeWidget (`id (`test), `Enabled, false);
		    }
		    if (Spooler::Get () != "cups")
		    {
			ff = UI::QueryWidget (`id (`ff), `Value);
			UI::ChangeWidget (`id (`ff), `Enabled, false);
			UI::ChangeWidget (`id (`ff), `Value, false);
		    }
		}
		else
		{
		    UI::ChangeWidget (`id (`name), `Enabled, true);
		    UI::ChangeWidget (`id (`name), `Value, name);
		    UI::ChangeWidget (`id (`info), `Enabled, true);
		    UI::ChangeWidget (`id (`info), `Value, info);
		    if (! is_class)
		    {
			UI::ChangeWidget (`id (`raw), `Enabled, true);
			UI::ChangeWidget (`id (`raw), `Value, ! raw);
			UI::ChangeWidget (`id (`test), `Enabled, true);
		    }
		    if (Spooler::Get () != "cups")
		    {
			UI::ChangeWidget (`id (`ff), `Enabled, true);
			UI::ChangeWidget (`id (`ff), `Value, ff);
		    }
		}
	    }
	    else if (ret == `test)
	    {
		raw = ! UI::QueryWidget (`id (`raw), `Value);
		if (! raw)
		{
		    // error report
		    Report::Error (_("Queues that do local filtering cannot be tested
here. Proceed to next dialog to select printer model
and test the queue after the printer model is selected."));
		}
		else
		{
		    map p = Printer::printer;
		    if (Spooler::Get () != "cups")
			p["ff"] = UI::QueryWidget (`id (`ff), `Value);
		    p["name"] = UI::QueryWidget (`id (`name), `Value);
		    p["raw"] = true;
		    PrinterTest::testPrinter (p, `ask);
		}
		ret = nil;
	    }
	    else if (ret == `next)
	    {
		if (! is_class)
		    raw = ! UI::QueryWidget (`id (`raw), `Value);
		if (Spooler::Get () != "cups")
		    ff = UI::QueryWidget (`id (`ff), `Value);
		name = UI::QueryWidget (`id (`name), `Value);
		info = UI::QueryWidget (`id (`info), `Value);
		loc = UI::QueryWidget (`id (`loc), `Value);
		if (allow_auto)
		    auto_propose = UI::QueryWidget (`id (`auto), `Value);
		if (auto_propose || checkLocalQueueName (name, forbidden_names))
		{
		    break;
		}
		ret = nil;
	    }
	    if (`abort == ret || `cancel == ret)
	    {
		ret = reallyAbort () ? `abort : nil;
	    }
	} until (`abort == ret || ret == `back || ret == `next);

	if (ret == `next)
	{
	    Printer::printer["name"] = name;
	    Printer::printer["raw"] = raw;
	    Printer::printer["ff"] = ff;
	    Printer::printer["info"] = info;
	    Printer::printer["location"] = loc;
	    Printer::printer["auto_propose"] = auto_propose;
	    if (raw)
	    {
		ret = `raw;
	    }
	    if (is_class)
		ret = `class;

	    if (old_name != "" && old_name != name)
	    {
		Printer::addToDeleted (
		    old_name, is_class ? "class" : "printer");
	    }
	}
	y2milestone ("Returning %1, printer set to %2", ret, Printer::printer);
	return ret;
    }
    /**
     * Choose one printer from list of printers
     * @return string selected printer
     */
    global define string choosePrinterOrClass () ``{
	list onlyprinters = filter (`e, Printer::printcap, ``(lookup (e, "uri", "class") != "class"));
	list printers =
	    flatten ([
		toset (
		    maplist (`i, filter (
			`e, Printer::printcap, ``(
			    lookup (e, "uri", "class") != "class"
			)
		    ), ``{
			return lookup (i, "name", "");
		    })
		)
	    ]);

	UI::OpenDialog (
		`HBox (
		    `HSpacing (0.7),
		    `VSpacing (16),
		    `VBox (
			`VSpacing (0.5),
			`HSpacing (16),
			// selection box label
			`SelectionBox ( `id (`printers), _("Choose &printer:"), maplist (`i, printers, ``{return `item (`id(i),i);})),
			`HBox (
			    `PushButton (`id (`ok), `opt (`key_F10), Label::OKButton ()),
			    `PushButton (`id (`cancel), `opt (`key_F9), Label::CancelButton ())
			    ),
			`VSpacing (0.3)
			),
		    `HSpacing (0.7)
		    )
		);

	string member = "";
	symbol ret = nil;
	while (true)
	    {
		ret = UI::UserInput ();
		if (`ok == ret)
		    {
			member = UI::QueryWidget (`id (`printers), `CurrentItem);
			break;
		    }
		else if (`cancel == ret)
		    {
			break;
		    }
	    }
	UI::CloseDialog ();
	return member;
    }
    /**
     * Members of class
     * @return symbol `next or `back
     */
    global define symbol runMembersDialog () ``{
	list printers = toset (lookup (Printer::printer, "printers", []));
	term contents =
	    `VBox (
		`ReplacePoint (
		    `id (`replace_members),
		    `SelectionBox(
			`id (`printers),
			// selection box label
			_("&Following printers and classes are members of this class"),
			maplist (`i, printers, ``{
			    return `item (`id (i), i);
			})
			)
		    ),
		`HBox(
		    `PushButton(`id(`add), `opt (`key_F3), Label::AddButton ()),
		    `PushButton(`id(`delete), `opt (`key_F5), Label::DeleteButton ())
		    )
		);
	// dialog label
	Wizard::SetContentsButtons (_("Members of class"), contents, getMembersHelp (), Label::BackButton (), Label::NextButton ());

	symbol ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (`delete == ret)
		{
		    string member_to_delete = UI::QueryWidget (`id (`printers), `CurrentItem);
		    if (nil != member_to_delete)
			{
			    printers = DeleteItem (printers, member_to_delete);
			    UI::ReplaceWidget (
				`id (`replace_members),
				`SelectionBox(
				    `id (`printers),
				    // selection box label
				    _("&Following printers and classes are members of this class"),
				    maplist (`i, printers, ``{
					return `item (`id (i), i);
				    })));
			}
		    else
			{
			    // message box
			    Popup::Message (_("Select printer to delete."));
			}
		}
	    else if (`add == ret)
		{
		    string member_to_add = choosePrinterOrClass ();
		    if (member_to_add != "")
		    {
			printers = toset (add (printers, member_to_add));
			UI::ReplaceWidget (
			    `id (`replace_members),
			    `SelectionBox(
				`id (`printers),
				// selection box label
				_("&Following printers and classes are members of this class"),
				maplist (`i, printers, ``{
				    return `item (`id (i), i);
				})));
		    }
		}
	    else if (`next == ret)
		{
		    if (0 != size (printers))
			{
			    Printer::printer = add (Printer::printer, "printers", printers);
			    break;
			}
		    else
			{
			    // message box
			    Popup::Message (_("Class must contain at least one printer."));
			}
		}
	    else if (`back == ret)
		{
		    break;
		}
	    else if (`abort == ret)
		{
		    if (reallyAbort ())
			{
			    break;
			}
		}
	}
	return ret;
    }

    /**
     * Configuration of the filter. It is quite complicated because there can
     * be depended options so change of value (lower list) can change content
     * of options (upper list).
     * @return symbol for ws
     */
    global define symbol runOptionsDialog () ``{
	if (SCR::Read (.target.size, Printer::printer["ppd"]:"") <= 0)
	{
	    Report::Message (_("Unknown PPD file. Select printer model."));
	    return `back;
	}
	filename = Printer::printer["ppd"]:"";

	y2milestone ("Modifying PPD file %1", filename);

	any vals = nil;

	term test_button =`HWeight (1, `PushButton (`id (`test), `opt (`key_F6),
		// pushbutton
		_("&Test")));

	// dialog caption
	Wizard::SetContentsButtons (_("Configuration options"), `VBox (
		`VWeight (1, `ReplacePoint (`id (`upper), `VSpacing (1))),
		`VWeight (1, `ReplacePoint (`id (`lower), `VSpacing (1))),
		`HBox (`HStretch (), test_button, `HStretch ())
		), getFilterHelp (), Label::BackButton (),Label::NextButton ());

	map selected = Printer::printer["options"]:$[];
	map ppd_selected = Printer::printer["ppd_options"]:$[];

	list opts = [];
	list optlist = [];

	map options = SCR::Read (.ppd.file.options, [filename, ""]);
	optlist = options["data"]:[];
	y2debug ("First option: %1", optlist[0]:$[]);
	optlist = filter (`o, optlist, ``(
	    o["name"]:"" != "PageRegion"
	    && o["name"]:"" != "ImageableArea"
	    && o["mame"]:"" != "PaperDimension"));

	list<string> ppd_options = maplist (map o, optlist, ``(o["name"]:nil));
	ppd_options = filter (string o, ppd_options, ``(o != nil));

	foreach (string k, any v, selected, ``{
	    if (contains (ppd_options, k))
	    {
		ppd_selected[k] = v;
		selected[k] = nil;
	    }
	});
	selected = filter (string k, any v, selected, ``(v != nil));

y2error ("Selected: %1", selected);
y2error ("Selected from PPD: %1", ppd_selected);

	// change the encoding of printable strings
	map ppdinfo = SCR::Read (.ppd.file.ppdinfo, filename);
y2error ("PPD file info: %1", ppdinfo);
	string encoding = ppdinfo["lang_encoding"]:"";
	if (encoding == "")
	    encoding = Language2Encoding (ppdinfo["lang_version"]:"");
	encoding = PPDenc2UIenc (encoding);

	if (encoding != "")
	{
	    optlist = maplist (map o, optlist, ``{
		if (o["name"]:"" != "PageSize"
		    && o["name"]:"" != "InputSlot")
		{
		    o["gui"] = UI::Recode (encoding, "UTF-8", o["gui"]:"");
		}
		o["values"] = mapmap (string k, string v, o["values"]:$[], ``{
		    if (k != "Custom" && o["name"]:"" != "PageSize")
		    {
			v = UI::Recode (encoding, "UTF-8", v);
		    }
		    return [k, v];
		});
		return o;
	    });
	}

	// and now add options without their location in PPD file
	optlist = add (optlist, $[
	    "location" : `lpoptions,
	    "current" : "3",
	    // list item
	    "gui" : _("Orientation"),
	    "name" : "orientation-requested",
	    "type" : "PickOne",
	    "valorder" : ["3", "4", "5", "6"],
	    "values" : $[
		// list item
		"3" : _("Portrait"),
		// list item
		"4" : _("Landscape"),
		// list item
		"5" : _("Reverse"),
		// list item
		"6" : _("Reverse portrait"),
	    ],
	]);
	optlist = add (optlist, $[
	    "location" : `lpoptions,
	    "current" : "1",
	    // list item
	    "gui" : _("Pages per sheet"),
	    "name" : "number-up",
	    "type" : "PickOne",
	    "valorder" : ["1", "2", "4"],
	    "values" : $[
		"1" : "1",
		"2" : "2",
		"4" : "4",
	    ],
	]);
	opts = maplist (`i, optlist, ``(
		`item (`id (i["name"]:""), i["gui"]:"")
	));

	symbol ret = `opts;
	// selection box label
	UI::ReplaceWidget (`id (`upper), `SelectionBox (`id (`opts), `opt (`notify), _("&Options"), opts));

	UI::ChangeWidget (`id (`opts), `CurrentItem,
	    lookup (select (lookup (SCR::Read (.ppd.file.options,
		    [filename, ""]),
		"data", []), 0, $[]), "name", ""));

	string option_type = "";
	string option = "";
	symbol option_loc = nil;

	while (`next != ret && `back != ret && `abort != ret)
	{
	    if (`test == ret)
	    {
		Printer::printer = add (Printer::printer, "options", selected);

		PrinterTest::testPrinter (Printer::printer, `ask);
	    }
	    if (`opts == ret)
	    {
		option = UI::QueryWidget (`id (`opts), `CurrentItem);
		string ppd_default = "";
		foreach (map i, optlist, ``{
		    if (i["name"]:"" == option)
		    {
			option_loc = i["location"]:`ppd;
			option_type = i["type"]:"PickOne";
			vals = maplist (`k, i["valorder"]:$[], ``(
			    [k, i["values", k]:k]
			));
			ppd_default = i["current"]:"";
			if (ppd_default == "")
			    ppd_default = i["valorder", 0]:"";
		    }
		});
		UI::ReplaceWidget (`id (`lower),
		    getWidgetForOption (option_type, vals));
		string current = "";
		if (option_loc == `lpoptions)
		    current = selected[option]:"";
		else
		    current = ppd_selected[option]:"";
		if (current == "")
		    current = ppd_default;
		if (option_type == "Boolean")
		{
		    UI::ChangeWidget (`id (`vals), `CurrentButton, current);
		}
		else if (option_type == "PickMany")
		{
		    if (current == "None")
			current = "";
		    list<string> items = splitstring (current, ",");
		    UI::ChangeWidget (`id (`vals), `SelectedItems, items);
		}
		else
		{
		    UI::ChangeWidget (`id (`vals), `CurrentItem, current);

		}
	    }
	    else if (`vals == ret)
	    {
		string current = "";
		if (option_type == "Boolean")
		{
		    current = UI::QueryWidget (`id (`vals), `CurrentButton);
		}
		else if (option_type == "PickMany")
		{
		    current = mergestring (
			UI::QueryWidget (`id (`vals), `SelectedItems),
			","
		    );
		    if (current == "")
			current = "None";
		}
		else
		{
		    current = UI::QueryWidget (`id (`vals), `CurrentItem);
		}
		if (option_loc == `lpoptions)
		    selected[option] = current;
		else
		    ppd_selected[option] = current;
	    }
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    else if (ret == `next)
	    {
		y2milestone ("Checking constraints");
		list<map> constraints
		    = SCR::Read (.ppd.file.constraints, filename);
		map options = SCR::Read (.ppd.file.options, [filename, ""]);
		list optlist = options["data"]:[];
		map opt2val = $[];
		map opt2gui = $[];
		map opt2val_gui = $[];
		foreach (map o, optlist, ``{
		    string opt_key = o["name"]:"";
		    string opt_gui = o["gui"]:opt_key;
		    string val_key = selected[opt_key]:"";
		    if (val_key == "")
		    {
			val_key = o["current"]:"";
		    }
		    if (val_key == "")
		    {
			val_key = o["valorder", 0]:"";
		    }
		    string val_gui = o["values", val_key]:val_key;
		    opt2val[opt_key] = val_key;
		    opt2gui[opt_key] = opt_gui;
		    opt2val_gui[opt_key] = val_gui;
		});
		constraints = maplist (map c, constraints, ``{
		    if (opt2val[c["option1"]:""]:"" == c["value1"]:" "
			&& opt2val[c["option2"]:""]:"" == c["value2"]:" ")
		    {
			y2debug ("Constraint found between %1 and %2",
			    c["option1"]:"", c["option2"]:"");
			return c;
		    }
		    else
		    {
			return nil;
		    }
		});
		constraints = filter (map c, constraints, ``(c != nil));
		if (size (constraints) > 0)
		{
		    y2milestone ("Failed constraints %1", constraints);
		    list<string> constlist = toset (flatten (
			maplist (map c, constraints, ``(
			    [c["option1"]:"", c["option2"]:""]
			))
		    ));
		    y2debug ("List of failed options: %1", constlist);
		    constlist = maplist (string c, constlist, ``(opt2gui[c]:c));
		    y2debug ("Printable list: %1", constlist);
		    string merged_const = mergestring (constlist, "\n");
		    y2debug ("Failed constraints: %1", merged_const);
		    Report::Error (sformat (
			_("Following options are conflicting:\n\n%1"),
			merged_const
		    ));
		    ret = nil;
		}
	    }
	}
	if (`next == ret)
	{
	    string ps = ppd_selected["PageSize"]:nil;
	    if (ps != nil)
	    {
		ppd_selected["PageRegion"] = ps;
		ppd_selected["ImageableArea"] = ps;
		ppd_selected["PaperDimension"] = ps;
	    }
	    Printer::printer["options"] = selected;
	    Printer::printer["ppd_options"] = ppd_selected;
	}
	return ret;
    }

    /**
     * Create contents for edit dialog. Calls Setwizardcontents at the end.
     */
    global define void createEditDialog () ``{
	map ppd_info = Printer::printer["ppd_info"]:$[];
	string manuf_db = ppd_info["manufacturer_db"]:"";
	string model_db = ppd_info["model_db"]:"";
	string config = ppd_info["nick"]:"";
	string help_text = "";
	// determine printer type ...
	//
	string uri = lookup (Printer::printer, "uri", "");
	string uri_type = Printerlib::getUriType (uri);
	boolean conf_type = lookup (Printer::printer, "type", "yast2") == "yast2";
	boolean know = conf_type || lookup (Printer::printer, "type", "yast2") == "non-yast-now";
	boolean raw = lookup (Printer::printer, "raw", false);
	string model = lookup (Printer::printer, "device", "");

	//
	// texts
	//
	string model_text = sformat ("%1 %2", ppd_info["manufacturer"]:"",
	    ppd_info["model"]:"");
	string config_text = ppd_info["nick"]:"";

	string filename = Printerdb::foomatic[manuf_db, model_db,
	    config, "filename"]:"";
	if (filename != "")
	{
	    if (substring (filename, 0, 22) == "/usr/share/cups/model/")
		filename = substring (filename, 22);
	    config_text = config_text + sformat (" (%1)", filename);
	}

	string name_text = lookup (Printer::printer, "name", "");
	string connection_text = "";
	list items = [];
	string rich = "";

	// table entry
	items = add (items, `item (`id (`name), _("Name and basic settings"), lookup (Printer::printer, "name", "")));
	if ("class" != uri_type)
	{
	    if (! lookup (Printer::printer, "raw", false))
	    {
		// table entry
		items = add (items, `item (`id (`model), _("Printer model"), know ? model_text : _("unknown")));
		// table entry
		items = add (items, `item (`id (`ppd), _("PPD file"), config_text));
	    }
		// table entry
	    items = add (items, `item (`id (`connection), _("Connection"), know ? Printerlib::getUriNiceName (uri) : _("unknown")));
	}
	if ("class" == uri_type)
	{
	// table entry
	    items = add (items, `item (`id (`class_members), _("Class members"), ""));
	// table entry
	    items = add (items, `item (`id (`perm), _("Restrictions settings"), ""));
	// table entry
	    items = add (items, `item (`id (`state), _("State and banners settings"), ""));
	}
	else
	{
	    if (! lookup (Printer::printer, "raw", false))
	    {
	// table entry
		items = add (items, `item (`id (`settings), _("Printing filter settings"), ""));
		if (Spooler::Get () != "cups")
		{
	// table entry
		    items = add (items, `item (`id (`ascii), _("ASCII printing settings"), ""));
		}
		if (Spooler::Get () != "lprng")
		{
	// table entry
		    items = add (items, `item (`id (`perm), _("Restrictions settings"), ""));
	// table entry
		    items = add (items, `item (`id (`state), _("State and banners settings"), ""));
		}
	    }
	}

	term allow_cbox = Printer::index >= 0
	    ? `VBox (
		`Left (`CheckBox (`id (`yast), `opt (`notify),
		    // check box
		    _("&Allow editing of this queue"), conf_type)),
		`VSpacing (1))
	    : `VSpacing (0);

	term contents = `VBox (
	    `VSpacing (1),
	    `HBox (
		`HSpacing (1),
		`VBox (
		    allow_cbox,
			// table header
		    `Table (`id (`options), `opt(`keepSorting, `notify), `header ( _("Option area"),
			// table header
			 _("Current values")), items),
		    `HBox (
			// push button
			`PushButton (`id (`edit), `opt (`key_F4), Label::EditButton ()),
			`HStretch (),
			// push button
			"class" == uri_type ? `HSpacing (0.1) : `PushButton (`id (`test), `opt (`key_F6), _("&Test"))
		    )
		),
		`HSpacing (1)
	    ),
	    `VSpacing (1)
	);

	// dialog caption
	Wizard::SetContentsButtons (_("Edit configuration"), contents, getEditHelp (uri_type, raw, Printer::index >= 0),
	    Label::BackButton (), Label::OKButton ());
	Wizard::RestoreBackButton ();
    }

    /**
     * Complex edit dialog for printer...
     * @return symbol for wizard seq.
     */
    global define symbol runEditDialog () ``{
	any ret = nil;
	createEditDialog ();
	if (lookup (Printer::printer, "type", "yast2") == "yast2")
	{
	    UI::ChangeWidget (`id (`test), `Enabled, true);
	    UI::ChangeWidget (`id (`edit), `Enabled, true);
	}
	else
	{
	    UI::ChangeWidget (`id (`test), `Enabled, false);
	    UI::ChangeWidget (`id (`edit), `Enabled, false);
	}

	while (nil == ret)
	    {
		UI::SetFocus (`id (`options));
		ret = UI::UserInput ();
		if (ret == `options)
		{
		    ret = `edit;
		}
		if (`edit == ret)
		{
		    ret = UI::QueryWidget (`id (`options), `CurrentItem);
		}
		if (`test == ret)
		{
		    ret = nil;
		    PrinterTest::testPrinter (Printer::printer, `ask);
		}
		else if (`abort == ret || `cancel == ret)
		{
		    ret = reallyAbort () ? `abort : nil;
		}
		else if (`yast == ret)
		{
		    boolean state = UI::QueryWidget (`id (`yast), `Value);
		    if (! state)
		    {
			// popup
			if (Popup::YesNo (_("If you forbid editing this queue,\nyou will not be able to change its settings\nusing YaST2. Continue?")))
			{
			    Printer::printer = add (Printer::printer, "type", "non-yast-now");
			    ret = `update;
			}
			else
			{
			    UI::ChangeWidget (`id (`yast), `Value, true);
			    ret = nil;
			}
		    }
		    else if (lookup (Printer::printer, "type", "yast2") == "non-yast-now"
			|| lookup (Printer::printer, "type", "yast2") == "yast2")
		    {
			Printer::printer = add (Printer::printer, "type", "yast2");
			ret = `update;
		    }
		    else
		    {
			// popup
			if (Popup::YesNo (_("The selected queue was not configured 
using YaST2. Do you want to add a printer 
with a prefilled name?
")))
			    ret = `add;
			else
			    ret = nil;
		    }
		}
		else if (`connection == ret)
		{
		    string uri = lookup (Printer::printer, "uri", "");
		    string uri_type = Printerlib::getUriType (uri);
		    ret = lookup ($["samba": `con_samba, "novell": `con_novell, "lpd": `con_lpd,
			"ipp": `con_ipp, "socket": `con_socket, "pipe" : `con_pipe ], uri_type, `connection);
		}
		else if (`perm == ret)
		{
		    break;
		}
		else if (`state == ret)
		{
		    break;
		}
		else if (`ascii == ret)
		{
		    break;
		}
		else if (`config == ret)
		{
		    break;
		}
		else if (`ppd == ret)
		{
		    break;
		}
		if (`update == ret)
		{
		    if (lookup (Printer::printer, "type", "yast2") == "yast2")
		    {
			UI::ChangeWidget (`id (`test), `Enabled, true);
			UI::ChangeWidget (`id (`edit), `Enabled, true);
		    }
		    else
		    {
			UI::ChangeWidget (`id (`test), `Enabled, false);
			UI::ChangeWidget (`id (`edit), `Enabled, false);
		    }
		    ret = nil;
		}
	    }
	return ret;
    }

    /**
      * Start dialog with advanced spooler settings
      * @return symbol for wizzard seq
      */
    global define symbol runAdvancedDialog () ``{
	string new_spooler = Spooler::Get ();
	if (new_spooler == "cups"
	    && CUPS::InstallationType () == `client)
	{
	    new_spooler = "cups-client";
	}

	term contents = `VBox (
	    `VSpacing (1),
	    `HBox (
		`HSpacing (1),
		`VBox (
		    `VStretch (),
		    `HBox (
			`HStretch (),
			// frame
			`Frame (_("Spooler"),
			    getSpoolerItems (new_spooler, false)
			),
			`HStretch ()
		    ),
		    `VStretch (),
		    // checkbox
		    `CheckBox (`id (`save), _("&Force saving everything"),
			Spooler::save_all),
		    `VStretch (),
		    `HBox (`HWeight (999, `HStretch ()), `VBox (
			`PushButton (`id (`reinstall), `opt (`hstretch),
			    // pushbutton
			    _("Re&install printing packages")),
			`VStretch (),
			`PushButton (`id (`scratch), `opt (`hstretch),
			    // pushbutton
			    _("Cl&ear current configuration")),
			Spooler::Get () == "cups" && `server == CUPS::InstallationType () ? `VStretch () :`VSpacing (0),
			// pushbutton
			Spooler::Get () == "cups" && `server == CUPS::InstallationType () ? `PushButton (`id (`cupsd), `opt (`hstretch), _("CUPS server se&ttings")) : `VSpacing (0),
			Spooler::Get () == "cups" && `server == CUPS::InstallationType () ? `VStretch () :`VSpacing (0),
			// pushbutton
			Spooler::Get () == "cups" && `server == CUPS::InstallationType () ? `PushButton (`id (`cupsusb), `opt (`hstretch), _("CUPS &USB Device Settings")) : `VSpacing (0),
			`VStretch ()
		    ), `HWeight (999, `HStretch ()))
		),
		`HSpacing (1)
	    ),
	    `VSpacing (1)
	);

	// dialog caption
	Wizard::SetContentsButtons (_("Edit configuration"), contents,
	    getAdvancedHelp (Spooler::Get () == "cups"
		&& `server == CUPS::InstallationType ()),
	    Label::BackButton (), Label::AcceptButton ());
	Wizard::RestoreBackButton ();
	symbol ret = nil;
	while (nil == ret)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `scratch || ret == `reinstall || ret == `cupsusb
		|| ret == `cupsd)
	    {
		if (Mode::config)
		{
		    Printerlib::DisplayUnavailableAIPopup ();
		    ret = nil;
		}
	    }
	    if (`scratch == ret)
	    {
		if (! Popup::AnyQuestion (Label::WarningMsg(),
		    // popup
		    _("Really discard your configuration?"),
		    Label::YesButton(), Label::NoButton (), `focus_no))
		{
		    ret = nil;
		    continue;
		}
		Printer::Reset ();
		ret = `next;
		break;
	    }
	    else if (`reinstall == ret)
	    {
		if (Mode::cont)
		{
		    Printerlib::DisplayUnavailableAIPopup ();
		    continue;
		}
		// popup
		if (! Popup::AnyQuestion(Label::WarningMsg(),
		    _("Really reinstall your printing system? 
All your changes will be lost.
"),
		    // pushbutton
		    _("&Reinstall"), Label::CancelButton (), `focus_no))
		{
		    ret = nil;
		    continue;
		}
		boolean success = reinstallAll ();
		break;
	    }
	    else if (`cups_server == ret
		|| `cups_client == ret || `lprng == ret)
	    {
		symbol spooler = UI::QueryWidget (`id (`spooler), `CurrentButton);
		string spoolerstring = spooler == `lprng ? "lprng" : (spooler == `cups_client ? "cups-client" : "cups");
	    }
	    else if (`back == ret)
		break;
	    else if (`next == ret)
		break;
	    else if (`abort == ret)
	    {
		if (reallyAbort ())
		    break;
	    }
	    else if (`cupsd == ret)
		break;
	    else if (`cupsusb == ret)
	    {
		break;
	    }
	    ret = nil;

	}
	if (`next == ret)
	{
	    Spooler::save_all = UI::QueryWidget (`id (`save), `Value);
	    symbol spooler = UI::QueryWidget (`id (`spooler), `CurrentButton);
	    if (`cups_server == spooler)
	    {
		CUPS::server_hostname = "";
		if (Spooler::getSpoolSystem () != 2)
		{
		    CUPS::saveClientHostName ();
		    ret = `switch;
		    CUPS::cups_installation = nil;
		    Spooler::RestartIfNeeded (true);
		}
		if (Printer::read_done == false)
		{
		    if (!Printer::queuesRead ())
		    {
			// message box
			Popup::Message (_("ERROR: Unable to read
the current configuration.
"));
		    }
		}
		CUPS::cups_installation = `server;
		CUPS::saveClientHostName ();
		Spooler::RestartIfNeeded (true);
		ret = `cups;
		new_spooler = "cups";
	    }
	    else if (`cups_client == spooler)
	    {
		 CUPS::cups_installation = `client;
		 ret = `cups;
		 new_spooler = "cups";
	    }
	    else if (`lprng == spooler)
	    {
		new_spooler = "lprng";
	    }
	    else
	    {
		new_spooler = Spooler::Get ();
	    }
	    if (Spooler::Get () != new_spooler)
	    {
		Spooler::save_all = true;
		Spooler::reread = false;
		Spooler::switchTo (new_spooler);
		Printer::assignAllQueuesChanged ();
		return `switch;
	    }
	}
	return ret;
    }

    /**
      * Dialog for choosing what kind of devices to use
      * @return wizard sequencer symbol
      */
    global define symbol runCupsUsbDeviceTypeDialog () ``{
	term contents = `HBox (`HStretch (), `VBox (
	    `VStretch (),
	    `RadioButtonGroup (`id (`devtype),
			// frame
		`Frame (_("Use CUPS-Like USB Device Names"),`HBox (
		    `HSpacing (3),
		    `VBox (
			`VSpacing (3),
				// radiobutton
			`Left (`RadioButton (`id (`always), _("&Always"))),
			`Left (`RadioButton (`id (`serial),
				// radiobutton
			    _("If &Serial Number is Known"))),
			// radiobutton
			`Left (`RadioButton (`id (`never), _("&Never"))),
			`VSpacing (3)
		    ),
		    `HSpacing (3)
		)
	    )),
	    `VStretch ()
	), `HStretch ());
	// dialog caption
	Wizard::SetContentsButtons (_("CUPS USB Device Name Type"), contents,
	    getCupsUsbDeviceTypeHelp (), Label::BackButton (), Label::OKButton ());

	UI::ChangeWidget (`id (`devtype), `CurrentButton,
	    CUPS::usb_dev_names);
	ret = nil;
	while (ret == nil)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `abort)
	    {
		if (! reallyAbort ())
		    ret = nil;
	    }
	    else if (ret == `next)
	    {
		CUPS::usb_dev_names
		    = UI::QueryWidget (`id (`devtype), `CurrentButton);
	    }
	}
	return ret;
    }

    /**
      * Decide how to configure autodetected printer
      * @return symbol for ws
      */
    global define symbol detectConfigType () ``{
	symbol ret = nil;
	// new queue to existing printer
	if (Printer::runAutoprobedListDialog__current == -2)
	{
	    y2milestone ("Configuring queue for isntalled printer");
	    return `installed_printer;
	}
	// not detected printer
	else if (Printer::runAutoprobedListDialog__current == -1)
	{
	    y2milestone ("Other undetected printer chosen");
	    ret = `connection;
	}
	// improperly set device/uri
	else if (Printer::printer["uri"]:"" == ""
		|| Printer::printer["uri"]:"" == "parallel:")
	{
	    y2milestone ("Printer device not known");
	    ret = `connection;
	}
	// unsupported spooler
	else if (Spooler::Get () != "cups" && Spooler::Get () != "lprng")
	{
	    y2milestone ("Unknown spooler");
	    ret = `connection;
	}
	else if (Printer::confmode == `adm)
	{
	    y2milestone ("Administration, nothing detected");
	    ret = `connection;
	}

	if (ret == `connection)
	    return `connection;

	string support
	    = Printerdb::foomatic[Printer::printer["detected", "vendor_db"]:"",
		Printer::printer["detected", "device_db"]:"", `support]:"full";

	// check for existence of at least one PPD file
	map PPDs = Printerdb::foomatic[
	    Printer::printer["detected", "vendor_db"]:"",
	    Printer::printer["detected", "device_db"]:""]:$[];
	PPDs = filter (`k, `v, PPDs, ``(is (k, string)));
	if (size (PPDs) < 1)
	{
	    y2milestone ("No PPD file available");
	    ret = `name;
	}
	// check for support status
	else if (support != "full")
	{
	    y2milestone ("Support status isn't fully supported");
	    ret = `name;
	}
	// no reason to ask too much
	else
	{
	    y2milestone ("Supported printer detected");
	    ret = `quick;
	}

	// check CUPS USB device
	if (Spooler::Get () == "cups")
	{
	    Printerlib::setCupsUsbDevicesInfo ();
	    list problematic = Printerlib::getProblematicCupsUsbDevices ();
	    string device = Printerlib::getUriDevice (
		Printer::printer["uri"]:"");
	    if (contains (problematic, device))
	    {
		y2milestone ("Problematic CUPS device detected");
		ret = `connection;
	    }
	}
	return ret;
    }

    /**
     * Popup wanting device name.
     * @param pre_filled TextEntry is pre-set by this value.
     * @return string new device or ""
     */
    global define string getDeviceName (string pre_filled)``{
	symbol ret = `ok;
	UI::OpenDialog (
	    `opt (`decorated),
	    `VBox (
		`TextEntry (`id (`text),
			    // textentry label
			    _("&Enter device:"),
			    pre_filled),
		`HBox (
		    `PushButton (`id (`ok), `opt (`key_F10), Label::OKButton ()),
		    `PushButton (`id (`cancel), `opt (`key_F9), Label::CancelButton ())
		    )
		)
	    );
	ret = UI::UserInput ();
	pre_filled = UI::QueryWidget (`id (`text), `Value);
	UI::CloseDialog ();
	if (`cancel == ret)
	    {
		return "";
	    }
	return pre_filled;
    }

    /**
     * Show printer details in one window
     * @return symbol `back `next `abort
     */
    global define symbol runQueuesProposalDialog () ``{
	y2milestone ("Started queues proposal dialog for %1", Printer::printer);
	map ppd_info = Printer::printer["ppd_info"]:$[];
	string vendor = ppd_info["manufacturer_db"]:"";
	string model = ppd_info["model_db"]:"";
	string config = ppd_info["nick"]:"";
	list queues = getFoomaticAutoQueues (vendor, model, config);
	string default_queue = getFoomaticDefaultQueue (queues);

	term contents = `VBox (
	    `VSpacing (0.7),
	    `HBox (
		`HSpacing (2),
		// frame label
		`VBox (
		    `Heading (
			// heading label
			_("The following print queues have been configured:")
		    ),
		    `VSpacing (0.5),
		    `Table (
			// table header
			`id (`table), `opt (`notify), `header (_("Queue name"),
			    // table header
			     _("Comment")),
			    maplist (`v, queues, ``(
				`item (`id (v["name"]:""), v["name"]:"",
				    v["info"]:"" )))
		    ), // table
		    `VSpacing (0.5),
		    `HBox (
			`HStretch (),
			`PushButton (`id (`test), `opt (`key_F6),
			    // pushbutton
			    _("T&est Printing"))
		    ), // HBox
		    `VSpacing (1)
		), // VBox
		`HSpacing (2)
	    ), // HBox
	    `VSpacing (1)
	); // VBox

	// label of the dialog
	Wizard::SetContentsButtons (_("Printer overview"), contents,
	    getShowPrinterHelp (), Label::BackButton (), Label::OKButton ());

	if (default_queue != nil && default_queue != "")
	    UI::ChangeWidget (`id (`table), `CurrentItem, default_queue);

	symbol ret = nil;
	while (ret == nil)
	{
	    ret = UI::UserInput ();
	    if (ret == `table)
	    {
		ret = `test;
	    }
	    if (`abort == ret || `cancel == ret)
	    {
		ret = `abort;
		if (reallyAbort ())
		{
		    break;
		}
	    }
	    else if (`test == ret)
	    {
		string i = UI::QueryWidget (`id (`table), `CurrentItem);
		if (i == nil || i == "")
		{
		    // message popup
		    Popup::Message (_("Select a queue"));
		}
		else
		{
		    foreach (`e, queues, ``{
			if (lookup (e, "name", "") == i)
			    PrinterTest::testPrinter (e, `ask);
		    });
		}
		ret = nil;
	    }
	    else
	    {
		break;
	    }
	}
	if (`next == ret)
	{
	    boolean set_default = Printer::default == ""
		|| Printer::default == nil;
	    // add queues...
	    map p = Printer::printer;
	    foreach (`v, queues, ``{
		Printer::printer = union (p, v);
		Printer::index = -1;
		Printer::storePrinter ();
	    });
	    if (set_default && default_queue != nil && default_queue != "")
	    {
		Printer::default = default_queue;
	    }
	}
	return ret;
    }

    /**
     * Create contents of table of autodetected printers.
     * @param current_sel currently selected item
     * @return list list of items, `ids are indexes to autoprobed_printers list
     */
    global define list getAutoprobedSelectionBox (integer current_sel) ``{
	integer current = -1;
	boolean selected = false;
	list items = maplist (`i, Printer::autodetected, ``{
	    current = current + 1;
	    if (current == current_sel)
	    {
		selected = true;
	    }

y2error ("detected printer: %1", i);

	    if (isPrinterConfigured (i["manuf"]:"", i["model"]:"", i["uri"]:"",
		i["unique_key"]:""))
	    {
		return nil;
	    }
	    else
		// selection box entry, %1 is printer manufacturer, %2 model
		// %3 device, eg. EPSON Stylus Photo 810 on /dev/usb/lp0
		return `item (`id (current), sformat (_("%1 %2 on %3"),
		    i["vendor"]:"", i["device"]:"",
		    Printerlib::getDeviceNiceName (
			Printerlib::getUriDevice (i["uri"]:""), true)),
			    current == current_sel);
	});
	items = filter (`i, items, ``(i != nil));
	if (size (getConfiguredPrinters ()) > 0)
	{
	    items = add (items, `item (`id (-2),
		// selection box entry
		_("New Queue for Already Configured Printer")));
	}
	// selection box entry
	return add (items, `item (`id (-1), _("Other (not detected)"),
	    !selected));
    }

    /**
     * Restart detection of printers.
     * @return symbol always `next
     */
    global define symbol runProbeDialog () ``{
	Printer::Detect ();
	return `next;
    }

    /**
     * Common detected hardware dialog.
     * @return symbol for ws
     */
    global define symbol runDetectedDialog () ``{
	Printer::confmode = `det;
	term contents = Wizard_hw::DetectedContent (
	    // Selectionbox caption
	    _("Printers to configure"),
	    getAutoprobedSelectionBox (
		Printer::runAutoprobedListDialog__current),
	    true,
	    // richtext caption
	    _("<P>Already installed printers and queues:</P>")
	    + Printer::Summary ([`nonew, `test, `state])
	    );
	// dialog label
	Wizard::SetContentsButtons (_("Printer setup: Autodetected printers"), contents, getDetectedHelp (), Label::BackButton (), Label::FinishButton ());
//	Wizard::ReplaceBackButton(`VSpacing (0));
	any ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (is (ret, string))
	    {
		// request for testing printer...
		Printer::selectPrinterByName (ret);
		PrinterTest::testPrinter (Printer::printer, `ask);
		continue ;
	    }
	    if (`abort == ret)
	    {
		ret = `abort;
		if (reallyAbort ())
		{
		    break;
		}
		continue;
	    }
	    if (`back == ret || `cancel == ret)
	    {
		ret = `back;
		if (reallyExit ())
		    break;
		continue;
	    }
	    else if (`next == ret) // finish
	    {
	    }
	    else if (`configure_button == ret)
	    {
		if (Spooler::Get () == "cups"
		    && CUPS::cups_installation == `client)
		{
		    // popup
		    boolean b = Popup::YesNo (_("Warning!

Your system is configured as a CUPS client only.
Setting any queue will discard these settings.

Continue?
"));
		    if (! b)
			continue;
		    else
		    {
			Spooler::reread = true;
			Printer::queuesRead ();
		    }
		}
		Printer::conf_detected = true;
		Printer::runAutoprobedListDialog__current
		    = UI::QueryWidget (`id (`detected_selbox), `CurrentItem);
		if (Printer::runAutoprobedListDialog__current >= 0)
		{
		    // comments added to go with other printer through
		    // the same sequence
		    Printer::editDetected (
			Printer::autodetected[
			    Printer::runAutoprobedListDialog__current]:$[]);
		}
		else
		{
		    Printer::printer = $[];
		    Printer::index = -1;
		}
	    }
	    break;
	}
	return ret;
    }
    /**
     * Complex dialog.
     * @return symbol for ws
     */
    global define symbol runComplexDialog () ``{
	Printer::confmode = `adm;
	string spoolerlabel = "";
	if (Spooler::Get () == "cups")
	{
	    spoolerlabel = "CUPS";
	}
	else if (Spooler::Get () == "lprng")
	{
	    spoolerlabel = "LPRng";
	}
	else
	{
	    // is %1 in following translation text
	    // "Printer administration for %1"
	    spoolerlabel = _("any spooler");
	}
	Wizard::SetContentsButtons (
	// Header of the dilag with all the printers
	    sformat (_("Printer administration for %1"), spoolerlabel),
	    Wizard_hw::ConfiguredContent (
		(Spooler::Get () == "cups" || Spooler::Get () == "lprng")
		?
			// table header
		    `header (_("Default"),
			// table header
			 _("Name"),
			// table header
			 _("Type"),
			// table header
			 `Center(_("Ready")))
		:
			// table header
		    `header (_("Default"),
			// table header
			 _("Name"),
			// table header
			 _("Type"),
			// table header
			 `Center(_("CUPS")),
			// table header
			 `Center(_("LPRng"))),
		printcapTable (),
		nil, nil,
		`HBox (
		    `HStretch (),
		// push button
		`PushButton (`id (`setdefault), _("&Set as default")),
		// push button
		`PushButton (`id (`advanced), `opt (`key_F7), _("Ad&vanced")),

		    `HStretch ()
		),
		nil
	    ),
	    getComplexHelp (),
	    Label::BackButton (),
	    Label::FinishButton ()
	);
	if (Printer::detection)
	{
	    Wizard::RestoreBackButton ();
	}
	else
	{
//	    Wizard::ReplaceBackButton (`VSpacing (0));
	}
	UI::ChangeWidget (`id (`table), `CurrentItem, -1 == Printer::index ? 0 : Printer::index);
	symbol ret = nil;
	while (true)
	    {
		ret = UI::UserInput ();
		if (ret == `table)
		{
		    ret = `edit_button;
		}
		if (ret == `cancel)
		    ret = `abort;

		if (ret == `add_button)
		{
		    Printer::selectPrinter (-1);
		    Printer::conf_detected = false;
		    return `add;
		}
		else if (ret == `edit_button || ret == `delete_button || ret == `setdefault)
		{
		    Printer::selectPrinter (AnyToInteger (UI::QueryWidget (`id (`table), `CurrentItem)));
		    if (-1 != Printer::index)
		    {
			if (ret == `edit_button)
			{
			    return `edit;
			}
			else if (`delete_button == ret)
			{
			    // message box, %1 is replaced by printer name
			    if (Popup::YesNo (sformat (_("Really delete the \"%1\" printer?"), lookup (Printer::printer, "name", ""))))
				Printer::deletePrinter ();
			    UI::ChangeWidget (`id (`table), `Items, printcapTable ());
			    UI::ChangeWidget (`id (`table), `CurrentItem, Printer::index);
			}
			else
			{
			    Printer::setDefaultPrinter ();
			    UI::ChangeWidget (`id (`table), `Items, printcapTable ());
			    UI::ChangeWidget (`id (`table), `CurrentItem, Printer::index);
			}
		    }
		    else
		    {
			// message box
			Popup::Message (_("Select a printer."));
		    }
		}
		else if (`advanced == ret)
		{
		    break;
		}
		else if (`cancel == ret || `abort == ret)
		{
		    ret = `abort;
		    if (reallyAbort ())
		    {
			break;
		    }
		}
		if (`back == ret)
		{
		    if (Printer::detection || reallyExit())
			break;
		}
		if (`next == ret)
		{
		    break;
		}
		if (`scratch == ret)
		{
			// message box
		    if (! Popup::AnyQuestion(Label::WarningMsg(), _("Really reinstall your printing system? 
All your changes will be lost.
"),
			// push button
			_("&Reinstall"), Label::CancelButton (), `focus_no))
			    continue;
		    boolean success = reinstallAll ();
			break;
		}
	    }
	return ret;
    }
    /**
      * Detect installation type
      * @return symbol `server or `client
      */
    global define symbol getInstType () ``{
	if (Spooler::Get () != "cups")
	    return `server;
	return CUPS::InstallationType ();
    }

    /**
     * We need this wrapper because of wizard sequencer.
     * @return `next for wizard sequencer
     */
    global define symbol storePrinter () ``{
	Printer::storePrinter ();
	return `next; // because of wizard sequencer
    }

}
