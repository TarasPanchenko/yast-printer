/**
 * File:
 *  dialogs.ycp
 * Module:
 *  Printer configurator
 * Summary:
 *  Main dialogs.
 * Authors:
 *  Petr Blahos <pblahos@suse.cz>
 *
 * $Id$
 * Main dialogs.
 */
{
    textdomain "printer";

    import "Wizard_hw";
    import "Printerlib";
    import "Printer";
    import "Arch";

    include "printer/misc.ycp";
    include "printer/helps.ycp";
    include "ui/common_popups.ycp";
    include "ui/file_popups.ycp";
    include "wizard/sequencer.ycp";

    include "printer/dialogs-cups.ycp";
    include "printer/dialogs-lprng.ycp";
    include "printer/testpage.ycp";

    include "printer/dialogs-connection.ycp";


    /**
      * Casts value type to integer if you know what I am talking about.
      * @param a value
      * @return integer representation of a
      */
    global define integer AnyToInteger (any a) ``{
	integer c = a;
	return c;
    }

    /**
      * Display printer information popup
      * @param info map containing info about printer from SuSE database
      * @param vdb string database key of printer vendor
      * @param mdb string database key of printer model
      */
    global define void DisplayPrinterPopup (map info, string vdb, string mdb)``{

                    string manuf_info = lookup (info, "vendor",
			// richtext
                        _("<P>No information available.</P>"));
                    string model_info = lookup (info, "printer",
                        lookup (info, "config",
			// richtext
                        _("<P>No information available.</P>")));
                    // Manufacturer: ...info... Model: ...info...  1/2
                    string info_text = _("<P><B>Manufacturer:</B></P>")
                       + manuf_info +
                        // Manufacturer: ...info... Model: ...info...  2/2
                        _("<P><B>Model:</B></P>") + model_info;
                    integer type = Printer::foomatic[vdb, mdb, `support]:1;

                    if (type != 2 && size (filter (`k, `v,
                            Printer::foomatic[vdb, mdb]:$[],
                            ``(is (k, string)))) == 0)
                    {
/*                        info_text = _("<p><B>This printer can be configured
with the SuSE database of printers only.</B></P>
") + info_text;*/
                    }
                    else if (type == 2)
                        // part of richtext
                        info_text = _("<p><B>This printer is not supported by SuSE Linux.</B></P>") + info_text;

                    // message box caption
                    UI::LongTextPopup (_("Printer information"),
                        `RichText (info_text), 50, 18);


    }

    /**
     * Ask about the manufacuturer and the model of the printer.
     * Uses global printer
     * @return symbol `back, `next, `abort
     */
    global define symbol runManufModelDialog () ``{
	y2milestone ("Manuf/model dialog started for %1", Printer::printer);
	string manuf_db = lookup (Printer::printer, "vendor_db", "");
	string model_db = lookup (Printer::printer, "device_db", "");
	map info = $[];
	boolean info_instead_next = false;

	loadFoomaticIfNeeded ();

        // selection box label
	term manufsel = `SelectionBox (`id (`manufsel), `opt (`notify),
	    // selection boc title
	    _("&Select manufacturer:"),
	    maplist (`k, `v, Printer::foomatic, ``(
		`item (`id (k), v[`label]:k))));

	list model_val = [];
	term modelsel = nil;
	term contents = `VBox (`HBox (`HWeight (1, manufsel),
	    `HWeight (1, `ReplacePoint (`id (`modelsel_rep), `HSpacing ()))),
	    `HBox (
		`HStretch (),
		// pushbutton
		`PushButton (`id (`useppd), _("Use non-YaST2 &ppd file")),
		`HStretch (),
		// Button which provides information about selected
		// manufacturer/model
		`PushButton (`id (`infobut), `opt (`key_F2), _("&Info")),
		`HStretch ()
	    ));
	// dialog box label
	Wizard::SetContentsButtons (_("Manufacturer and model of the printer"),
	    contents, getManufModelHelp (), BackButtonLabel (),
	    NextButtonLabel ());

	if (manuf_db == "" || manuf_db == nil)
	{
	    foreach (`k, `v, Printer::foomatic, ``{
		if (manuf_db == "" || manuf_db == nil)
		    manuf_db = k;
	    });
	}
	UI::ChangeWidget (`id (`manufsel), `CurrentItem, manuf_db);

	symbol ret = `manufsel;
	while (`abort != ret && `back != ret && ret != `next && ret != `useppd)
	{
	    if (ret == `infobut)
	    {
		if (model_db == "" || model_db == nil)
	        {
	            // popup
	            UI::MessagePopup (_("Select a printer model."));
		    UI::SetFocus (`id (`modelsel));
	        }
		else
		{
		    DisplayPrinterPopup (info, manuf_db, model_db);
		}
	    }
	    if (ret == `manufsel)
	    {
		y2debug ("Manuf: %1, W: %2", manuf_db,
		    UI::QueryWidget (`id (`manufsel), `CurrentItem));
		if (manuf_db
			!= UI::QueryWidget (`id (`manufsel), `CurrentItem))
		{
		    y2debug ("Setting manuf_db");
		    manuf_db = UI::QueryWidget (`id (`manufsel), `CurrentItem);
		    model_db = "";
		}
		modelsel = `SelectionBox (`id (`modelsel), `opt (`notify),
		    // selection box caption
		    _("Select &model:"),
		    {
			map modelsmap = mapmap (`kk, `vv,
			    filter (`k, `v, Printer::foomatic[manuf_db]:$[],
				``(is (k, string))),
			    ``([kk, vv[`label]:kk]));
			return sortitems (modelsmap);
		    });
		UI::ReplaceWidget (`id (`modelsel_rep), modelsel);
		if (! haskey (Printer::foomatic[manuf_db]:$[], model_db))
		{
		    foreach (`k, `v, Printer::foomatic[manuf_db]:$[], ``{
			if ((model_db == "" || model_db == nil)
			    && is (k, string) && k != "" && k != nil)
			{
			    model_db = k;
			}
		    });
		}
		if (model_db != "")
		    UI::ChangeWidget (`id (`modelsel), `CurrentItem, model_db);
		ret = `modelsel;
	    }
	    if (`modelsel == ret)
	    {
		model_db = UI::QueryWidget (`id (`modelsel), `CurrentItem);
		y2debug ("modelsel changed to %1", model_db);
		info = $[];
		integer type = Printer::foomatic[manuf_db,model_db, `support]:0;
		info_instead_next = ! (2 != type);
	    }
	    ret = UI::UserInput ();
	    if (`abort == ret || `cancel == ret)
            {
                ret = reallyAbort () ? `abort : `cont;
                if (ret == `abort) break;
            }
	    if (ret == `next && (model_db == "" || model_db == nil))
	    {
		// popup
		UI::MessagePopup (_("Select a printer model."));
		UI::SetFocus (`id (`modelsel));
		ret = nil;
	    }
	    else if (ret == `next && size (filter (`k, `v,
		Printer::foomatic[manuf_db, model_db]:$[],
		``(is (k, string)))) <= 0)
	    {
		UI::MessagePopup (_(
		    // message popup
		    "No PPD file available for selected model"));
		ret = nil;
	    }

	    if (ret == `next && info_instead_next)
		ret = `infobut;
	}

	if (ret == `next)
	{
	    string manuf_ieee = Printer::foomatic[manuf_db, `label]:manuf_db;
	    string model_ieee
		    = Printer::foomatic[manuf_db, model_db, `label]:model_db;
	    string ppd_file = getAutoPpdFile (manuf_db, model_db, nil);
	    if (ppd_file == nil)
		ppd_file = "";
	    Printer::printer = union (Printer::printer, $[
		    "vendor_db" : manuf_db,
		    "device_db" : model_db,
		    "vendor_ieee" : manuf_ieee,
		    "device_ieee" : model_ieee,
		    "database" : "foomatic",
		    "ownppd" : "",
		    "config" : ppd_file,
		    ]);
	    if (Printer::printer["auto_propose"]:false)
	    {
		ret = `next_propose_queues;
	    }
	}
	y2milestone ("Returning %1, printer set to %2", ret, Printer::printer);
	return ret;
    }

    /**
     * Run dialog
     * @return symbol `back, `next, `abort
     */
    global define symbol runInstalledPrinterDialog () ``{
	y2milestone ("running installed printers dialog");
	list(map) printers = getConfiguredPrinters ();
	list items = [];

	integer counter = -1;
	list sel_items= maplist (`p, printers, ``{
	    counter = counter + 1;
	    if (p["ownppd"]:"" != "")
	    {
		string filename = lookup (p, "ownppd", "");
		if (filename != "" && Printer::isPpd (filename))
		{
		    map ppd = Printer::ppdInfo (filename);
		    filename = lookup (ppd, "manufacturer", "") + " : " + lookup (ppd, "model", "");
		}
		y2milestone ("Has own ppd, %1, printer is %2", filename, p);
		// selection box entry: <filename>, Parallel printer on /dev/lp0
		return `item (`id (counter), sformat (_("%1, %2"),
		    filename,
		    Printerlib::getUriNiceName (lookup (p, "uri", ""))));
	    }
		// eg. Epson Stylus Photo 810, Parallel printer on /dev/lp0
	    return `item (`id (counter), sformat (_("%1 %2, %3"),
		lookup (p, "vendor_ieee", ""), lookup (p, "device_ieee", ""),
		Printerlib::getUriNiceName (lookup (p, "uri", ""))));
	});

	term contents = `HBox (`HSpacing (2), `VBox (
	    `VSpacing (2),
		// selection box label
	    `SelectionBox (`id (`printers), `opt (`hstretch), _("&Select Printer:"), sel_items),
	    `VSpacing (2)
	), `HSpacing (2));

	// dialog box label
        Wizard::SetContentsButtons (_("Printers"), contents, getPrintersHelp (), BackButtonLabel (), NextButtonLabel ());
	UI::ChangeWidget (`id (`printers), `CurrentItem, 0);
	symbol ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;

	while (true)
	{
            if (`abort == ret || `cancel == ret)
            {
                ret = reallyAbort () ? `abort : `cont;
                if (ret == `abort) break;
            }
	    else if (`back == ret)
	    {
		break;
	    }
	    else if (`next == ret)
	    {
		integer ind = UI::QueryWidget (`id (`printers), `CurrentItem);
		Printer::printer = eval (printers[ind]:$[]);
		y2milestone ("Selected printer %1", Printer::printer);
		Printer::index = -1;
		Printer::printer["name"] = generateQueueName (
		    Printer::printer["name"]:nil,
		    Printer::printer["uri"]:"",
                    Printer::printer["vendor_ieee"]:"",
                    Printer::printer["device_ieee"]:"",
		    Printer::getForbiddenNames ());
		break;
	    }
	    ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	}
	return ret;
    }

    /**
     * Dialog for choosing configuration.
     * @param ppd_only boolean true if shall not expand PPD files according
     *   to composite options
     * @return symbol for wizard sequencer
     */
    global define symbol runPpdSelectDialog () ``{
	y2milestone ("Running config dialog");
	string manuf_db = lookup (Printer::printer, "vendor_db", "");
	string model_db = lookup (Printer::printer, "device_db", "");
	string config = lookup (Printer::printer, "config", "");
	map info = $[];
	list cfgs = [];
	map cfgsmap = $[];
	boolean foomatic = ((Printer::printer["vendor_db"]:"" != ""
		&& Printer::printer["device_db"]:"" != "")
	    || Printer::printer["ownppd"]:"" != "");
	y2milestone ("Configuring queue %1", Printer::printer);
	if (foomatic)
	{
	    loadFoomaticIfNeeded ();

	    map opts = Printer::printer["options"]:$[];

	    list ppds = maplist (`k, `v, filter (`kk, `vv, Printer::foomatic[manuf_db, model_db]:$[], ``(is (kk, string))), ``(k));

	    if (Printer::printer["ownppd"]:"" != "")
	    {
		y2milestone ("proposing from custom PPD file");
		ppds = [`ownppd];
	    }
	    else
	    {
		ppds = sortPpds (manuf_db, model_db, ppds);
	    }

	    cfgs = [];
	    foreach (`k, ppds, ``{
		string ppdfile_orig = "";

		if (k == `ownppd && Printer::printer["ownppd"]:"" != "")
		    ppdfile_orig = Printer::printer["ownppd"]:"";
		else if (is (k, string))
		{
		    y2debug ("V: %1, M: %2, K: %3", manuf_db, model_db, k);
		    ppdfile_orig = Printer::foomatic[manuf_db, model_db, k, "filename"]:"";
		}

		if (ppdfile_orig == "")
		    return;

		if (k == `ownppd)
		{
		    cfgs = add (cfgs, `item (`id ("_____default_____"),
                            // selection box item
                            _("Default Configuration")));
		    cfgsmap["_____default_____"] = _("Default Configuration");
		}
		else if (is (k, symbol))
		{
		    return;
		}
		else
		{			// done inside agent
		    string label = k;//sformat ("%1 (%2)", k, ppdfile_orig);
		    cfgs = add (cfgs, `item (`id (k), label));
		    cfgsmap[k] = label;
		}

		return;
	    });
	    Printer::printer["database"] = "foomatic";
	}
	else
	{
	    y2error ("Not foomatic!!!");
	}
	term contents = `HBox (
	    `HSpacing (1),
	    `VBox (
		    `VSpacing (1),
		    // selection box label
		    `SelectionBox (`id (`selection), `opt (`hstretch), _("&Select configuration:"), foomatic ? cfgs : select (cfgs, 1, [])),
		    `VSpacing (1),
		    ppd_only ? `VSpacing (0) : `HBox (
			`HStretch (),
			// pushbutton
			`HWeight (1, `PushButton (`id (`test), `opt (`key_F6), _("&Test printing"))),
			// pushbutton
			-1 == Printer::index ? `HWeight (1, `PushButton (`id (`advanced), `opt (`key_F7), _("Ad&vanced settings"))) : `HSpacing (0),
			`HStretch ()
		    ),
		    `VSpacing (ppd_only ? 0 : 1)
		),
	    `HSpacing (1)
	);
	// dialog box label
	string caption = ppd_only ? _("PPD Files")
		// dialog box label
	    : _("Configurations");
	Wizard::SetContentsButtons (caption, contents, ppd_only ? getPpdSelectHelp () : getConfigHelp (), BackButtonLabel (), OKButtonLabel ());

	if (config != "" && config != nil)
	{
	    UI::ChangeWidget (`id (`selection), `CurrentItem, config);
	}
	if (foomatic && (config == "" || config == nil))
	{
            {
		term item = cfgs[0]:nil;
		if (nil != item)
		{
		    config = select (select (item, 0, nil), 0, "");
		}
            }
	    if (config != "" && config != nil)
	    {
		UI::ChangeWidget (`id (`selection), `CurrentItem, config);
	    }
	}

	any ret = `config;
	while (`abort != ret && ret != `back && ret != `next && `advanced != ret)
	{
	    if (`info == ret)
	    {
		// popup
		string i
		    = info["comment"]:_("<P>No information available.</P>");
		// popup header
		UI::LongTextPopup (_("Configuration information"), `RichText (i), 50, 18);
	    }
	    if (`abort == ret)
	    {
		ret = reallyAbort () ? `abort : nil;
	    }
	    if (`test == ret)
	    {
		map tmpPrinter = Printer::printer;
		config = UI::QueryWidget (`id (`selection), `CurrentItem);
        // Why this? The new selected configuration cannot be tested
        // before saving:
		if (lookup (tmpPrinter, "config", "") != config)
		    tmpPrinter = add (tmpPrinter, "options", $[]);
		tmpPrinter = adjustPaperSize (tmpPrinter);
		tmpPrinter = add (tmpPrinter, "config", config);

		testPrinter (tmpPrinter, `ask);
	    }
	    ret = UI::UserInput ();
            if (ret == `cancel)
                ret = `abort;
	}
	if (ret == `advanced)
	{
	    config = UI::QueryWidget (`id (`selection), `CurrentItem);
	    if (lookup (Printer::printer, "config", "") != config)
		Printer::printer = add (Printer::printer, "options", $[]);

	    Printer::printer = add (Printer::printer, "config", config);
	    return ret;
	}
	if (ret == `next || ret == `next_x)
	{
	    if (`next == ret)
		config = UI::QueryWidget (`id (`selection), `CurrentItem);
	    if (lookup (Printer::printer, "config", "") != config)
		Printer::printer = add (Printer::printer, "options", $[]);
	    string config_id = config;
	    // add comment
	    if (Printer::printer["info"]:"" == "")
		Printer::printer["info"] = cfgsmap[config_id]:config_id;

	    Printer::printer = add (Printer::printer, "config", config);
	    // FIXME: check if it is not necessary to clean options.
	    ret = `next;
	}
	return ret;
    }

    /**
     * Configuration of printer names.
     * @param allow_auto boolean true if should be allowed to omit printer name
     * @return symbol for wizard seq.
     */
    global define symbol runNameDialog (boolean allow_auto) ``{
	y2milestone ("Running name dialog for %1", Printer::printer);
	list forbidden_names = Printer::getForbiddenNames ();
	string name = Printer::printer["name"]:"";
	string old_name = name;
	string info = Printer::printer["info"]:"";
	string loc = Printer::printer["location"]:"";
	string uri = Printer::printer["uri"]:"";
	string uri_type = Printerlib::getUriType (uri);
	boolean raw = Printer::printer["raw"]:nil;
	if (raw == nil)
	{
	    if (uri_type == "lpd" || uri_type == "ipp")
		raw = true;
	    else
		raw = false;
	}
	boolean ff = Printer::printer["ff"]:false;
	boolean is_class = uri_type == "class";
	boolean auto_propose = Printer::printer["auto_propose"]:false;

	if (allow_auto)
	    allow_auto = ! is_class;

	if (-1 != Printer::index)
	{
	    // remove me from forbidden names
	    forbidden_names = filter (`i, forbidden_names, ``(i != name));
	}

	if (is_class)
	{
	    if (Printer::printer["options"]:$[] == $[])
		Printer::printer["options"] = $["job-sheets": "none,none"];
	}

	term raw_insert = is_class
	    ? `VSpacing (0)
	    : `CheckBox (`id (`raw), `opt (`hstretch),
		// checkbox
		_("Do local &filtering"), ! raw);

	term ff_insert = "cups" == Printer::spooler ? `VSpacing (0) :
	    // check box
	    `CheckBox (`id (`ff), `opt (`hstretch),
		_("Print &formfeed between jobs"), ff);

	term aa_insert = allow_auto
	    ? `CheckBox (`id (`auto), `opt (`notify, `hstretch),
		_("Automatically propose &multiple queues"), auto_propose)
	    : `VSpacing (0);

	term contents = `VBox (
	    `TextEntry (`id (`name), `opt (`hstretch),
		// text entry
		_("Name for &printing:"), name),
	    `VSpacing (1),
	    `TextEntry (`id (`info), `opt (`hstretch), is_class
		// text entry
		? _("&Description of class")
		// text entry
		: _("&Description of Printer"), info),
	    `TextEntry (`id (`loc), `opt (`hstretch), is_class
		// text entry
		? _("&Location of class")
		// text entry
		: _("&Location of Printer"), loc),
	    `VSpacing (1),
	    raw_insert,
	    ff_insert,
	    `VSpacing (allow_auto ? 1 : 0),
	    aa_insert,
	    `VSpacing (1)
	);
	contents = `HBox (`HSpacing (4),
	    `VBox (
		// frame label
		`Frame (_("Queue name and spooler settings"), contents),
		`VSpacing (is_class ? 0 : 2),
		is_class
		    ? `VSpacing (0)
		    : `PushButton (`id (`test), `opt (`key_F6),
			// push button
			_("&Test printing"))
	    ), `HSpacing (4));

	// dialog box label
	Wizard::SetContentsButtons (
		// dialog caption
		is_class ? _("Class name") : _("Queue name"),
		contents,
		getSpoolInfoHelp (is_class),
		BackButtonLabel (),
		NextButtonLabel ()
		);
	UI::ChangeWidget (`id (`name), `ValidChars, "_0123456789abcdefghijklmnopqrstuvwxyz");

	if (name == "")
	{
	    if (is_class)
		name = generateClassName (forbidden_names);
	    else
		name = generateQueueName (nil, uri,
		    Printer::printer["vendor_ieee"]:"",
		    Printer::printer["device_ieee"]:"", forbidden_names);
	    UI::ChangeWidget (`id (`name), `Value, name);
	}

	any ret = nil;
	string fwd = "";
	repeat {
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `auto)
	    {
		auto_propose = UI::QueryWidget (`id (`auto), `Value);
		if (auto_propose)
		{
		    name = UI::QueryWidget (`id (`name), `Value);
		    info = UI::QueryWidget (`id (`info), `Value);
		    UI::ChangeWidget (`id (`name), `Enabled, false);
		    UI::ChangeWidget (`id (`name), `Value, "");
		    UI::ChangeWidget (`id (`info), `Enabled, false);
		    UI::ChangeWidget (`id (`info), `Value, "");
		    if (! is_class)
		    {
			raw = ! UI::QueryWidget (`id (`raw), `Value);
			UI::ChangeWidget (`id (`raw), `Enabled, false);
			UI::ChangeWidget (`id (`raw), `Value, true);
			UI::ChangeWidget (`id (`test), `Enabled, false);
		    }
		    if (Printer::spooler != "cups")
		    {
			ff = UI::QueryWidget (`id (`ff), `Value);
			UI::ChangeWidget (`id (`ff), `Enabled, false);
			UI::ChangeWidget (`id (`ff), `Value, false);
		    }
		}
		else
		{
		    UI::ChangeWidget (`id (`name), `Enabled, true);
		    UI::ChangeWidget (`id (`name), `Value, name);
		    UI::ChangeWidget (`id (`info), `Enabled, true);
		    UI::ChangeWidget (`id (`info), `Value, info);
		    if (! is_class)
		    {
			UI::ChangeWidget (`id (`raw), `Enabled, true);
			UI::ChangeWidget (`id (`raw), `Value, ! raw);
			UI::ChangeWidget (`id (`test), `Enabled, true);
		    }
		    if (Printer::spooler != "cups")
		    {
			UI::ChangeWidget (`id (`ff), `Enabled, true);
			UI::ChangeWidget (`id (`ff), `Value, ff);
		    }
		}
	    }
	    else if (ret == `test)
	    {
		raw = ! UI::QueryWidget (`id (`raw), `Value);
		if (! raw)
		{
		    Report::Error (_("Only not filtering queues can
be tested here."));
		}
		else
		{
		    map p = Printer::printer;
		    if (Printer::spooler != "cups")
			p["ff"] = UI::QueryWidget (`id (`ff), `Value);
		    p["name"] = tolower (UI::QueryWidget (`id (`name), `Value));
		    p["raw"] = true;
		    testPrinter (p, `ask);
		}
		ret = nil;
	    }
	    else if (ret == `next)
	    {
		if (! is_class)
		    raw = ! UI::QueryWidget (`id (`raw), `Value);
		if (Printer::spooler != "cups")
		    ff = UI::QueryWidget (`id (`ff), `Value);
		name = tolower (UI::QueryWidget (`id (`name), `Value));
		info = UI::QueryWidget (`id (`info), `Value);
		loc = UI::QueryWidget (`id (`loc), `Value);
		if (allow_auto)
		    auto_propose = UI::QueryWidget (`id (`auto), `Value);
		if (auto_propose || (checkName (forbidden_names, name)
					&& checkLocalQueueName (name)))
		{
		    break;
		}
		ret = nil;
	    }
	    if (`abort == ret || `cancel == ret)
	    {
		ret = reallyAbort () ? `abort : nil;
	    }
	} until (`abort == ret || ret == `back || ret == `next);

	if (ret == `next)
	{
	    Printer::printer["name"] = name;
	    Printer::printer["raw"] = raw;
	    Printer::printer["ff"] = ff;
	    Printer::printer["info"] = info;
	    Printer::printer["location"] = loc;
	    Printer::printer["auto_propose"] = auto_propose;
	    if (raw)
	    {
		ret = `raw;
	    }
	    if (is_class)
		ret = `class;

	    if (old_name != "" && old_name != name)
	    {
		Printer::addToDeleted (
		    old_name, is_class ? "class" : "printer");
	    }
	}
	y2milestone ("Returning %1, printer set to %2", ret, Printer::printer);
	return ret;
    }
    /**
     * Choose one printer from list of printers
     * @return string selected printer
     */
    global define string choosePrinterOrClass () ``{
	list onlyprinters = filter (`e, Printer::printcap, ``(lookup (e, "uri", "class") != "class"));
	list printers =
	    flatten ([
		toset (
		    maplist (`i, filter (
			`e, Printer::printcap, ``(
			    lookup (e, "uri", "class") != "class"
			)
		    ), ``{
			return lookup (i, "name", "");
		    })
		)
	    ]);

	UI::OpenDialog (
		`HBox (
		    `HSpacing (0.7),
		    `VSpacing (16),
		    `VBox (
			`VSpacing (0.5),
			`HSpacing (16),
			// selection box label
			`SelectionBox ( `id (`printers), _("Choose &printer:"), maplist (`i, printers, ``{return `item (`id(i),i);})),
			`HBox (
			    `PushButton (`id (`ok), `opt (`key_F10), OKButtonLabel ()),
			    `PushButton (`id (`cancel), `opt (`key_F9), CancelButtonLabel ())
			    ),
			`VSpacing (0.3)
			),
		    `HSpacing (0.7)
		    )
		);

	string member = "";
	symbol ret = nil;
	while (true)
	    {
		ret = UI::UserInput ();
		if (`ok == ret)
		    {
			member = UI::QueryWidget (`id (`printers), `CurrentItem);
			break;
		    }
		else if (`cancel == ret)
		    {
			break;
		    }
	    }
	UI::CloseDialog ();
	return member;
    }
    /**
     * Members of class
     * @return symbol `next or `back
     */
    global define symbol runMembersDialog () ``{
	list printers = toset (lookup (Printer::printer, "printers", []));
	term contents =
	    `VBox (
		`ReplacePoint (
		    `id (`replace_members),
		    `SelectionBox(
			`id (`printers),
			// selection box label
			_("&Following printers and classes are members of this class"),
			maplist (`i, printers, ``{
			    return `item (`id (i), i);
			})
			)
		    ),
		`HBox(
		    `PushButton(`id(`add), `opt (`key_F3), AddButtonLabel ()),
		    `PushButton(`id(`delete), `opt (`key_F5), DeleteButtonLabel ())
		    )
		);
	// dialog label
	Wizard::SetContentsButtons (_("Members of class"), contents, getMembersHelp (), BackButtonLabel (), NextButtonLabel ());

	symbol ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (`delete == ret)
		{
		    string member_to_delete = UI::QueryWidget (`id (`printers), `CurrentItem);
		    if (nil != member_to_delete)
			{
			    printers = DeleteItem (printers, member_to_delete);
			    UI::ReplaceWidget (
				`id (`replace_members),
				`SelectionBox(
				    `id (`printers),
				    // selection box label
				    _("&Following printers and classes are members of this class"),
				    maplist (`i, printers, ``{
					return `item (`id (i), i);
				    })));
			}
		    else
			{
			    // message box
			    UI::MessagePopup (_("Select printer to delete."));
			}
		}
	    else if (`add == ret)
		{
		    string member_to_add = choosePrinterOrClass ();
		    if (member_to_add != "")
		    {
			printers = toset (add (printers, member_to_add));
			UI::ReplaceWidget (
			    `id (`replace_members),
			    `SelectionBox(
				`id (`printers),
				// selection box label
				_("&Following printers and classes are members of this class"),
				maplist (`i, printers, ``{
				    return `item (`id (i), i);
				})));
		    }
		}
	    else if (`next == ret)
		{
		    if (0 != size (printers))
			{
			    Printer::printer = add (Printer::printer, "printers", printers);
			    break;
			}
		    else
			{
			    // message box
			    UI::MessagePopup (_("Class must contain at least one printer."));
			}
		}
	    else if (`back == ret)
		{
		    break;
		}
	    else if (`abort == ret)
		{
		    if (reallyAbort ())
			{
			    break;
			}
		}
	}
	return ret;
    }




    /**
     * Configuration of the filter. It is quite complicated because there can
     * be depended options so change of value (lower list) can change content
     * of options (upper list).
     * @return symbol for ws
     */
    global define symbol runOptionsDialog () ``{
	boolean foomatic = Printer::printer["database"]:"" == "foomatic";
	if (foomatic)
	    loadFoomaticIfNeeded ();
	foomatic = foomatic || Printer::printer["ownppd"]:"" != "";
	string filename = "";
	if (foomatic)
	{
	    string orig_name = Printer::foomatic[Printer::printer["vendor_db"]:"", Printer::printer["device_db"]:"", Printer::printer["config"]:"", "filename"]:"";
	    if (Printer::printer["ownppd"]:"" != "")
		orig_name = Printer::printer["ownppd"]:"";
	    if (orig_name == "")
	    {
		// error report
		Report::Error (_("Unknown PPD file. Select printer model."));
		return `back;
	    }
	    filename = SCR::Read (.ppd.file.open,
		[orig_name, SCR::Read (.target.tmpdir)]);
	    if (filename == "")
	    {
		Report::Error (sformat (
			// error report
		    _("Error occurred while opening PPD file
%1
"),
		    orig_name));
		return `back;
	    }
	}

	Printer::printer = add (Printer::printer, "newer_gs_upp", false);
	map saved = lookup (Printer::printer, "saved", $[]);
	saved = add (saved, "upp_fname", "");
	saved = add (saved, "upp", "");
	Printer::printer = add (Printer::printer, "saved", saved);
	string config = lookup (Printer::printer, "config", "");
	any vals = nil;

	term test_button =`HWeight (1, `PushButton (`id (`test), `opt (`key_F6),
		// pushbutton
		_("&Test")));

	// dialog caption
	Wizard::SetContentsButtons (_("Configuration options"), `VBox (
		`VWeight (1, `ReplacePoint (`id (`upper), `VSpacing (1))),
		`VWeight (1, `ReplacePoint (`id (`lower), `VSpacing (1))),
		`HBox (`HStretch (), test_button, `HStretch ())
		), getFilterHelp (), BackButtonLabel (), NextButtonLabel ());

	map selected = lookup (Printer::printer, "options", $[]);

	list opts = [];
	list optlist = []; // used only for foomatic;
	if (foomatic)
	{
	    map options = SCR::Read (.ppd.file.options, [filename, ""]);
	    optlist = options["data"]:[];
	    y2debug ("First option: %1", optlist[0]:$[]);
	    optlist = filter (`o, optlist, ``(
		o["name"]:"" != "PageRegion"
		&& o["name"]:"" != "ImageableArea"
		&& o["mame"]:"" != "PaperDimension"));
	    optlist = add (optlist, $[
		"current" : "3",
			// list item
		"gui" : _("Orientation"),
		"name" : "orientation-requested",
		"type" : "PickOne",
		"valorder" : ["3", "4", "5", "6"],
				// list item
		"values" : $["3" : _("Portrait"),
				// list item
			"4" : _("Landscape"),
				// list item
			"5" : _("Reverse"),
				// list item
			"6" : _("Reverse portrait"),
		],
	    ]);
	    optlist = add (optlist, $[
		"current" : "1",
			// list item
		"gui" : _("Pages per sheet"),
		"name" : "number-up",
		"type" : "pick_one",
		"valorder" : ["1", "2", "4"],
		"values" : $[
			"1" : "1",
			"2" : "2",
			"4" : "4",
		],
	    ]);
	    opts = maplist (`i, optlist, ``(
		`item (`id (i["name"]:""), i["gui"]:"")
	    ));
	}

	symbol ret = `opts;
	// selection box label
	UI::ReplaceWidget (`id (`upper), `SelectionBox (`id (`opts), `opt (`notify), _("&Options"), opts));

	    UI::ChangeWidget (`id (`opts), `CurrentItem,
		lookup (select (lookup (SCR::Read (.ppd.file.options,
			 [filename, ""]),
		    "data", []), 0, $[]), "name", ""));

	while (`next != ret && `back != ret && `abort != ret)
	{
	    if (`test == ret)
	    {
		Printer::printer = add (Printer::printer, "options", selected);

		testPrinter (Printer::printer, `ask);
	    }
	    if (`opts == ret)
	    {
		    string option = UI::QueryWidget (`id (`opts), `CurrentItem);
		    string ppd_default = "";
		    foreach (`i, optlist, ``{
			if (i["name"]:"" == option)
			{
			    vals = maplist (`k, i["valorder"]:$[], ``(
				`item (`id (k), i["values", k]:k)
			    ));
			    ppd_default = i["current"]:"";
			    if (ppd_default == "")
				ppd_default = i["valorder", 0]:"";
			}
		    });
		    UI::ReplaceWidget (`id (`lower), getValuesUI (vals));
		    // FIXME type of option
		    {
			string current = selected[option]:"";
			if (current == "")
			    current = ppd_default;
			UI::ChangeWidget (`id (`vals), `CurrentItem, current);
		    }
	    }
	    else if (`vals == ret || `vals2 == ret)
	    {
		string o = UI::QueryWidget (`id (`opts), `CurrentItem);
		string v = UI::QueryWidget (`id (`vals), `CurrentItem);
	    }
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	}
	if (`next == ret)
	{
	    string ps = selected["PageSize"]:nil;
	    if (ps != nil)
	    {
		selected["PageRegion"] = ps;
		selected["ImageableArea"] = ps;
		selected["PaperDimension"] = ps;
	    }
	    map saved = lookup (Printer::printer, "saved", $[]);
	    saved = add (saved, "upp_fname", "");
	    saved = add (saved, "upp", "");
	    Printer::printer = add (Printer::printer, "options", selected);
	    Printer::printer = add (Printer::printer, "saved", saved);
	}
	return ret;
    }

    /**
     * Create contents for edit dialog. Calls Setwizardcontents at the end.
     */
    global define void createEditDialog () ``{
	string help_text = "";
	// determine printer type ...
	//
	string uri = lookup (Printer::printer, "uri", "");
	string uri_type = Printerlib::getUriType (uri);
	boolean conf_type = lookup (Printer::printer, "type", "yast2") == "yast2";
	boolean know = conf_type || lookup (Printer::printer, "type", "yast2") == "non-yast-now";
	boolean raw = lookup (Printer::printer, "raw", false);
	boolean foomatic = Printer::printer["database"]:"" == "foomatic";
	string model = lookup (Printer::printer, "device", "");

	//
	// texts
	//
	string model_text = sformat ("%1 %2", Printer::printer["vendor_ieee"]:"",
		Printer::printer["device_ieee"]:"");
	string config_text = "";
	    config_text = Printer::printer["config"]:"";
	string name_text = lookup (Printer::printer, "name", "");
	string connection_text = "";
	list items = [];
	string rich = "";

	// table entry
	items = add (items, `item (`id (`name), _("Name and basic settings"), lookup (Printer::printer, "name", "")));
	if ("class" != uri_type)
	{
	    if (! lookup (Printer::printer, "raw", false))
	    {
		if (lookup (Printer::printer, "ownppd", "") != "")
		{
		    string filename = lookup (Printer::printer, "ownppd", "");
		    if (filename != "" && Printer::isPpd (filename))
		    {
			map ppd = Printer::ppdInfo (filename);
			filename = lookup (ppd, "manufacturer", "") + " : " + lookup (ppd, "model", "");
		    }
		    else
		    {
			filename = "";
		    }
			// table entry
		    items = add (items, `item (`id (`ppd), _("PPD file"), know ? filename : _("unknown")));

		}
		else
		{
			// table entry
		    items = add (items, `item (`id (`model), _("Printer model"), know ? model_text : _("unknown")));
			// table entry
		    items = add (items, `item (`id (`config), _("Printer configuration"), config_text));
		}
	    }
		// table entry
	    items = add (items, `item (`id (`connection), _("Connection"), know ? Printerlib::getUriNiceName (uri) : _("unknown")));
	}
	if ("class" == uri_type)
	{
	// table entry
	    items = add (items, `item (`id (`class_members), _("Class members"), ""));
	// table entry
	    items = add (items, `item (`id (`perm), _("Restrictions settings"), ""));
	// table entry
	    items = add (items, `item (`id (`state), _("State and banners settings"), ""));
	}
	else
	{
	    if (! lookup (Printer::printer, "raw", false))
	    {
	// table entry
		items = add (items, `item (`id (`settings), _("Printing filter settings"), ""));
		if (Printer::spooler != "cups")
		{
	// table entry
		    items = add (items, `item (`id (`ascii), _("ASCII printing settings"), ""));
		}
		if (Printer::spooler != "lprng")
		{
	// table entry
		    items = add (items, `item (`id (`perm), _("Restrictions settings"), ""));
	// table entry
		    items = add (items, `item (`id (`state), _("State and banners settings"), ""));
		}
	    }
	}

	term allow_cbox = Printer::index >= 0
	    ? `VBox (
		`Left (`CheckBox (`id (`yast), `opt (`notify),
		    // check box
		    _("&Allow editing of this queue"), conf_type)),
		`VSpacing (1))
	    : `VSpacing (0);

	term contents = `VBox (
	    `VSpacing (1),
	    `HBox (
		`HSpacing (1),
		`VBox (
		    allow_cbox,
			// table header
		    `Table (`id (`options), `opt(`keepSorting, `notify), `header ( _("Option area"),
			// table header
			 _("Current values")), items),
		    `HBox (
			// push button
			`PushButton (`id (`edit), `opt (`key_F4), EditButtonLabel ()),
			`HStretch (),
			// push button
			"class" == uri_type ? `HSpacing (0.1) : `PushButton (`id (`test), `opt (`key_F6), _("&Test"))
		    )
		),
		`HSpacing (1)
	    ),
	    `VSpacing (1)
	);

	// dialog caption
	Wizard::SetContentsButtons (_("Edit configuration"), contents, getEditHelp (uri_type, raw, Printer::printer["ownppd"]:"" != "", Printer::index >= 0),
	    BackButtonLabel (), OKButtonLabel ());
	Wizard::RestoreBackButton ();
    }

    /**
     * Complex edit dialog for printer...
     * @return symbol for wizard seq.
     */
    global define symbol runEditDialog () ``{
	any ret = nil;
	createEditDialog ();
	if (lookup (Printer::printer, "type", "yast2") == "yast2")
	{
	    UI::ChangeWidget (`id (`test), `Enabled, true);
	    UI::ChangeWidget (`id (`edit), `Enabled, true);
	}
	else
	{
	    UI::ChangeWidget (`id (`test), `Enabled, false);
	    UI::ChangeWidget (`id (`edit), `Enabled, false);
	}

	while (nil == ret)
	    {
		ret = UI::UserInput ();
		if (ret == `options)
		{
		    ret = `edit;
		}
		if (`edit == ret)
		{
		    ret = UI::QueryWidget (`id (`options), `CurrentItem);
		}
		if (`test == ret)
		{
		    ret = nil;
		    testPrinter (Printer::printer, `ask);
		}
		else if (`abort == ret || `cancel == ret)
		{
		    ret = reallyAbort () ? `abort : nil;
		}
		else if (`yast == ret)
		{
		    boolean state = UI::QueryWidget (`id (`yast), `Value);
		    if (! state)
		    {
			// popup
			if (UI::YesNoPopup (_("If you forbid editing this queue,\nyou will not be able to change its settings\nusing YaST2. Continue?")))
			{
			    Printer::printer = add (Printer::printer, "type", "non-yast-now");
			    ret = `update;
			}
			else
			{
			    UI::ChangeWidget (`id (`yast), `Value, true);
			    ret = nil;
			}
		    }
		    else if (lookup (Printer::printer, "type", "yast2") == "non-yast-now"
			|| lookup (Printer::printer, "type", "yast2") == "yast2")
		    {
			Printer::printer = add (Printer::printer, "type", "yast2");
			ret = `update;
		    }
		    else
		    {
			// popup
			if (UI::YesNoPopup (_("The selected queue was not configured 
using YaST2. Do you want to add a printer 
with a prefilled name?
")))
			    ret = `add;
			else
			    ret = nil;
		    }
		}
		else if (`connection == ret)
		{
		    string uri = lookup (Printer::printer, "uri", "");
		    string uri_type = Printerlib::getUriType (uri);
		    ret = lookup ($["samba": `con_samba, "novell": `con_novell, "lpd": `con_lpd,
			"ipp": `con_ipp, "socket": `con_socket, "pipe" : `con_pipe ], uri_type, `connection);
		}
		else if (`perm == ret)
		{
		    break;
		}
		else if (`state == ret)
		{
		    break;
		}
		else if (`ascii == ret)
		{
		    break;
		}
		else if (`config == ret)
		{
		    break;
		}
		else if (`ppd == ret)
		{
		    break;
		}
		if (`update == ret)
		{
		    if (lookup (Printer::printer, "type", "yast2") == "yast2")
		    {
			UI::ChangeWidget (`id (`test), `Enabled, true);
			UI::ChangeWidget (`id (`edit), `Enabled, true);
		    }
		    else
		    {
			UI::ChangeWidget (`id (`test), `Enabled, false);
			UI::ChangeWidget (`id (`edit), `Enabled, false);
		    }
		    ret = nil;
		}
	    }
	return ret;
    }

    /**
      * Start dialog with advanced spooler settings
      * @return symbol for wizzard seq
      */
    global define symbol runAdvancedDialog () ``{
	string new_spooler = Printer::spooler;
	if (new_spooler == "cups"
	    && Printer::cupsInstallationType () == `client)
	{
	    new_spooler = "cups-client";
	}

	term contents = `VBox (
	    `VSpacing (1),
	    `HBox (
		`HSpacing (1),
		`VBox (
		    `VStretch (),
		    `HBox (
			`HStretch (),
			// frame
			`Frame (_("Spooler"),
			    getSpoolerItems (new_spooler, false)
			),
			`HStretch ()
		    ),
		    `VStretch (),
		    // checkbox
		    `CheckBox (`id (`save), _("&Force saving everything"),
			Printer::save_all),
		    `VStretch (),
		    `HBox (`HWeight (999, `HStretch ()), `VBox (
			// pushbutton
			`PushButton (`id (`reinstall), `opt (`hstretch),
			    _("Re&install printing packages")),
			`VStretch (),
			// pushbutton
			`PushButton (`id (`scratch), `opt (`hstretch),
				_("Cl&ear current configuration")),
			Printer::spooler == "cups" && `server == Printer::cupsInstallationType () ? `VStretch () :`VSpacing (0),
			// pushbutton
			Printer::spooler == "cups" && `server == Printer::cupsInstallationType () ? `PushButton (`id (`cupsd), `opt (`hstretch), _("CUPS server se&ttings")) : `VSpacing (0),
			Printer::spooler == "cups" && `server == Printer::cupsInstallationType () ? `VStretch () :`VSpacing (0),
			// pushbutton
			Printer::spooler == "cups" && `server == Printer::cupsInstallationType () ? `PushButton (`id (`cupsusb), `opt (`hstretch), _("CUPS &USB Device Settings")) : `VSpacing (0),
			`VStretch ()
		    ), `HWeight (999, `HStretch ()))
		),
		`HSpacing (1)
	    ),
	    `VSpacing (1)
	);

	// dialog caption
	Wizard::SetContentsButtons (_("Edit configuration"), contents,
	    getAdvancedHelp (Printer::spooler == "cups"
		&& `server == Printer::cupsInstallationType ()),
	    BackButtonLabel (), AcceptButtonLabel ());
	Wizard::RestoreBackButton ();
	symbol ret = nil;
	while (nil == ret)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `scratch || ret == `reinstall || ret == `cupsusb
		|| ret == `cupsd)
	    {
		if (Mode::config)
		{
		    DisplayUnavailableAIPopup ();
		    ret = nil;
		}
	    }
	    if (`scratch == ret)
	    {
		// popup
		if (! UI::AnyQuestionPopup (WarningMsg(),
		    _("Really discard your configuration?"),
		    YesButtonLabel(), NoButtonLabel (), `focus_no))
		{
		    ret = nil;
		    continue;
		}
		Printer::Reset ();
		ret = `next;
		break;
	    }
	    else if (`reinstall == ret)
	    {
		if (Mode::cont)
		{
		    DisplayUnavailableAIPopup ();
		    continue;
		}
		// popup
		if (! UI::AnyQuestionPopup(WarningMsg(),
		    _("Really reinstall your printing system? 
All your changes will be lost.
"),
		    // pushbutton
		    _("&Reinstall"), CancelButtonLabel (), `focus_no))
		{
		    ret = nil;
		    continue;
		}
		boolean success = reinstallAll ();
		break;
	    }
	    else if (`cups_server == ret
		|| `cups_client == ret || `lprng == ret)
	    {
		symbol spooler = UI::QueryWidget (`id (`spooler), `CurrentButton);
		string spoolerstring = spooler == `lprng ? "lprng" : (spooler == `cups_client ? "cups-client" : "cups");
	    }
	    else if (`back == ret)
		break;
	    else if (`next == ret)
		break;
	    else if (`abort == ret)
	    {
		if (reallyAbort ())
		    break;
	    }
	    else if (`cupsd == ret)
		break;
	    else if (`cupsusb == ret)
	    {
		break;
	    }
	    ret = nil;

	}
	if (`next == ret)
	{
	    Printer::save_all = UI::QueryWidget (`id (`save), `Value);
	    symbol spooler = UI::QueryWidget (`id (`spooler), `CurrentButton);
	    if (`cups_server == spooler)
	    {
		Printer::server_hostname = "";
		if (Printerlib::getSpoolSystem () != 2)
		{
		    Printer::saveClientHostName ();
		    ret = `switch;
		    Printer::cups_installation = -1;
		    restartSpoolerIfNeeded (true);
		}
		if (Printer::read_done == false)
		{
		    if (!Printer::Read ())
		    {
			// message box
			UI::MessagePopup (_("ERROR: Unable to read
the current configuration.
"));
		    }
		}
		Printer::cups_installation = `server;
		Printer::saveClientHostName ();
		restartSpoolerIfNeeded (true);
		ret = `cups;
		new_spooler = "cups";
	    }
	    else if (`cups_client == spooler)
	    {
		 Printer::cups_installation = `client;
		 ret = `cups;
		 new_spooler = "cups";
	    }
	    else if (`lprng == spooler)
	    {
		new_spooler = "lprng";
	    }
	    else
	    {
		new_spooler = Printer::spooler;
	    }
	    if (Printer::spooler != new_spooler)
	    {
		Printer::save_all = true;
		Printer::reread = false;
		Printerlib::switchTo (new_spooler);
		return `switch;
	    }
	}
	return ret;
    }

    /**
      * Dialog for choosing what kind of devices to use
      * @return wizard sequencer symbol
      */
    global define symbol runCupsUsbDeviceTypeDialog () ``{
	term contents = `HBox (`HStretch (), `VBox (
	    `VStretch (),
	    `RadioButtonGroup (`id (`devtype),
			// frame
		`Frame (_("Use CUPS-Like USB Device Names"),`HBox (
		    `HSpacing (3),
		    `VBox (
			`VSpacing (3),
				// radiobutton
			`Left (`RadioButton (`id (`always), _("&Always"))),
			`Left (`RadioButton (`id (`serial),
				// radiobutton
			    _("If &Serial Number is Known"))),
			// radiobutton
			`Left (`RadioButton (`id (`never), _("&Never"))),
			`VSpacing (3)
		    ),
		    `HSpacing (3)
		)
	    )),
	    `VStretch ()
	), `HStretch ());
	// dialog caption
	Wizard::SetContentsButtons (_("CUPS USB Device Name Type"), contents,
	    getCupsUsbDeviceTypeHelp (), BackButtonLabel (), OKButtonLabel ());

	UI::ChangeWidget (`id (`devtype), `CurrentButton,
	    Printer::cups_usb_dev_names);
	ret = nil;
	while (ret == nil)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (ret == `abort)
	    {
		if (! reallyAbort ())
		    ret = nil;
	    }
	    else if (ret == `next)
	    {
		Printer::cups_usb_dev_names
		    = UI::QueryWidget (`id (`devtype), `CurrentButton);
	    }
	}
	return ret;
    }

    /**
      * Decide how to configure autodetected printer
      * @retrun symbol for ws
      */
    global define symbol detectConfigType () ``{
	symbol ret = nil;
	// new queue to existing printer
	if (runAutoprobedListDialog__current == -2)
	{
	    y2milestone ("Configuring queue for isntalled printer");
	    return `installed_printer;
	}
	// not detected printer
	else if (runAutoprobedListDialog__current == -1)
	{
	    y2milestone ("Other undetected printer chosen");
	    ret = `connection;
	}
	// improperly set device/uri
	else if ((Printer::printer["bus"]:"" == ""
		|| Printer::printer["dev_name"]:"" == "")
	    && (Printer::printer["uri"]:"" == ""
		|| Printer::printer["uri"]:"" == "parallel:"))
	{
	    y2milestone ("Printer device not known");
	    ret = `connection;
	}
	// unsupported spooler
	else if (Printer::spooler != "cups" && Printer::spooler != "lprng")
	{
	    y2milestone ("Unknown spooler");
	    ret = `connection;
	}
	else if (Printer::confmode == `adm)
	{
	    y2milestone ("Administration, nothing detected");
	    ret = `connection;
	}

	if (ret == `connection)
	    return `connection;

	integer support
	    = Printer::foomatic[Printer::printer["vendor_db"]:"",
		Printer::printer["device_db"]:"", `support]:0;

	// check for existence of at least one PPD file
	map PPDs = Printer::foomatic[
	    Printer::printer["vendor_db"]:"",
	    Printer::printer["device_db"]:""]:$[];
	PPDs = filter (`k, `v, PPDs, ``(is (k, string)));
	if (size (PPDs) < 1)
	{
	    y2milestone ("No PPD file available");
	    ret = `name;
	}
	// check for support status
	else if (support != 0)
	{
	    y2milestone ("Support status isn't fully supported");
	    ret = `name;
	}
	// no reason to ask too much
	else
	{
	    y2milestone ("Supported printer detected");
	    ret = `quick;
	}

	// check CUPS USB device
	if (Printer::spooler == "cups")
	{
	    Printerlib::setCupsUsbDevicesInfo ();
	    list problematic = Printerlib::getProblematicCupsUsbDevices ();
	    string device = Printerlib::getUriDevice (
		Printer::printer["uri"]:"");
	    if (contains (problematic, device))
	    {
		y2milestone ("Problematic CUPS device detected");
		ret = `connection;
	    }
	}
	return ret;
    }

    /**
     * Popup wanting device name.
     * @param pre_filled TextEntry is pre-set by this value.
     * @return string new device or ""
     */
    global define string getDeviceName (string pre_filled)``{
	symbol ret = `ok;
	UI::OpenDialog (
	    `opt (`decorated),
	    `VBox (
		`TextEntry (`id (`text),
			    // textentry label
			    _("&Enter device:"),
			    pre_filled),
		`HBox (
		    `PushButton (`id (`ok), `opt (`key_F10), OKButtonLabel ()),
		    `PushButton (`id (`cancel), `opt (`key_F9), CancelButtonLabel ())
		    )
		)
	    );
	ret = UI::UserInput ();
	pre_filled = UI::QueryWidget (`id (`text), `Value);
	UI::CloseDialog ();
	if (`cancel == ret)
	    {
		return "";
	    }
	return pre_filled;
    }

    /**
     * Show printer details in one window
     * @return symbol `back `next `abort
     */
    global define symbol runQueuesProposalDialog () ``{
	y2milestone ("Started queues proposal dialog for %1", Printer::printer);
	string vendor = Printer::printer["vendor_db"]:"";
	string model = Printer::printer["device_db"]:"";
	string config = Printer::printer["config"]:nil;

	list queues = getFoomaticAutoQueues (vendor, model, config);
	string default_queue = getFoomaticDefaultQueue (queues);

	term contents = `VBox (
	    `VSpacing (0.7),
	    `HBox (
		`HSpacing (2),
		// frame label
		`VBox (
		    `Heading (
			// heading label
			_("The following print queues have been configured:")
		    ),
		    `VSpacing (0.5),
		    `Table (
			// table header
			`id (`table), `opt (`notify), `header (_("Queue name"),
			    // table header
			     _("Comment")),
			    maplist (`v, queues, ``(
				`item (`id (v["name"]:""), v["name"]:"",
				    v["info"]:"" )))
		    ), // table
		    `VSpacing (0.5),
		    `HBox (
			`HStretch (),
			`PushButton (`id (`test), `opt (`key_F6),
			    // pushbutton
			    _("T&est Printing"))
		    ), // HBox
		    `VSpacing (1)
		), // VBox
		`HSpacing (2)
	    ), // HBox
	    `VSpacing (1)
	); // VBox

	// label of the dialog
	Wizard::SetContentsButtons (_("Printer overview"), contents,
	    getShowPrinterHelp (), BackButtonLabel (), OKButtonLabel ());

	if (default_queue != nil && default_queue != "")
	    UI::ChangeWidget (`id (`table), `CurrentItem, default_queue);

	symbol ret = nil;
	while (ret == nil)
	{
	    ret = UI::UserInput ();
	    if (ret == `table)
	    {
		ret = `test;
	    }
	    if (`abort == ret || `cancel == ret)
	    {
		ret = `abort;
		if (reallyAbort ())
		{
		    break;
		}
	    }
	    else if (`test == ret)
	    {
		string i = UI::QueryWidget (`id (`table), `CurrentItem);
		if (i == nil || i != "")
		{
		    // message popup
		    UI::MessagePopup (_("Select a queue"));
		    continue;
		}
		foreach (`e, queues, ``{
		    if (lookup (e, "name", "") == i)
			testPrinter (e, `ask);
		});
		ret = nil;
	    }
	    else
	    {
		break;
	    }
	}
	if (`next == ret)
	{
	    boolean set_default = Printer::default == ""
		|| Printer::default == nil;
	    // add queues...
	    map p = Printer::printer;
	    foreach (`v, queues, ``{
		Printer::printer = union (p, v);
		Printer::index = -1;
		Printer::storePrinter ();
	    });
	    if (set_default && default_queue != nil && default_queue != "")
	    {
		Printer::default = default_queue;
	    }
	}
	return ret;
    }

    /**
     * Create contents of table of autodetected printers.
     * @param current_sel currently selected item
     * @return list list of items, `ids are indexes to autoprobed_printers list
     */
    global define list getAutoprobedSelectionBox (integer current_sel) ``{
	integer current = -1;
	boolean selected = false;
	list items = maplist (`i, Printer::autodetected, ``{
	    current = current + 1;
	    if (current == current_sel)
	    {
		selected = true;
	    }
	    if (isPrinterConfigured (i))
	    {
		return nil;
	    }
	    else
		return `item (`id (current), sformat (_("%1 %2 on %3"),
		    i["vendor"]:"", i["device"]:"",
		    Printerlib::getDeviceNiceName (i["dev_name"]:"", true)),
			  current == current_sel);
	});
	items = filter (`i, items, ``(i != nil));
	if (size (getConfiguredPrinters ()) > 0)
	{
	    items = add (items, `item (`id (-2),
		// selection box entry
		_("New queue for already configured printer")));
	}
	// selection box entry
	return add (items, `item (`id (-1), _("Other (not detected)"),
	    !selected));
    }

    /**
     * Restart detection of printers.
     * @return symbol always `next
     */
    global define symbol runProbeDialog () ``{
	Printer::Detect ();
	return `next;
    }

    /**
     * Common detected hardware dialog.
     * @return symbol for ws
     */
    global define symbol runDetectedDialog () ``{
	Printer::confmode = `det;
	term contents = Wizard_hw::DetectedContent (
	    // Selectionbox caption
	    _("Printers to configure"),
	    getAutoprobedSelectionBox (runAutoprobedListDialog__current),
	    true,
	    // richtext caption
	    _("<P>Already installed printers and queues:</P>")
	    + Printer::Summary ([`nonew, `test, `state])
	    );
	// dialog label
	Wizard::SetContentsButtons (_("Printer setup: Autodetected printers"), contents, getDetectedHelp (), BackButtonLabel (), FinishButtonLabel ());
//	Wizard::ReplaceBackButton(`VSpacing (0));
	any ret = nil;
	while (true)
	{
	    ret = UI::UserInput ();
	    if (ret == `cancel)
		ret = `abort;
	    if (is (ret, string))
	    {
		// request for testing printer...
		Printer::selectPrinterByName (ret);
		testPrinter (Printer::printer, `ask);
		continue ;
	    }
	    if (`abort == ret)
	    {
		ret = `abort;
		if (reallyAbort ())
		{
		    break;
		}
		continue;
	    }
	    if (`back == ret || `cancel == ret)
	    {
		ret = `back;
		if (reallyExit ())
		    break;
		continue;
	    }
	    else if (`next == ret) // finish
	    {
		// message box
		if (Printer::warn_finish && ! Mode::config &&
		  !UI::ContinueCancelPopup (_("Now the changes to your printing 
system will be saved.")))
		{
		    continue;
		}
	    }
	    else if (`configure_button == ret)
	    {
		if (Printer::spooler == "cups"
		    && Printer::cups_installation == `client)
		{
		    // popup
		    boolean b = UI::YesNoPopup (_("Warning!

Your system is configured as CUPS client-only.
Setting any queue will discard these settings.

Continue?"));
		    if (! b)
			continue;
		    else
		    {
			Printer::reread = true;
			Printer::Read ();
		    }
		}
		Printer::conf_detected = true;
		runAutoprobedListDialog__current
		    = UI::QueryWidget (`id (`detected_selbox), `CurrentItem);
		if (runAutoprobedListDialog__current >= 0)
		{
		    // comments added to go with other printer through
		    // the same sequence
		    Printer::editDetected (
			Printer::autodetected[
			    runAutoprobedListDialog__current]:$[]);
		}
		else
		{
		    Printer::printer = $[];
		    Printer::index = -1;
		}
	    }
	    break;
	}
	return ret;
    }
    /**
     * Complex dialog.
     * @return symbol for ws
     */
    global define symbol runComplexDialog () ``{
	Printer::confmode = `adm;
	string spoolerlabel = "";
	if (Printer::spooler == "cups")
	{
	    spoolerlabel = "CUPS";
	}
	else if (Printer::spooler == "lprng")
	{
	    spoolerlabel = "LPRng";
	}
	else
	    spoolerlabel = "any spooler";
	Wizard::SetContentsButtons (
	// Header of the dilag with all the printers
	    sformat (_("Printer administration for %1"), spoolerlabel),
	    Wizard_hw::ConfiguredContent (
		(Printer::spooler == "cups" || Printer::spooler == "lprng")
		?
			// table header
		    `header (_("Default"),
			// table header
			 _("Name"),
			// table header
			 _("Type"),
			// table header
			 `Center(_("Ready")))
		:
			// table header
		    `header (_("Default"),
			// table header
			 _("Name"),
			// table header
			 _("Type"),
			// table header
			 `Center(_("CUPS")),
			// table header
			 `Center(_("LPRng"))),
		printcapTable (),
		nil, nil,
		`HBox (
		    `HStretch (),
		// push button
		`PushButton (`id (`setdefault), _("&Set as default")),
		// push button
		`PushButton (`id (`advanced), `opt (`key_F7), _("Ad&vanced")),

		    `HStretch ()
		),
		nil
	    ),
	    getComplexHelp (),
	    BackButtonLabel (),
	    FinishButtonLabel ()
	);
	if (Printer::detection)
	{
	    Wizard::RestoreBackButton ();
	}
	else
	{
//	    Wizard::ReplaceBackButton (`VSpacing (0));
	}
	UI::ChangeWidget (`id (`table), `CurrentItem, -1 == Printer::index ? 0 : Printer::index);
	symbol ret = nil;
	while (true)
	    {
		ret = UI::UserInput ();
		if (ret == `table)
		{
		    ret = `edit_button;
		}
		if (ret == `cancel)
		    ret = `abort;

		if (ret == `add_button)
		{
		    Printer::selectPrinter (-1);
		    Printer::conf_detected = false;
		    return `add;
		}
		else if (ret == `edit_button || ret == `delete_button || ret == `setdefault)
		{
		    Printer::selectPrinter (AnyToInteger (UI::QueryWidget (`id (`table), `CurrentItem)));
		    if (-1 != Printer::index)
		    {
			if (ret == `edit_button)
			{
			    return `edit;
			}
			else if (`delete_button == ret)
			{
			    // message box, %1 is replaced by printer name
			    if (UI::YesNoPopup (sformat (_("Really delete the \"%1\" printer?"), lookup (Printer::printer, "name", ""))))
				Printer::deletePrinter ();
			    UI::ChangeWidget (`id (`table), `Items, printcapTable ());
			    UI::ChangeWidget (`id (`table), `CurrentItem, Printer::index);
			}
			else
			{
			    Printer::setDefaultPrinter ();
			    UI::ChangeWidget (`id (`table), `Items, printcapTable ());
			    UI::ChangeWidget (`id (`table), `CurrentItem, Printer::index);
			}
		    }
		    else
		    {
			// message box
			UI::MessagePopup (_("Select a printer."));
		    }
		}
		else if (`advanced == ret)
		{
		    break;
		}
		else if (`cancel == ret || `abort == ret)
		{
		    ret = `abort;
		    if (reallyAbort ())
		    {
			break;
		    }
		}
		if (`back == ret)
		{
		    if (Printer::detection || reallyExit())
			break;
		}
		if (`next == ret)
		{
		    // message box
		    if (!Printer::warn_finish || Mode::config || UI::ContinueCancelPopup (Printer::save_all ? _("Now the configuration of the printing 
system will be saved
")
			// message box
			: _("Now the changes to your printing \nsystem will be saved.")))
		    {
			break;
		    }
		}
		if (`scratch == ret)
		{
			// message box
		    if (! UI::AnyQuestionPopup(WarningMsg(), _("Really reinstall your printing system? 
All your changes will be lost.
"),
			// push button
			_("&Reinstall"), CancelButtonLabel (), `focus_no))
			    continue;
		    boolean success = reinstallAll ();
			break;
		}
	    }
	return ret;
    }
    /**
      * Detect installation type
      * @return symbol `server or `client
      */
    global define symbol getInstType () ``{
	if (Printer::spooler != "cups")
	    return `server;
	return Printer::cupsInstallationType ();
    }
    /**
      * Detect current queue configuration type (class/database/ppd)
      * @return symbol `class or `db or `ppd
      */
    global define symbol getQueueConfType () ``{
	if (Printer::printer["ownppd"]:"" != "")
	    return `ppd;
	if (Printer::printer["uri"]:"" == "class")
	    return `class;
	return `db;
    }

    /**
      * Test whether at least one queue will be proposed
      * Get data from internal structures
      * @return symbol `yes or `no
      */
    global define symbol hasPrinterAutoQueue () ``{
	string uri = Printer::printer["uri"]:"";
	string vendor = Printer::printer["vendor_db"]:"";
	string model = Printer::printer["device_db"]:"";
	string config = Printer::printer["config"]:nil;
	y2debug ("Gettinq queues for %1", Printer::printer);
	if (Printer::printer["ownppd"]:"" != "")
	{
	    model = Printer::printer["ownppd"]:"";
	    vendor = "__ownppd__";
	}
	list new_queues = getFoomaticAutoQueues (vendor, model, config);
	if (size (new_queues) > 0)
	{
	    return `yes;
	}
	return `no;
    }

    /**
     * Get map of aliases for wizard sequencer.
     * @return aliases
     */
    global define map getAliases () ``{
	 return $[
	    // switchers, no dialogs
	    "detectconftype" :	[ ``(detectConfigType ()), true],
	    "config_type" :	[ ``(getInstType ()), true, ],
	    "queue_conf_type" :	[ ``(getQueueConfType ()), true, ],
	    "has_auto_queue" :	[ ``(hasPrinterAutoQueue ()), true ],

	    // real dialogs
	    "name_auto" :	``(runNameDialog (true)),
	    "name" :		``(runNameDialog (false)),
            "detected" :        ``(runDetectedDialog ()),
            "complex" :         ``(runComplexDialog ()),
	    "model" :           ``(runManufModelDialog ()),
	    "inst_printer" :    ``(runInstalledPrinterDialog ()),
	    "queues_proposal" : ``(runQueuesProposalDialog ()),

		// connection selection
	    "connection_type" :	``(runConnectionTypeDialog ()),
	    "connection_local" :``(runLocalConnectionDialog ()),
	    "connection_cups" : ``(runCupsConnectionDialog ()),
	    "connection_direct":``(runDirectConnectionDialog ()),
	    "connection_other": ``(runOtherConnectionDialog ()),
		// by connection type
		    // local
	    "parallel" :	``(runDeviceDialog ("parallel")),
	    "serial" :          ``(runDeviceDialog ("serial")),
	    "usb" :             ``(runDeviceDialog ("usb")),
	    "irda" :            ``(runDeviceDialog ("irda")),
			// special
	    "ppdetails" :       ``(editParallelPort ()),
            "spdetails" :       ``(editSerialPort ()),
		    // remote
	    "lpd" :             ``(runRemoteDialog ("lpd")),
	    "ipp" :             ``(runRemoteDialog ("ipp")),
	    "samba" :           ``(runRemoteDialog ("samba")),
	    "novell" :          ``(runRemoteDialog ("novell")),
	    "socket" :          ``(runRemoteDialog ("socket")),
		    // other
	    "pipe" :            ``(runPipeDialog ()),
	    "other" :           ``(runUriDialog()),
		    // cups-only
	    "listen_ipp_bcast": ``(runListenIPPDialog ()),
	    "cups_client" :     ``(runCupsClientDialog (false)),


		// cups only


		// lprng only


	    // sequences


	    "advanced" :	``(runAdvancedDialog ()),
	    "cupsd" :		``(runCupsServerDialog ()),
            "cupsaclroot" :	``(runCupsAclDialog (`root)),
            "cupsacladmin" :	``(runCupsAclDialog (`admin)),
            "cupsaclprinters" :	``(runCupsAclDialog (`printers)),
            "cupsaclclasses" :	``(runCupsAclDialog (`classes)),
	    "cups_client_main":	``(runCupsClientDialog (true)),
	    "useppd" :		``(runSelectPpdFile ()),
	    "ppdselect" :	``(runPpdSelectDialog ()),
	    "members" :		``(runMembersDialog ()),
	    "filter" :		``(runOptionsDialog ()),
	    "features" :	``(runFeaturesDialog ()),
	    "users" :		``(runUsersDialog ()),
	    "state" :		``(runStateDialog ()),
	    "edit" :		``(runEditDialog ()),
	    "single" :		``(runSinglePrinterDialog ()),
	    "redetect" :	[ ``(runProbeDialog ()), true ],
	    "storeprinter" :	[ ``(storePrinter ()) , true ],
	    "main_wz" :		``(WizardSequencer (getAliases (), main_sequence)),
	    "add_printer_wz" :	``(WizardSequencer (getAliases (), add_printer_sequence)),
	    "edit_printer_wz" :	``(WizardSequencer (getAliases (), edit_printer_sequence)),
	    "cups_usb" :	``(runCupsUsbDeviceTypeDialog ()),
	    ];
    }
    /**
     * Show all dialogs with some fake data...
     */
    global define void testDialogs () ``{
	Printer::printcap = [
	    $["conf":$[], "config":"gs-stp-canon-bjc-6100-color-high", "device":"canon-bjc-6100", "device_ieee":"BJC-6100", "name":"best", "options":$["papersize-all-inkjet":1], "type":"yast2", "unique_key":"Kns9.VeHHAhw8MvA", "uri":"usb:/dev/usb/lp0", "vendor":"canon", "vendor_ieee":"Canon"],
	    $["conf":$[], "config":"gs-stp-canon-bjc-6100-color-low", "device":"canon-bjc-6100", "device_ieee":"BJC-6100", "name":"color", "options":$["papersize-all-inkjet":1], "type":"yast2", "unique_key":"Kns9.VeHHAhw8MvA", "uri":"usb:/dev/usb/lp0", "vendor":"canon", "vendor_ieee":"Canon"],
	    $["conf":$[], "config":"gs-stp-canon-bjc-6100-color-medium", "device":"canon-bjc-6100", "device_ieee":"BJC-6100", "name":"high", "options":$["papersize-all-inkjet":1], "type":"yast2", "unique_key":"Kns9.VeHHAhw8MvA", "uri":"usb:/dev/usb/lp0", "vendor":"canon", "vendor_ieee":"Canon"],
	    $["conf":$[], "config":"gs-stp-canon-bjc-6100-mono-low", "device":"canon-bjc-6100", "device_ieee":"BJC-6100", "name":"lp", "options":$["papersize-all-inkjet":1], "type":"yast2", "unique_key":"Kns9.VeHHAhw8MvA", "uri":"usb:/dev/usb/lp0", "vendor":"canon", "vendor_ieee":"Canon"],
	    $["conf":$[], "ff":false, "name":"rem", "raw":false, "type":"yast2", "uri":"lpd://printer.suse.de/lp"],
	];
	Printer::autodetected = [
	    $["bus":"usb", "dev_name":"/dev/usb/lp0", "device":"BJC-6100", "unique_key":"Kns9.VeHHAhw8MvA", "uri":"usb:/dev/usb/lp0", "vendor":"Canon"],
	];
	Printer::default = "lp";
	Printer::selectPrinter (3);
	list seq = [ "detected", "configdetected", "quick", "complex", "connection_local", "usb", "name", "model", "config", "filter", "featues", "edit", ];
	foreach (`i, seq, ``{
	    eval (lookup (getAliases (), i, nil));
	});
	Printer::index = -1;									runLocalConnectionDialog ();
	Printer::printer = add (Printer::printer, "uri", "parallel:/dev/lp0");		runDeviceDialog ("parallel");
	Printer::printer = add (Printer::printer, "uri", "serial:/dev/ttyS0");		runDeviceDialog ("serial");
	Printer::printer = add (Printer::printer, "uri", "file:/tmp/printer.ps");		runPipeDialog ();
	Printer::printer = add (Printer::printer, "uri", "samba://user@smb.suse.de/lp");	runRemoteDialog ("samba");
	Printer::printer = add (Printer::printer, "uri", "novell://user@novell.suse.de/lp");runRemoteDialog ("novell");
	Printer::printer = add (Printer::printer, "uri", "lpr://printer.suse.de/lp");	runRemoteDialog ("lpd");
    }
    /**
     * Run configuratin wizard.
     * @param skip_detection true if detection is skipped
     * @return `next, `back, `abort. If `next, then save settings.
     */
    global define symbol runWizard (boolean skip_detection) ``{
	map detected_sequence = $[
	    "ws_start" : "detected",
	    "redetect" : $[`next : "detected", ],
	    "detected" : $[
		`next : `next,
		`abort : `abort,
		`configure_button : "add_printer_wz",
		`restart_button : "redetect",
		`edit_button : "main_wz",
		],
	    "add_printer_wz" : $[
		`abort : `abort,
		`next : "detected",
		],
	    "main_wz" : $[
		`next : `next,
		`abort : `abort,
		`switch : `switch,
		`reinstall : `reinstall,
		],
	    ];
	map main_sequence = $[
	    "ws_start" : "config_type",
	    "config_type" : $[
		`server : "complex",
		`client : "cups_client_main",
	    ],
	    "complex"  : $[
		`next : `next,
		`add  : "add_printer_wz",
		`edit : "edit_printer_wz",
		`abort : `abort,
		`client : "cups_client_main",
		`advanced : "advanced",
	    ],
	    "advanced" : $[
		`next : "config_type",
		`this : "advanced",
		`cups : "config_type",
		`cupsd : "cupsd",
		`cupsusb : "cups_usb",
		`reinstall : `reinstall,
		`switch : `switch,
		`abort : `abort,
	    ],
	    "cups_usb" : $[
		`next : "advanced",
		`abort : `abort,
	    ],
	    "cupsd" : $[
		`next : "advanced",
		`abort : `abort,
		`root : "cupsaclroot",
		`admin : "cupsacladmin",
		`printers : "cupsaclprinters",
		`classes : "cupsaclclasses",
	    ],
	    "cupsaclroot" : $[
		`next : "cupsd",
		`abort : `abort,
	    ],
            "cupsacladmin" : $[
                `next : "cupsd",
                `abort : `abort,
            ],
            "cupsaclprinters" : $[
                `next : "cupsd",
                `abort : `abort,
            ],
            "cupsaclclasses" : $[
                `next : "cupsd",
                `abort : `abort,
            ],
	    "add_printer_wz" : $[
		`next: "complex",
		`abort : `abort,
		],
	    "edit_printer_wz": $[
		`next: "complex",
		`abort : `abort,
		],
	    "cups_client_main" : $[
		`next : `next,
		`abort : `abort,
		`advanced : "advanced",
		`switch : `switch,
		],
	    ];
	map add_printer_sequence = $[
	    "ws_start"   : "detectconftype",
	    "detectconftype" : $[
                `abort : `abort,
                `quick : "edit_printer_wz",
                `name : "name_auto",
		`installed_printer : "inst_printer",
		`connection : "connection_type",
	    ],
	    "connection_type" : $[
		`local : "connection_local",
		`cups : "connection_cups",
		`lpd : "lpd",
		`smb : "samba",
		`ipx : "novell",
		`direct : "connection_direct",
		`queue : "inst_printer",
		`other : "connection_other",
		`abort : `abort,
	    ],
	    "connection_local" : $[
		`parallel : "parallel",
		`serial: "serial",
		`usb: "usb",
		`irda: "irda",
		`abort : `abort,
		],
	    "connection_cups" : $[
		`cups_client : "cups_client",
		`listen_ipp : "listen_ipp_bcast",
		`ipp : "ipp",
		`abort : `abort,
	    ],
	    "connection_direct" : $[
		`socket : "socket",
		`lpd : "lpd",
		`ipp : "ipp",
		`abort : `abort,
	    ],
	    "connection_other" : $[
		`class : "name_auto",
		`pipe : "pipe",
		`uri : "other",
		`abort : `abort,
	    ],
	    // single connection types
	    "parallel" : $[
		`next : "name_auto",
		`abort : `abort,
		`ppdetails : "ppdetails",
	    ],
	    "pipe" : $[ `next : "name_auto", `abort : `abort, ],
	    "serial" : $[
		`next : "name_auto",
		`abort : `abort,
		`spdetails : "spdetails",
	    ],
	    "usb" : $[ `next : "name_auto", `abort : `abort, ],
	    "irda" : $[ `next : "name_auto", `abort : `abort, ],
	    "samba" : $[ `next : "name_auto", `abort : `abort, ],
	    "novell" : $[ `next : "name_auto", `abort : `abort, ],
	    "lpd" : $[ `next : "name_auto", `abort : `abort, ],
	    "ipp" : $[ `next : "name_auto", `abort : `abort, ],
	    "socket" : $[ `next : "name_auto", `abort : `abort, ],
	    "other" : $[ `next : "name_auto", `abort : `abort, ],
            "ppdetails" : $[ `abort : `abort, `next : "parallel", ],
            "spdetails" : $[ `abort : `abort, `next : "serial", ],
	    "listen_ipp_bcast" : $[ `abort : `abort, `next : "storeprinter" ],
	    "cups_client" : $[ `abort : `abort, `next : "storeprinter" ],
	    // end of connection types
	    "inst_printer" : $[ `next : "edit_printer_wz", `abort : `abort, ],

	    "name_auto" : $[
		`abort : `abort,
		`next : "model",
		`raw : "storeprinter",
		`class : "members",
	    ],
	    "model" : $[
		`abort : `abort,
		`next : "edit_printer_wz",
		`next_propose_queues : "queues_proposal",
		`useppd : "useppd",
	    ],
	    "useppd" : $[
		`abort : `abort,
		`db : "model",
		`next: "edit_printer_wz",
	    ],
	    "members" : $[
		`abort : `abort,
		`next : "edit_printer_wz",
	    ],
	    "queues_proposal" : $[
		`abort : `abort,
		`next : `next,
	    ],

	    "edit_printer_wz" : $[ `abort : `abort, `next : `next ],
	    "storeprinter" : $[`next : `next, ],
	];

	map edit_printer_sequence = $[
	    "ws_start"   : "edit",
	    "edit" : $[
		`con_samba : "samba",
		`con_novell : "novell",
		`con_lpd: "lpd",
		`con_pipe: "pipe",
		`con_ipp : "ipp",
		`con_socket: "socket",
		`connection : "connection_local",
		`name : "name",
		`model : "model",
		`config : "ppdselect",
		`settings : "filter",
		`ascii : "features",
		`state : "state",
		`perm : "users",
		`ppd : "useppd",
		`class_members : "members",
		`add : "add_printer_wz",
		`next : "storeprinter",
		`abort : `abort,
		],
	    "features" : $[
		`next : "edit",
		`abort : `abort,
	    ],
	    "state" : $[ `next : "edit", `abort : `abort, ],
	    "users" : $[ `next : "edit", `abort : `abort, ],
	    "add_printer_wz" : $[ `next : "edit", `abort : `abort ],
	    "samba" : $[ `next : "edit", `abort : `abort, ],
	    "novell" : $[ `next : "edit", `abort : `abort, ],
	    "ipp" : $[ `next : "edit", `abort : `abort, ],
	    "socket" : $[ `next : "edit", `abort : `abort, ],
	    "connection_local" : $[
		`parallel: "parallel",
		`serial : "serial",
		`usb : "usb",
		`irda : "irda",
		`abort : `abort,
		],
	    "parallel" : $[
		`abort : `abort,
		`next : "edit",
		`ppdetails : "ppdetails",
	    ],
	    "ppdetails" : $[ `abort : `abort, `next : "parallel", ],
	    "serial" : $[
		`abort : `abort,
		`next : "edit",
		`spdetails : "spdetails",
	    ],
	    "spdetails" : $[ `abort : `abort, `next : "serial", ],
	    "usb" : $[ `abort : `abort, `next : "edit", ],
	    "irda" : $[ `next : "edit", `abort : `abort, ],
	    "lpd" : $[ `abort: `abort, `next: "edit", ],
	    "pipe" : $[ `abort : `abort, `next : "edit", ],
	    "model" : $[ `abort : `abort, `next : "edit", `useppd: "useppd",],
	    "ppdselect" : $[
		`abort : `abort,
		`advanced : "filter",
		`next: "edit",
	    ],
	    "name" : $[
		`abort : `abort,
		`next : "edit",
		`raw : "edit",
		`class : "edit"
	    ],
	    "filter" : $[
		`abort : `abort,
		`next : "edit",
	    ],
	    "useppd" : $[ `abort : `abort, `db : "model", `next: "edit" ],
	    "members" : $[ `abort : `abort, `next : "edit", ],
	    "storeprinter" : $[`next : `next, ],
	    ];

	Printer::detection = !skip_detection;
	return WizardSequencer (getAliases (), skip_detection ? main_sequence : detected_sequence);
    }
}
