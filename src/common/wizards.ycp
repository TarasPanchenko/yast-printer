/**
 * File:
 *  wizards.ycp
 * Module:
 *  Printer configurator
 * Summary:
 *  Wizard sequencer
 * Authors:
 *  Petr Blahos <pblahos@suse.cz>
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */
{
    textdomain "printer";

    import "Arch";
    import "Label";
    import "Mode";
    import "Printer";
    import "Wizard";

    include "printer/dialogs-connection.ycp";
    include "printer/dialogs-cups.ycp";
    include "printer/dialogs-lprng.ycp";
    include "printer/dialogs.ycp";
    include "wizard/sequencer.ycp";

// pre-declare sequences

// FIXME uncomment for new interpreter
#    global define symbol MainSequence();
#    global define symbol AddPrinterSubSequence ();
#    global define symbol EditPrinterSequence ();
#    global define symbol AddPrinterSequence ();

    /**
      * Get map of aliases for wizard sequencer.
      * @return aliases
      */
    global define map getAliases () ``{
	 return $[
	    // switchers, no dialogs
	    "detectconftype" :	[ ``(detectConfigType ()), true],
	    "config_type" :	[ ``(getInstType ()), true, ],
	    "mark_yast" : 	[ ``(markQueueYaST ()), true ],

	    // sequences
	    "main_wz" :		``(MainSequence ()),
	    "add_printer_wz" :	``(AddPrinterSequence ()),
	    "edit_printer_wz" :	``(EditPrinterSequence ()),
	    "add_printer_sub_wz":``(AddPrinterSubSequence ()),

	    // real dialogs
	    "name_auto" :	``(runNameDialog (true)),
	    "name" :		``(runNameDialog (false)),
            "detected" :        ``(runDetectedDialog ()),
            "complex" :         ``(runComplexDialog ()),
	    "model" :           ``(runManufModelDialog ()),
	    "inst_printer" :    ``(runInstalledPrinterDialog ()),
	    "queues_proposal" : ``(runQueuesProposalDialog ()),

	    // connection selection
	    "connection_type" :	``(runConnectionTypeDialog ()),
	    "connection_local" :``(runLocalConnectionDialog ()),
	    "connection_cups" : ``(runCupsConnectionDialog ()),
	    "connection_direct":``(runDirectConnectionDialog ()),
	    "connection_other": ``(runOtherConnectionDialog ()),
		// by connection type
		    // local
	    "parallel" :	``(runDeviceDialog ("parallel")),
	    "serial" :          ``(runDeviceDialog ("serial")),
	    "usb" :             ``(runDeviceDialog ("usb")),
	    "irda" :            ``(runDeviceDialog ("irda")),
		    // special
	    "ppdetails" :       ``(editParallelPort ()),
            "spdetails" :       ``(editSerialPort ()),
		    // remote
	    "lpd" :             ``(runRemoteDialog ("lpd")),
	    "ipp" :             ``(runRemoteDialog ("ipp")),
	    "samba" :           ``(runRemoteDialog ("samba")),
	    "novell" :          ``(runRemoteDialog ("novell")),
	    "socket" :          ``(runRemoteDialog ("socket")),
		    // other
	    "pipe" :            ``(runPipeDialog ()),
	    "other" :           ``(runUriDialog()),
		    // cups-only
	    "listen_ipp_bcast": ``(runListenIPPDialog ()),
	    "cups_client" :     ``(runCupsClientDialog (false)),

		// cups only

		// lprng only


	    "advanced" :	``(runAdvancedDialog ()),
	    "cupsd" :		``(runCupsServerDialog ()),
            "cupsaclroot" :	``(runCupsAclDialog (`root)),
            "cupsacladmin" :	``(runCupsAclDialog (`admin)),
            "cupsaclprinters" :	``(runCupsAclDialog (`printers)),
            "cupsaclclasses" :	``(runCupsAclDialog (`classes)),
	    "cups_client_main":	``(runCupsClientDialog (true)),
	    "useppd" :		``(runSelectPpdFile ()),
	    "downloadppd" :	``(runDownloadPpdFile ()),
	    "ppdselect" :	``(runPpdSelectDialog ()),
	    "members" :		``(runMembersDialog ()),
	    "filter" :		``(runOptionsDialog ()),
	    "features" :	``(runFeaturesDialog ()),
	    "users" :		``(runUsersDialog ()),
	    "state" :		``(runStateDialog ()),
	    "edit" :		``(runEditDialog ()),
	    "redetect" :	[ ``(runProbeDialog ()), true ],
	    "storeprinter" :	[ ``(storePrinter ()) , true ],


	    "cups_usb" :	``(runCupsUsbDeviceTypeDialog ()),
	];
    }
    /**
     * Show all dialogs with some fake data...
     */
    global define void testDialogs () ``{
	// FIXME if is really needed
	Printer::printcap = [
	    $["conf":$[], "ff":false, "name":"rem", "raw":false, "type":"yast2", "uri":"lpd://printer.suse.de/lp"],
	];
	Printer::autodetected = [
	    $["dev_name":"/dev/usb/lp0", "device":"BJC-6100", "unique_key":"Kns9.VeHHAhw8MvA", "uri":"usb:/dev/usb/lp0", "vendor":"Canon"],
	];
	Printer::default = "lp";
	Printer::selectPrinter (3);
	list seq = [ "detected", "configdetected", "quick", "complex", "connection_local", "usb", "name", "model", "filter", "featues", "edit", ];
	foreach (`i, seq, ``{
	    eval (lookup (getAliases (), i, nil));
	});
	Printer::index = -1;									runLocalConnectionDialog ();
	Printer::printer = add (Printer::printer, "uri", "parallel:/dev/lp0");		runDeviceDialog ("parallel");
	Printer::printer = add (Printer::printer, "uri", "serial:/dev/ttyS0");		runDeviceDialog ("serial");
	Printer::printer = add (Printer::printer, "uri", "file:/tmp/printer.ps");		runPipeDialog ();
	Printer::printer = add (Printer::printer, "uri", "samba://user@smb.suse.de/lp");	runRemoteDialog ("samba");
	Printer::printer = add (Printer::printer, "uri", "novell://user@novell.suse.de/lp");runRemoteDialog ("novell");
	Printer::printer = add (Printer::printer, "uri", "lpr://printer.suse.de/lp");	runRemoteDialog ("lpd");
    }

    /**
      * Workflow for editing a single queue
      * @return sequence result
      */
    global define symbol EditPrinterSequence () ``{
	map aliases = getAliases ();
	map sequence = $[
	    "ws_start"   : "edit",
	    "edit" : $[
		`con_samba : "samba",
		`con_novell : "novell",
		`con_lpd: "lpd",
		`con_pipe: "pipe",
		`con_ipp : "ipp",
		`con_socket: "socket",
		`connection : "connection_local",
		`name : "name",
		`model : "model",
		`ppd : "ppdselect",
		`settings : "filter",
		`ascii : "features",
		`state : "state",
		`perm : "users",
		`class_members : "members",
		`add : "add_printer_sub_wz",
		`next : "storeprinter",
		`abort : `abort,
		],
	    "features" : $[
		`next : "edit",
		`abort : `abort,
	    ],
	    "state" : $[ `next : "edit", `abort : `abort, ],
	    "users" : $[ `next : "edit", `abort : `abort, ],
	    "add_printer_sub_wz" : $[
		`next : "mark_yast",
		`edit : "mark_yast",
		`abort : `abort
	    ],
	    "mark_yast" : $[ `next : "edit" ],
	    "samba" : $[ `next : "edit", `abort : `abort, ],
	    "novell" : $[ `next : "edit", `abort : `abort, ],
	    "ipp" : $[ `next : "edit", `abort : `abort, ],
	    "socket" : $[ `next : "edit", `abort : `abort, ],
	    "connection_local" : $[
		`parallel: "parallel",
		`serial : "serial",
		`usb : "usb",
		`irda : "irda",
		`abort : `abort,
	    ],
	    "parallel" : $[
		`abort : `abort,
		`next : "edit",
		`ppdetails : "ppdetails",
	    ],
	    "ppdetails" : $[ `abort : `abort, `next : "parallel", ],
	    "serial" : $[
		`abort : `abort,
		`next : "edit",
		`spdetails : "spdetails",
	    ],
	    "spdetails" : $[ `abort : `abort, `next : "serial", ],
	    "usb" : $[ `abort : `abort, `next : "edit", ],
	    "irda" : $[ `next : "edit", `abort : `abort, ],
	    "lpd" : $[ `abort: `abort, `next: "edit", ],
	    "pipe" : $[ `abort : `abort, `next : "edit", ],
	    "model" : $[
		`abort : `abort,
		`next : "edit",
		`specifyppd : "useppd",
		`downloadppd : "downloadppd",
	    ],
	    "ppdselect" : $[
		`abort : `abort,
		`advanced : "filter",
		`next: "edit",
	    ],
	    "name" : $[
		`abort : `abort,
		`next : "edit",
		`raw : "edit",
		`class : "edit"
	    ],
	    "filter" : $[
		`abort : `abort,
		`next : "edit",
	    ],
	    "useppd" : $[
		`abort : `abort,
		`next : "model",
	    ],
	    "downloadppd" : $[ `abort : `abort, `next : "model"],
	    "members" : $[ `abort : `abort, `next : "edit", ],
	    "storeprinter" : $[`next : `next, ],
	];
	aliases = filter (string k, any v, aliases, ``(haskey (sequence, k)));
	return WizardSequencer(aliases, sequence);
    }

    /**
      * Workflow for adding a single queue
      * @return sequence result
      */
    global define symbol AddPrinterSubSequence () ``{
	map aliases = getAliases ();
	map sequence = $[
	    "ws_start"   : "detectconftype",
	    "detectconftype" : $[
                `abort : `abort,
                `quick : `edit,
                `name : "name_auto",
		`installed_printer : "inst_printer",
		`connection : "connection_type",
	    ],
	    "connection_type" : $[
		`parallel : "parallel",
		`serial: "serial",
		`usb: "usb",
		`irda: "irda",
		`cups : "connection_cups",
		`lpd : "lpd",
		`smb : "samba",
		`ipx : "novell",
		`direct : "connection_direct",
		`queue : "inst_printer",
		`other : "connection_other",
		`abort : `abort,
	    ],
	    "connection_cups" : $[
		`cups_client : "cups_client",
		`listen_ipp : "listen_ipp_bcast",
		`ipp : "ipp",
		`abort : `abort,
	    ],
	    "connection_direct" : $[
		`socket : "socket",
		`lpd : "lpd",
		`ipp : "ipp",
		`abort : `abort,
	    ],
	    "connection_other" : $[
		`class : "name_auto",
		`pipe : "pipe",
		`uri : "other",
		`abort : `abort,
	    ],
	    // single connection types
	    "parallel" : $[
		`next : "name_auto",
		`abort : `abort,
		`ppdetails : "ppdetails",
	    ],
	    "pipe" : $[ `next : "name_auto", `abort : `abort, ],
	    "serial" : $[
		`next : "name_auto",
		`abort : `abort,
		`spdetails : "spdetails",
	    ],
	    "usb" : $[ `next : "name_auto", `abort : `abort, ],
	    "irda" : $[ `next : "name_auto", `abort : `abort, ],
	    "samba" : $[ `next : "name_auto", `abort : `abort, ],
	    "novell" : $[ `next : "name_auto", `abort : `abort, ],
	    "lpd" : $[ `next : "name_auto", `abort : `abort, ],
	    "ipp" : $[ `next : "name_auto", `abort : `abort, ],
	    "socket" : $[ `next : "name_auto", `abort : `abort, ],
	    "other" : $[ `next : "name_auto", `abort : `abort, ],
            "ppdetails" : $[ `abort : `abort, `next : "parallel", ],
            "spdetails" : $[ `abort : `abort, `next : "serial", ],
	    "listen_ipp_bcast" : $[ `abort : `abort, `next : "storeprinter" ],
	    "cups_client" : $[ `abort : `abort, `next : "storeprinter" ],
	    // end of connection types
	    "inst_printer" : $[ `next : `edit, `abort : `abort, ],

	    "name_auto" : $[
		`abort : `abort,
		`next : "model",
		`raw : "storeprinter",
		`class : "members",
	    ],
	    "model" : $[
		`abort : `abort,
		`next : `edit,
		`next_propose_queues : "queues_proposal",
		`specifyppd : "useppd",
		`downloadppd : "downloadppd",
	    ],
	    "useppd" : $[
		`abort : `abort,
		`next : "model",
	    ],
	    "downloadppd" : $[
		`abort : `abort,
		`next: "model",
	    ],
	    "members" : $[
		`abort : `abort,
		`next : `edit,
	    ],
	    "queues_proposal" : $[
		`abort : `abort,
		`next : `next,
	    ],

	    "storeprinter" : $[`next : `next, ],
	];
	aliases = filter (string k, any v, aliases, ``(haskey (sequence, k)));
	return WizardSequencer(aliases, sequence);
    }

    /**
      * Workflow for adding a single queue
      * @return sequence result
      */
    global define symbol AddPrinterSequence () ``{
	map aliases = getAliases ();
	map sequence = $[
	    "ws_start"   : "add_printer_sub_wz",
	    "add_printer_sub_wz" : $[
                `abort : `abort,
		`next : `next,
		`edit : "edit_printer_wz"
//                `quick : "edit_printer_wz",
//                `name : "name_auto",
//		`installed_printer : "inst_printer",
//		`connection : "connection_type",
	    ],

	    "edit_printer_wz" : $[ `abort : `abort, `next : `next ],
	];
	aliases = filter (string k, any v, aliases, ``(haskey (sequence, k)));
	return WizardSequencer(aliases, sequence);
    }

    /**
      * Main workflow of the printer configuration with detected printers dialog
      * @return sequence result
      */
    global define symbol MainSequence() ``{
	map aliases = getAliases ();
	map sequence = $[
	    "ws_start" : "config_type",
	    "config_type" : $[
		`server : "complex",
		`client : "cups_client_main",
	    ],
	    "complex"  : $[
		`next : `next,
		`add  : "add_printer_wz",
		`edit : "edit_printer_wz",
		`abort : `abort,
		`client : "cups_client_main",
		`advanced : "advanced",
	    ],
	    "advanced" : $[
		`next : "config_type",
		`this : "advanced",
		`cups : "config_type",
		`cupsd : "cupsd",
		`cupsusb : "cups_usb",
		`reinstall : `reinstall,
		`switch : `switch,
		`abort : `abort,
	    ],
	    "cups_usb" : $[
		`next : "advanced",
		`abort : `abort,
	    ],
	    "cupsd" : $[
		`next : "advanced",
		`abort : `abort,
		`root : "cupsaclroot",
		`admin : "cupsacladmin",
		`printers : "cupsaclprinters",
		`classes : "cupsaclclasses",
	    ],
	    "cupsaclroot" : $[
		`next : "cupsd",
		`abort : `abort,
	    ],
            "cupsacladmin" : $[
                `next : "cupsd",
                `abort : `abort,
            ],
            "cupsaclprinters" : $[
                `next : "cupsd",
                `abort : `abort,
            ],
            "cupsaclclasses" : $[
                `next : "cupsd",
                `abort : `abort,
            ],
	    "add_printer_wz" : $[
		`next: "complex",
		`abort : `abort,
	    ],
	    "edit_printer_wz": $[
		`next: "complex",
		`abort : `abort,
	    ],
	    "cups_client_main" : $[
		`next : `next,
		`abort : `abort,
		`advanced : "advanced",
		`switch : `switch,
	    ],
	];
	aliases = filter (string k, any v, aliases, ``(haskey (sequence, k)));
	return WizardSequencer(aliases, sequence);
    }

    /**
      * Main workflow of the printer configuration with detected printers dialog
      * @return sequence result
      */
    global define symbol DetectedSequence() ``{
	map aliases = getAliases ();
	map sequence = $[
	    "ws_start" : "detected",
	    "redetect" : $[`next : "detected", ],
	    "detected" : $[
		`next : `next,
		`abort : `abort,
		`configure_button : "add_printer_wz",
		`restart_button : "redetect",
		`edit_button : "main_wz",
	    ],
	    "add_printer_wz" : $[
		`abort : `abort,
		`next : "detected",
	    ],
	    "main_wz" : $[
		`next : `next,
		`abort : `abort,
		`switch : `switch,
		`reinstall : `reinstall,
	    ],
	];
	aliases = filter (string k, any v, aliases, ``(haskey (sequence, k)));
	return WizardSequencer(aliases, sequence);
    }

    /**
      * Whole configuration of printer but without reading and writing.
      * For use with autoinstallation.
      * @return sequence result
      */
    global define symbol PrinterAutoSequence() ``{
	Wizard::CreateDialog();
        Wizard::SetContentsButtons("", `VBox (), "",
            Label::BackButton(), Label::NextButton());
	symbol ret = DetectedSequence();
	UI::CloseDialog();
	return ret;
    }

    /**
      * Whole configuration of dns-server
      * @return sequence result
      */
    global define symbol PrinterSequence() ``{
	map aliases = $[
	    "read"	: [ ``( ReadDialog() ), true ],
	    "main"	:   ``( DetectedSequence() ),
	    "write"	: [ ``( WriteDialog() ), true ],
//	    "switch"	: [ ``(`next), true ],
//	    "reinstall"	: [ ``(`next), true ],
	];

	map sequence = $[
	    "ws_start"		: "read",
	    "read" : $[
		`abort		: `abort,
		`next		: "main"
	    ],
	    "main" : $[
		`abort		: `abort,
		`next		: "write",
		`switch		: "read",
		`reinstall	: "read",
	    ],
/*	    "switch" : $[
		`next : "read",
	    ],
	    "reinstall" : $[
		`next : "read",
	    ],*/
	    "write" : $[
		`abort  : `abort,
		`next   : `next
	    ]
	];

	Wizard::CreateDialog();
	symbol ret = WizardSequencer(aliases, sequence);

	UI::CloseDialog();
	return ret;
    }



}
