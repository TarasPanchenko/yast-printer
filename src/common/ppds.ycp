/**
 * File:
 *  ppd.ycp
 *
 * Module:
 *  Printer configurator
 *
 * Summary:
 *  Misc. defines for handling foomatic PPD files.
 *
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>   2002
 *
 * $Id$
 *
 */

{
    textdomain "printer";
    import "Printer";
    import "Printerlib";
    import "Report";
    import "Mode";
    import "Label";

    /**
      * Get proposed default queue when using foomatic db
      * @param queues list of queues
      * @return proposed default queue name
      */
    global define string getFoomaticDefaultQueue (list queues) ``{
        string default_queue = queues[0, "name"]:nil;
        foreach (`q, queues, ``{
            if (regexpmatch (q["name"]:"", "normal[0-9]")
                 || q["name"]:"" == "normal")
            {
                default_queue = q["name"]:"";
            }
        });
        return default_queue;
    }

    /**
      * Sort PPD files according to preference list
      * @param vendor_db string vendor database key
      * @param device_db string model database key
      * @param ppd_nicks list of PPD file nicknames, if nil, then PPD nicknames
      *   are taken from foomatic database
      * @return list of sorted PPD nicknames
      */
    global define list sortPpds (string vendor_db, string device_db,
	list ppd_nicks)
    ``{
	vendor_db = SCR::Read (.ppd.db.vendorname, vendor_db);
	device_db = SCR::Read (.ppd.db.modelname, [vendor_db, device_db]);
        SCR::Execute (.target.bash, sformat (
	    "/usr/bin/touch %1/ppd_preference_list",
	    Printerlib::baseDataDir));
        map order = SCR::Read (.target.ycp,
	    sformat ("%1/ppd_preference_list", Printerlib::baseDataDir));
        if (order == nil)
            order = $[];

        list(string) preferred = [];
        foreach (`k, `v, order, ``{
            if (regexpmatch (vendor_db, k))
            {
                foreach (`kk, `vv, v, ``{
                    if (regexpmatch (device_db, kk))
                    {
                        y2debug ("Matched %1, %2", k, kk);
                        preferred = order[k, kk]:[];
                    }
                });
                if (preferred == [])
                {
                    preferred = order[k, "__default__"]:[];
                }

            }
        });
        if (preferred == [])
            preferred = order["__default__"]:[];
        y2debug ("Order preferred list: %1", preferred);

        map recom = $[];
        map other = $[];
	map downrec = $[];
	map downoth = $[];
	loadFoomaticIfNeeded ();
	map ppds = $[];

	if (ppd_nicks == nil)
	    ppds = filter (`k, `v, Printer::foomatic[vendor_db, device_db]:$[],
		``(is (k, string)));
	else
	    ppds = listmap (string k, ppd_nicks, ``([k, $[]]));

        foreach (`k, `v, ppds, ``{
            boolean found = false;
            foreach (`i, preferred, ``{
                if (! found && regexpmatch (k, i))
                {
		  if (issubstring (v["filename"]:"",
		    "/usr/share/cups/model/downloaded/"))
		  {
                    if (issubstring (k, "(recommended)"))
                    {
                        downrec[i] = add (downrec[i]:[], k);
                    }
                    else
                    {
                        downoth[i] = add (downoth[i]:[], k);
                    }
		  }
		  else
		  {
                    if (issubstring (k, "(recommended)"))
                    {
                        recom[i] = add (recom[i]:[], k);
                    }
                    else
                    {
                        other[i] = add (other[i]:[], k);
                    }
		  }
                  found = true;
                }

            });
            if (! found)
            {
	      if (issubstring (v["filename"]:"",
		"/usr/share/cups/model/downloaded/"))
	      {
                if (issubstring (k, "(recommended)"))
                {
                    downrec["other"] = add (downrec["other"]:[], k);
                }
                else
                {
                    downoth["other"] = add (downoth["other"]:[], k);
                }
	      }
	      else
	      {
                if (issubstring (k, "(recommended)"))
                {
                    recom["other"] = add (recom["other"]:[], k);
                }
                else
                {
                    other["other"] = add (other["other"]:[], k);
                }
	      }
            }
        });

        list result = [];

        y2debug ("Recom: %1, other: %2", recom, other);
	y2debug ("Downloaded: Recom: %1, other: %2", downrec, downoth);

        foreach (`i, preferred, ``{
            result = merge (result, downrec[i]:[]);
        });
        result = merge (result, downrec["other"]:[]);

        foreach (`i, preferred, ``{
            result = merge (result, downoth[i]:[]);
        });
        result = merge (result, downoth["other"]:[]);


        foreach (`i, preferred, ``{
            result = merge (result, recom[i]:[]);
        });
        result = merge (result, recom["other"]:[]);

        foreach (`i, preferred, ``{
            result = merge (result, other[i]:[]);
        });
        result = merge (result, other["other"]:[]);

        y2debug ("Sorted PPD files: %1", result);
        return result;
    }


    /**
      * Get the PPD file for automatic installation
      * @param vendor_db string vendor database key
      * @param device_db string model database key
      * @param ppd_nicks list of PPD file nicknames, if nil, then PPD nicknames
      *   are taken from foomatic database
      * @return name of the PPD file (of database, not filename),
      *   nil if no is usable
      */
    global define string getAutoPpdFile (string vendor_db, string device_db,
	list ppd_nicks)
    ``{
	list ppds = sortPpds (vendor_db, device_db, ppd_nicks);
	if (Printer::spooler == "cups")
	    return ppds[0]:nil;
	// for LPRng find first with foomatic-rip as filter
	return find (string s, ppds, ``(
	    Printer::foomatic[vendor_db, device_db, s, "filter"]:""
		== "foomatic-rip"));
    }

    /**
      * Get PPD file updated according to printer options and add it's name to
      * printer description map
      * @param entry map of printer
      * @return map updated printer map
      */
    global define map getUpdatedPpdFile (map entry) ``{
        string ppdfilename = lookup (entry, "ppd", "");
        string ownppd = lookup (entry, "ownppd", "");
        boolean raw = entry["raw"]:false;
        if (raw)
        {
            ppdfilename = "";
            ownppd = "";
            entry["ppd"] = "";
        }
        else if (ppdfilename == "")
        {
            ppdfilename = SCR::Read (.target.tmpdir);
            ppdfilename = ppdfilename + "/ppdfile";
        }

        string ppdfile = "";
        if (entry["ownppd"]:"" != "")
            ppdfile = entry["ownppd"]:"";
        else if (! raw)
        {
            ppdfile = Printer::foomatic[entry["vendor_db"]:"",
                entry["device_db"]:"",
                entry["config"]:"",
                "filename"]:"";
            y2milestone ("Using PPD file >>%1<<", ppdfile);
            if (ppdfile == "")
            {
                // message popup
                Report::Error (sformat (_("An error occurred while saving queue %1.

Incorrect internal data. Try selecting the
printer model again.
"), name));
                return nil;
            }
        }

        if ((ownppd == "" || isPpd (ownppd)) && ! raw)
        {
            if (ppdfilename != "")
            {
                SCR::Write (.ppd.file.modify, [ppdfile, ppdfilename, entry["options"]:$[]]);
                entry["ppd"] = ppdfilename;
            }
        }
        else
            if (isPpd (ownppd))
                entry["ppd"] = ownppd;

        return entry;
    }


    /**
      * Get auto queues for printer when using foomatic database
      * @param vendor string vendor db key
      * @param model string model db key
      * @param config string choosen ppd file, nil = auto
      * @return list of PPD files
      */
    global define list getFoomaticAutoQueues (string vendor, string model,
        string config)
    ``{
        list forbidden_names = Printer::getForbiddenNames ();
        y2debug ("Getting auto queues for >>%1<< >>%2<<", vendor, model);
        loadFoomaticIfNeeded ();
        list new_queues = [];
        map ppds = getPpdFiles (vendor, model);
        string ppdfile_orig = "";
        if (vendor == "__ownppd__")
            ppdfile_orig = model;
        else if (config == nil || config == "")
            ppdfile_orig = getAutoPpdFile (ppds, vendor, model);
        else
            ppdfile_orig = Printer::foomatic[vendor, model, config, "filename"]:"";
        y2debug ("Choosen PPD file: %1", ppdfile_orig);
        string config = ppds[ppdfile_orig]:"";
        string ppdfile = SCR::Read (.ppd.file.open,
            [ppdfile_orig, SCR::Read (.target.tmpdir)]);
        map options = SCR::Read (.ppd.file.options, [ppdfile, ""]);
        list opts = options["data"]:[];
            integer ind = -1;
            boolean found = true;
            find (`i, opts, ``{
                ind = ind + 1;
                found = i["name"]:"" == "PrintoutMode";
                return found;
            });
            map composite = $[];
            if (found)
                composite = opts[ind]:$[];
            if (composite != $[])
            {
                foreach (`v, composite["valorder"]:[], ``{
                    string optname = composite["name"]:"";
                    string pagesize = Printerlib::getDefaultPaperSize () == `a4 ? "A4" : "Letter";
                    map new_options = $[
                        optname : v,
                        "PageSize" : pagesize,
                        "PageRegion" : pagesize,
                        "ImageableArea" : pagesize,
                        "PaperDimension" : pagesize,
                    ];
                    new_queues = add (new_queues, $[
                        "config" : config,
                        "name" : mergestring (splitstring
                            (tolower (v), "."), "_"),
                        "info" : composite["values", v]:v,
                        "options" : new_options,
                        "composite" : composite["name"]:"",
                    ]);

                });
            }
            else
            {
                new_queues = [ $[
                    "config" : config,
                    "name" : "lp",
                        // table cell
                    "info" : _("default configuration"),
// TODO FIXME: page size
                ]];
            }

            string suffix = Printer::getQueueSuffix (new_queues);
            new_queues = maplist (`v, new_queues, ``{
                v = add (v, "name", Printer::adjustQueueName (lookup (v, "name", "lp") + suffix, forbidden_names));
                if (nil == first_queue)
                {
                    first_queue = lookup (v, "name", "");
                }
                forbidden_names = add (forbidden_names, lookup (v, "name", ""));
                return union (Printer::printer, v);
        });
        y2debug ("Proposing queues %1", maplist (`q, new_queues, ``(q["name"]:"")));
        y2debug ("Proposed queues: %1", new_queues);
        return new_queues;
    }

    /**
      * Check whether foomatic database has been loaded, and if not, then
      * load it
      */
    global define void loadFoomaticIfNeeded () ``{
        if (Printer::foomatic != nil)
            return;
	boolean contains_flag = 0 == SCR::Execute (.target.bash, "/bin/grep '#this database was generated during package building' /var/lib/YaST2/ppd_db.ycp");
        y2milestone ("Checking foomatic database");
        if ((SCR::Read (.ppd.db.changed) || contains_flag) && ! Mode::test)
        {
            y2milestone ("Database changed");
            boolean fast_update = false;
            if (Mode::cont)
            {
                fast_update = true;
                SCR::Write (.ppd.db.check_method, `size);
            }
            SCR::Write (.ppd.db.create, "");
            UI::OpenDialog (`VBox (
                `HSpacing (50),
                `ProgressBar (`id(`pr),
                        // progress bar label
                        _("The list of installed drivers has changed.
Building database of drivers..."), 100, 0)));
            integer result = 0;
            while (true)
            {
                    result = SCR::Read (.ppd.db.creation_status);
                    if (result < 0)
                        break;
                    if (result == 100)
                        break;
                    UI::ChangeWidget (`id (`pr), `Value, result);
                    sleep (1000);
            }
            UI::CloseDialog ();
            if (result < 0)
            {
                    // error report
                    Report::Error (_("An error occurred while creating the database
of printers.
"));
            }
            if (fast_update)
            {
                SCR::Write (.ppd.db.check_method, `checksum);
            }
        }
        Printer::foomatic= SCR::Read (.target.ycp, "/var/lib/YaST2/ppd_db.ycp");
    }

    /**
      * get configurations, which may be usable for detected printer
      * @param vendor_db string name of printer vendor
      * @param device_db string printer model name
      * @return map of ppd files (filename -> description)
      */
    global define map getPpdFiles (string vendor_db, string device_db) ``{
	loadFoomaticIfNeeded ();
	map ppd_db = Printer::foomatic[vendor_db, device_db]:$[];
	ppd_db = filter (`k, `v, ppd_db, ``(is (k, string)));
	map ret = mapmap (string k, map v, ppd_db, ``( [v["filename"]:"", k]));
	ret = filter (`k, `v, ret, ``(k != "" && v != ""));
	return ret;
    }

    /**
      * Process downloaded PPD files
      * @param dir string directory with downloaded PPD files
      * @return boolean true on success
      */
    global define boolean processPpdFiles (string dir) ``{
	string log = dir + "/log";
	string target_dir = "/usr/share/cups/model/downloaded";
	integer test = SCR::Execute (.target.bash, sformat (
	    "/usr/lib/YaST2/bin/process_ppd_files %1 %2 %3", dir,
	    target_dir, log));
	y2milestone ("Test status: %1", test);
	if (test != 0)
	{
	    term text = `RichText (`opt (`plainText), SCR::Read (.target.string, log));
	    UI::OpenDialog(`opt ( `decorated ),
		`VBox (`HSpacing(75),
		// heading
		`Heading(_("Error: No Suitable PPD File Downloaded")),
		text,
		`PushButton( `id(`ok), `opt(`default),
		     Label::OKButton ())
		)
	    );

	    UI::SetFocus(`id(`ok) );
	    any r = UI::UserInput();
	    UI::CloseDialog();
	    return false;
	}
	integer count = tointeger (SCR::Read (.target.string, dir + "/count"));
	// reported message
	Report::Message (sformat (_("%1 file was added to the database",
	    "%1 files were added to the database", count),
	    count));
	Printer::foomatic = nil;
	loadFoomaticIfNeeded ();
	return true;
    }


}
