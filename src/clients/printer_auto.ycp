/**
 * File:
 *  printer_auto.ycp
 *
 * Module:
 *  Printer configurator
 *
 * Summary:
 *  Autoconfiguration preparation.
 *
 * Authors:
 *  Petr Blahos <pblahos@suse.cz>, 2001
 *
 * $Id$
 *
 * Client for preparation of autoinstalation data.
 */

{
    textdomain "printer";

    import "Popup";
    import "Printer";
    import "Spooler";
    import "Wizard";

    include "printer/wizards.ycp";

	any ret = nil;
	string func = "";
	map param = $[];

	/* Check arguments */
	if(size(Args()) > 0 && is(Args(0), string)) {
		func = WFM::Args(0);
		if(size(Args()) > 1 && is(Args(1), map))
			param = WFM::Args(1);
	}
	y2debug("func=%1", func);
	y2debug("param=%1", param);

    if(func == "Import") {
	ret = Printer::Import( param);
    }
    /**
      * Create a summary
      * return string
      */
    else if(func == "Summary") {
	ret = Printer::Summary ([`short]);
    }
    /**
      * Reset configuration
      * return map or list
      */
    else if (func == "Reset") {
	Printer::Import($[]);
	ret = $[];
    }
    /**
      * Change configuration
      * return symbol (i.e. `finish || `accept || `next || `cancel || `abort)
      */
    else if (func == "Change") {
	if (Spooler::Get () == "unknown" || Printer::spooler == "spooler")
	{
	    Spooler::Set ("cups");
	}
	import "Require";
	// popup question
	Require::RequireAndConflict (["cups-drivers", "cups-drivers-stp", "cups"], [], _("For the selected function, the additional packages
%1
must be installed.

Install them now?"));
	Wizard::CreateDialog ();
	do
	{
	    ret = MainSequence ();
	}
	while (ret == `switch);
	UI::CloseDialog ();
    }
    /**
      * Return configuration data
      * return map or list
      */
    else if (func == "Export") {
	ret = Printer::Export();
    }
    /**
      * Write configuration data
      * return boolean
      */
    else if (func == "Write") {
	Printer::write_only = true;
	Spooler::save_all = true;
	ret = Printer::Write();
    }
    else if (func == "Read") {
	ret = Printer::Read();
    }

    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret = false;
    }

	y2debug("ret=%1", ret);
	y2milestone("printer auto finished");
	y2milestone("----------------------------------------");

	return ret;

/* EOF */
}
