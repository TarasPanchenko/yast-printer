/**
 * File:
 *  printer.ycp
 *
 * Module:
 *  Printer configurator
 *
 * Summary:
 *  Main file of printer.
 *
 * Authors:
 *  Jan Holesovsky <kendy@suse.cz>, 2000
 *  Petr Blahos <pblahos@suse.cz>, 2001
 *  Jiri Srain <jsrain@suse.cz>, 2002, 2003
 *
 * $Id$
 *
 * Main file of printer package. Calls all other modules.
 */

{
    /***
     * <H3>YaST2 Printers configuration</H3>
     * Configurator of printers that works with packages <tt>cups</tt> and <tt>LPRng</tt>
     * as printing daemons and <tt>apsfilter</tt> or Foomatoc as magic filter.<BR>
     * For printer documentation index, click <a href="../index.html">here</a>.
     */

    textdomain "printer";

    import "Crash";
    import "Label";
    import "Mode";
    import "Printer";

    include "printer/wizards.ycp";

    Crash::Run ("printer.ycp");

    symbol ret = nil;

    // ===== arguments ================================================

    boolean cups_running = 0 == SCR::Execute (.target.bash,
	"test -f /etc/init.d/cups && /etc/init.d/cups status");
    boolean lprng_running = 0 == SCR::Execute (.target.bash,
	"test -f /etc/init.d/lpd && /etc/init.d/lpd status");

    integer i = 0;
    while (i < size (Args()))
    {
	if (.test == Args (i))
	{
	    Mode::test = true;
	    Printer::skip_autodetection = true;
	}
	else if (.nodetection == Args (i) || ".nodetection" == Args (i))
	{
	    Printer::skip_autodetection = true;
	}
	i = i + 1;
    }

    if (Mode::test)
	testDialogs ();
    else
	ret = PrinterSequence ();

    if (ret == `abort || ret == `back)
    {
	if (! cups_running)
	{
	    SCR::Execute (.target.bash,
		"test -f /etc/init.d/cups && /etc/init.d/cups stop");
	}
	if (! lprng_running)
	{
	    SCR::Execute (.target.bash,
		"test -f /etc/init.d/lpd && /etc/init.d/lpd stop");
	}
    }

    Crash::Finish ("printer.ycp");
    return ret;
}
