#! /bin/bash
#
# Johannes Meixner <jsmeix@suse.de>, 2007, 2008

#set -x

export PATH="/sbin:/usr/sbin:/usr/bin:/bin"
export LC_ALL="POSIX"
export LANG="POSIX"
umask 022

MY_NAME=${0##*/}

KEY="$1"
if test -z "$KEY"
then echo -en "\nUsage:\n$MY_NAME keyword [ new value ]\n" 1>&2
     echo "Without a new value, the current value is reported." 1>&2
     echo "Supported keywords and possible new values are:" 1>&2
     echo "Browsing [ On | Off ]" 1>&2
     echo "BrowseAllow [ all | none | @LOCAL | IP-address[/netmask] ]" 1>&2
     echo "E.g.: BrowseAllow '@LOCAL 192.168.100.1 192.168.200.0/255.255.255.0'" 1>&2
     echo "There is a strict syntax for keywords and values:" 1>&2
     echo "Case matters." 1>&2
     echo "Multiple values for a keyword must be separated by space." 1>&2
     exit 1
fi

# Remove duplicates (ignore case) and remove duplicate, leading and trailing spaces:
VALUE="$( for V in $2 ; do echo $V ; done | sort -b -f -u | tr -s '[:space:]' ' ' | sed -e 's/ *$//' )"

CUPSDCONF="/etc/cups/cupsd.conf"
if ! test -r $CUPSDCONF -a -w $CUPSDCONF
then echo "Cannot read or write $CUPSDCONF." 1>&2
     exit 2
fi

# Function to deal with 'Browsing [On|Off]'
Browsing()
{ if test -n "$VALUE"
  then # If a value was specified, only 'On' or 'Off' (case sensitive) are allowed:
       if ! test "On" = "$VALUE" -o "Off" = "$VALUE"
       then echo "Only '$KEY [ On | Off ]' is supported." 1>&2
            exit 4
       fi
       # Try to substitute an existing Browsing line (ignore case):
       sed -i.yast2save -e "s/^.*$KEY.*/$KEY $VALUE/i" $CUPSDCONF
       # There may exist no Browsing line:
       if ! grep -q "^$KEY $VALUE$" $CUPSDCONF
       then # Append a Browsing line below the last 'Brows' line (ignore case)
            # to have the new Browsing line at the matching place
            # but if no 'Brows' line exists, append at the end of the file:
            LAST_BROWSE_LINE="$( sed -n -e '/Brows/I=' $CUPSDCONF | tail -n 1 )"
            if test -n "$LAST_BROWSE_LINE"
            then sed -i -e "${LAST_BROWSE_LINE}a$KEY $VALUE" $CUPSDCONF
            else echo -en "\n$KEY $VALUE\n\n" >>$CUPSDCONF
            fi
       fi
  fi
  # Report the resulting setting in any case:
  # The 'tr ... [:blank:]' makes sure that all active Browsing entries
  # are found if there is more than one which is a broken config.
  # Remove trailing spaces (needed for the test below).
  RESULT="$( grep -i "^$KEY " $CUPSDCONF | tr -s '[:blank:]' ' ' | cut -s -d' ' -f2 | tr -s '\n' ' ' | sed -e 's/ *$//' )"
  echo -n "$RESULT"
  # For a nicer output on a terminal where stdout and stderr is mixed up,
  # output a '\n' on stderr to get subsequent stuff (e.g. the shell prompt
  # or an error message because of a failed test below) on a new line:
  echo 1>&2
  # Test if the result is the expected one if a value was specified:
  if test -n "$VALUE" -a "$RESULT" != "$VALUE"
  then echo "Failed to set '$KEY $VALUE' in $CUPSDCONF." 1>&2
       exit 5
  fi
}

# Function to deal with 'BrowseAllow [ all | none | @LOCAL | IP-address[/netmask] ]'
BrowseAllow()
{ if test -n "$VALUE"
  then # If a value was specified, only 'all' or 'none' or '@LOCAL' (case sensitive)
       # or one or more IP-addresses are allowed:
       for V in $VALUE
       do if ! test "all" = "$V" -o "none" = "$V" -o "@LOCAL" = "$V"
          then # Test if value matches to IP-address syntax:
               if ! echo "$V" | egrep -q '^([0-9]{1,3}\.){3}[0-9]{1,3}(/([0-9]{1,2})|/(([0-9]{1,3}\.){3}[0-9]{1,3}))?$'
               then echo "Only '$KEY [ all | none | @LOCAL | IP-address[/netmask] ]' is supported." 1>&2
                    exit 4
               fi
          fi
       done
       # Set 'BrowseOrder allow,deny' to deny browse packets by default
       # and then allow them from certain sources via BrowseAllow entries
       # and finally deny from certain sources via BrowseDeny entries.
       # All existing BrowseOrder lines are removed (ignore case).
       sed -i.yast2save -e '/^BrowseOrder.*/Id' $CUPSDCONF
       # Append the new BrowseOrder line below the last 'Brows' line (ignore case)
       # to have the new BrowseOrder line at the matching place
       # but if no 'Brows' line exists, append at the end of the file:
       LAST_BROWSE_LINE="$( sed -n -e '/Brows/I=' $CUPSDCONF | tail -n 1 )"
       if test -n "$LAST_BROWSE_LINE" 
       then sed -i -e "${LAST_BROWSE_LINE}aBrowseOrder allow,deny" $CUPSDCONF
       else echo -en "\nBrowseOrder allow,deny\n\n" >>$CUPSDCONF
       fi
       # All existing active BrowseAllow lines are removed (ignore case):
       sed -i -e '/^BrowseAllow.*/Id' $CUPSDCONF
       # All existing active BrowseDeny lines are deactivated (ignore case):
       sed -i -e 's/^\(BrowseDeny.*\)$/#\1/i' $CUPSDCONF
       # Insert BrowseAllow lines before the BrowseOrder line
       # to have the new BrowseAllow lines at the matching place
       # and in the ordering of the values (needed for the test below):
       for V in $VALUE
       do sed -i -e "/^BrowseOrder /i$KEY from $V" $CUPSDCONF
       done
  fi
  # Report the resulting setting in any case:
  # The 'tr ... [:blank:]' makes sure that all active BrowseAllow entries
  # are found if there is more than one which is allowed.
  # Remove trailing spaces (needed for the test below).
  RESULT="$( grep -i "^$KEY " $CUPSDCONF | sed -e 's/from//I' | tr -s '[:blank:]' ' ' | cut -s -d' ' -f2 | tr -s '\n' ' ' | sed -e 's/ *$//' )"
  echo -n "$RESULT"
  # For a nicer output on a terminal where stdout and stderr is mixed up,
  # output a '\n' on stderr to get subsequent stuff (e.g. the shell prompt
  # or an error message because of a failed test below) on a new line:
  echo 1>&2
  # Test if the result is the expected one if a value was specified:
  if test -n "$VALUE" -a "$RESULT" != "$VALUE"
  then echo "Failed to set '$KEY from $VALUE' in $CUPSDCONF." 1>&2
       exit 5
  fi
}

case "$KEY" in
     Browsing) Browsing;;
     BrowseAllow) BrowseAllow;;
     *) echo "Ignoring keyword '$KEY'" 1>&2
        exit 3 ;;
esac

exit 0

