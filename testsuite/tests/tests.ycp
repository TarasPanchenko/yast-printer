/**
 * File:
 *  tests.ycp
 *
 * Module:
 *  Printer configurator
 *
 * Summary:
 *  Tests for basic translation functions.
 *
 * Authors:
 *  Petr Blahos <blahos@suse.cz>, 2001
 *
 * $Id$
 *
 */

{
    include "testsuite.ycp";
    map I_READ = $[
	"target" : $[
	    "size" : -1,
	    "tmpdir" : "/tmp/",
	    "yast2" : nil,
	],
	"sysconfig" : $[
	    "console" : $[
		"CONSOLE_FONT" : "",
		"CONSOLE_SCREENMAP" : "",
		"CONSOLE_UNICODEMAP" : "",
		"CONSOLE_MAGIC" : "",
		"CONSOLE_ENCODING" : "",
	    ],
	    "language" : $[
		"RC_LANG" : "",
		"DEFAULT_LANGUAGE" : "",
	    ],
	],
	"etc" : $[
	    "install_inf" : $[
		"Cmdline" : "",
		"InstMode" : nil,
	    ],
	],
	"probe" : $[
	    "architecture" : "i386",
	    "has_apm" : true,
	    "has_pcmcia" : false,
	    "has_smp" : false,
	    "system" : [],
	    "memory" : [],
	    "cpu" : [],
	    "cdrom" : $[
		"manual" : [],
	    ],
	    "floppy" : $[
		"manual" : [],
	    ],
	],
    ];
    map I_WRITE = $[];
    map I_EXEC = $[
        "target" : $[
            "bash_output" : $[],
        ],
    ];
    TESTSUITE_INIT ([I_READ, I_WRITE, I_EXEC], 0);
    import "Pkg";
    import "Printer";
    import "Printerlib";
    TESTSUITE_CLEAN ();

    // this is an evil hack so that we don't have to fake Pkg::TargetInit
    // (no time to build a new yast2-testsuite)
    // and yes, the var name is misspetl
    Printerlib::target_inited = true;

/*    UI (``{
        global define MessagePopup (string s) ``{
            y2error ("Message Popup: %1", s);
        }
        global define OpenDialog (any a, any b) ``{
            y2error ("OpenDialog %1", a);
        }
        global define CloseDialog () ``{
            y2error ("CloseDialog");
        }
    });

    y2error ("===== testDevice =====");
*/    map EXEC = $[
        "target":
        $[
            "bash" : 0
            ]
        ];
    Pkg::FAKE (`IsProvided, true);
/*
    TEST (``(Printerlib::testDevice ("/dev/lp0")), [$[], $[], EXEC], 0);
    y2error ("===== testBaudRate =====");
    TEST (``(Printerlib::testBaudRate (0)), [$[], $[], $[]], 0);
    TEST (``(Printerlib::testBaudRate (10)), [$[], $[], $[]], 0);
    y2error ("===== checkHostName =====");
    TEST (``(Printerlib::checkHostName ("good")), [$[], $[], $[]], 0);
    TEST (``(Printerlib::checkHostName ("yes-go_od.1")), [$[], $[], $[]], 0);
    TEST (``(Printerlib::checkHostName ("not so good")), [$[], $[], $[]], 0);
    TEST (``(Printerlib::checkHostName ("too_long_too_long_too_long_too_long_too_long_too_long_too_long_too_long_too_long_")), [$[], $[], $[]], 0);
    y2error ("===== checkRemotePrinter =====");
    TEST (``(Printerlib::checkRemotePrinter ("")), [$[], $[], $[]], 0);
    TEST (``(Printerlib::checkRemotePrinter ("remote")), [$[], $[], $[]], 0);
    y2error ("===== testRemote =====");
    EXEC = $[
        "target":
        $[
            "bash_output" : $["exit": 0, "stdout" : "stdout", "stderr" : "stderr" ]
            ]
        ];
    TEST (``(Printerlib::testRemote ("hname", "rname", true)), [R,$[],EXEC], 0);
    EXEC = $[
        "target":
        $[
            "bash_output" : $["exit": 1, "stdout" : "stdout", "stderr" : "stderr" ]
            ]
        ];
    TEST (``(Printerlib::testRemote ("hname", "rname", true)), [R,$[],EXEC], 0);*/
    y2error ("===== getSpoolSystem =====");
    map R = $[
	"target" : $[ "size" : -1, "bash" : 1],
	];
    Pkg::FAKE (`IsProvided, false);
    map E = R;
    TEST (``(Printerlib::getSpoolSystem ()), [R,$[],E], 0);
    R = $[
	"target" : $[ "size" : 1,  "bash" : 0 ]
	];
    Pkg::FAKE (`IsProvided, true);
    E = R;
    TEST (``(Printerlib::getSpoolSystem ()), [R,$[],E], 0);
    R = $[
	"target" : $[ "size" : -1, "bash" : 0]
	];
    Pkg::FAKE (`IsProvided, true);
    E = R;
    TEST (``(Printerlib::getSpoolSystem ()), [R,$[],E], 0);
    R = $[
	"target" : $[ "size" : 1, "bash" : 1]
	];
    Pkg::FAKE (`IsProvided, false);
    E = R;
    TEST (``(Printerlib::getSpoolSystem ()), [R,$[],E], 0);
/*    y2error ("===== switchTo =====");
    define CallFunction (any a) ``{
        y2debug ("Calling function %1", a);
    }

    map READ = $[
        "target": $[ "tmpdir" : "/tmp" ]
        ];
    EXEC = $[
        "target" : $[
            "bash" : 0
            ]
        ];
    TEST (``(Printerlib::switchTo ("cups")),[READ,$[],EXEC], 0);
    TEST (``(Printerlib::switchTo ("lprold")),[READ,$[],EXEC], 0);
    EXEC = $[
        "target" : $[
            "bash" : 1
            ]
        ];
    TEST (``(Printerlib::switchTo ("cups")),[READ,$[],EXEC], 0);
    TEST (``(Printerlib::switchTo ("lprold")),[READ,$[],EXEC], 0);
*/
}
