#!/usr/bin/perl -w
#
# Parse printcap and create a list of already configured printers
# Jan Holesovsky <kendy@suse.cz>, 2000
# Petr Blahos <pblahos@suse.cz>, 2002
#
#
# Read (.etc.printcap) returns printcap and printers settings
# Read (.etc.printcap.sysnames) returns list of all files (not directories)
#		that are present in directory /etc/lpdfilter. These files
#		mustn't be used as queue name.
#
# $Id$

use lib "/usr/lib/YaST2/agents_non_y2";
use ycp;
use diagnostics;
use strict;

my $printcap = "/etc/printcap";

#--------------------------------------------------------------------
## Escape the possibly dangerous letters
#  input:  1- string to be escaped
#  output: escaped string
sub EscapeString {
  my $str = shift;

  $str =~ s/\\/\\\\/g;
  $str =~ s/"/\\"/g;
  return $str;
}

sub GetPrinterConf {
    my $fname = shift;
    my $ret = "";
    my $line = "";
    if (open (F, $fname)) {
	while ($line = <F>) {
	    if ($line =~ /^[ \t]*([a-zA-Z_][a-zA-Z0-9_]*)[ \t]*=[ \t]*\"(.*)\"[ \t]*$/) {
		$ret .= "\t\"$1\" : \"$2\",\n";
	    }
	    elsif ($line =~ /^[ \t]*([a-zA-Z_][a-zA-Z0-9_]*)[ \t]*=[ \t]*(.*)[ \t]*$/) {
		$ret .= "\t\"$1\" : \"$2\",\n";
	    }
	}
	close (F);
    }
    return $ret;
}

## Store /etc/gs_upp/...upp
# input:  1- filename of the upp file
sub SaveUpp {
  my $fname = shift;
  my $ret = "";
  my $line = "";
  
  if (open(APSRC, $fname)) {
    $ret .= ",\n             \"upp_fname\":\"$fname\",\n";
    $ret .= "             \"upp\":\"";
    while ($line = <APSRC>) {
      $ret .= EscapeString($line);
    }
    $ret .= "\"";
    close(APSRC);
  }
  return $ret;
}

sub EchoYast2 {
  my $fname = shift;
  my $line = "";
  
  if (open(APSRC, $fname)) {
    while ($line = <APSRC>) {
	print $line;
    }
    close(APSRC);
  }
}

#--------------------------------------------------------------------

sub ParsePrintcap {
    	my $buffer    = "";

    	print "[";

	if (open(PRINTCAP, $printcap)) {
	    my $rd = "";
	    my $stay_in = 1;
	    while ($stay_in) {
		if ($rd =~ /^[ \t]*$/) {
		    $rd = <PRINTCAP>;
		}
		if (!defined($rd)) {
		    last;
		}
		$buffer = $buffer.$rd;
		if (!($rd =~ /^[ \t]*#/) && !($rd =~ /^[ \t]*$/)) {
		    # BEGIN: normal entry
		    my $name = $rd;
		    chop ($name);
		    $name =~ s/:.*$//;
		    $name =~ s/\|.*//g;
		    print "\$[   \"name\":\"$name\",\n";
		    
		    my $do_next = 0;
		    # read until the end of the entry
		    if ($rd =~ /\\$/) {
			$do_next = 1;
		    }
		    while (defined($rd = <PRINTCAP>)) {
			if ($do_next) { # \ was at the end of previous line, continue without hesitation
			    $buffer = $buffer.$rd;
			    if ($rd =~ /\\$/) {
				$do_next = 1;
			    } else {
				$do_next = 0;
			    }
			}
			elsif ($rd =~ /^[ \t]*[:|]/) { # only if the line starts with :| does it continue to the next line
			    $buffer = $buffer.$rd;
			    if ($rd =~ /\\$/) {
				$do_next = 1;
			    } else {
				$do_next = 0;
			    }
			}
			else { # we do not continue with this line
			    last;
			}
		    }
		    if ($buffer =~ /cm=lpdfilter[^:]*:/) {
			if ( -r "/etc/lpdfilter/$name/yast2") {
			    print "    \"type\":\"yast2\",\n";
			    EchoYast2 ("/etc/lpdfilter/$name/yast2");
			    print "\"conf\" : \$[\n";
			    print GetPrinterConf ("/etc/lpdfilter/$name/conf");
			    print "],";
			    print "    \"saved\" : \$[ ";
			    print "                \"printcap_part\":\"".EscapeString($buffer)."\"";
			    print SaveUpp ("/etc/lpdfilter/$name/upp");
			    print "    ]],";
			}
			else {
			    print "    \"type\":\"lpdfilter\",\n";
			    print "   \"saved\":\$[\"printcap_part\":\"".EscapeString($buffer)."\"] ],";
			}
		    }
		    else {
			print "    \"type\":\"printcap\",\n";
			print "   \"saved\":\$[\"printcap_part\":\"".EscapeString($buffer)."\"] ],";
		    }
		    # END: normal entry
		    $buffer = "";
		}
		else{
		    $rd = "";
		}
		if (!defined ($rd)) {
		    $stay_in = 0;
		}
	    }
	}
	close(PRINTCAP);

	print "]\n";
}

my $result;

while ( <STDIN> ) 
{
    my ($command, $path, $argument) = ycp::ParseCommand ($_);

    if ($command eq "Read" && $path eq ".")
    {
	y2debug( "Read lprng permissions." );

	ParsePrintcap ();
    }
    elsif ($command eq "Read" && $path eq ".sysnames")
    {
	my $some_dir = "/etc/lpdfilter";
	opendir(DIR, $some_dir) || die "can't opendir $some_dir: $!";
	my @dots = grep { ! -d "$some_dir/$_" } readdir(DIR);
	closedir DIR;
	ycp::Return (\@dots, 1);
    }
    elsif ($command eq "result")
    {
	exit;
    }
    else
    {
	my $return_value = sprintf( "Unknown instruction %s or argument: %s", ycpGetCommand, ycpGetArgType);

	ycpReturnSkalarAsString( $return_value );   
    }
}

