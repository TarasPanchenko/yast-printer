<section id="iface">
    <title>SCR agent interface</title>

<section><title>Write paths</title>
<section>
<title>Write (.db.create) -> boolean</title>
<para>
starts creation of the database of PPD files (drivers). Returns immediately, generates database using other thread.
Returns true if creation started successfully.
</para>
<para>
Format of the database file will be following:
<screen>
$[
    "VENDOR" : $[
	`label : "READABLE_VENDOR",
        "MODEL" : $[
	    `label : "READABLE_MODEL",
	    `support : SUPPORT_STATUS,
	    `vcomment : "VENDOR_COMMENT",
	    `mcomment : "MODEL_COMMENT",
	    "DESCRIPTION1" : ["FILENAME", "VENDOR_IEEE", "MODEL_IEEE"],
	    "DESCRIPTION2" : ["FILENAME2", "VENDOR_IEEE", "MODEL_IEEE"],
        ],
	"MODEL2" : $[
	    ....
 	],
	....
    ],
    "VENDOR2" : $[
        ....
    ],
    ....
]
</screen>
</para>
<para>
When creating database, because of detection equivalence lists for vendors and models will be used.
</para>
<para>
Support status is integer, which can be 0 (supported), 1 (partially) or 2 (unsupported).
</para>
</section>

<section>
<title>Write (.db.create_ot) -> boolean</title>
<para>
makes the same job as .db.create, but doesn't create any new thread and all work makes sybchronous. Returns true if database was successfully rebuilt.
</para>
</section>

<section>
<title>Write (.file.changes, [string filename, map changes] -> boolean</title>
<para>
writes to specified file settings in the parameter. Only changes default values for mentioned options, other options leaves with their previous default values.
</para>
</section>

</section>
<section><title>Read paths</title>
<section>
<title>Read (.db.changed) -> boolean</title>
<para>
checks whether some PPD file was changed/added/removed and database needs to get rebuilt
</para>
</section>

<section>
<title>Read (.db.creation_status) -> integer</title>
<para>
returns current status of database of printers initialization. Returned number is in interval 0 -- 100 (where 100 means already finished)
If returned -1, creation failed.
</para>
</section>

<section>
<title>Read (.db.vendorname, string vendorname ) -> string</title>
<para>
returns the database key for specified vendor. Shifts to uppercase, removes meaningless characters and applies rules from equivalence list.
</para>
</section>

<section>
<title>Read (.db.modelname [string vendorname, string modelname]) -> string</title>
<para>
returns the database key for specified model of specified vendor. Vendor must be in form of database key. Shifts model name to uppercase, removed meaningless characters
and applies rules from vendor-specific and common equivalence lists.
</para>
</section>

<section>
<title>Read (.file.open, [string filename, string dir]) -> string</title>
<para>
copies the file from database to specified directory, where it will be able to be modified.
If original PPD file is compressed, decompression runs too.
</para>
</section>

<section>
<title>Read (.file.option_groups, [string filename]) -> map</title>
<para>
returns list of option groups present in PPD file. Returned list looks like
<screen>
$[
    "charset" : "CHARSET",
    "data" : [ // list of option groups
	    "GROUP1_NAME",
	    "GROUP2_NAME",
	    ....
    ]
]
</screen>
</para>
</section>

<section>
<title>Read (.file.options, [list (string filename, string group]) -> map</title>
<para>
returns list of options of specified option group in PPD file, with marked current default options. Returned list looks like
<screen>
$[
    "charset" : "CHARSET",
    "data: : [ // list of options
	$[
            "name"		: "OPTION_NAME",
	    "gui"		: "READABLE_OPTION_NAME",
	    "current"		: "CURRENT_VALUE",
	    "type"		: "boolean" | "pickone" | "pickmany",
	    "valorder"		: [ "LIST", "OF", "VALUES" ],
	    "values"	: $[
	        "VALUENAME"		: "READABLE_VALUE_NAME",
	        "VALUENAME"		: "READABLE_VALUE_NAME",
	        ....
	    ]
        ],
	$[
            "name"		: "OPTION_NAME",
            "gui"		: "READABLE_OPTION_NAME",
            "current"		: "CURRENT_VALUE",
	    "type"		: "slider" | "int",
	    "lowermargin"	: integer,
	    "uppermargin"	: integer,
	],
	$[
            "name"		: "OPTION_NAME",
            "gui"		: "READABLE_OPTION_NAME",
            "current"       	: "CURRENT_VALUE",
	    "type"		: "yseno",
	],
	....
    ]
]
</screen>
</para>
</section>

<section>
<title></title>
<para>

</para>
</section>

</section>
</section>
      
	    
